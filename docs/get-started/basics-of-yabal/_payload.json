[{"data":1,"prerenderedAt":1449},["Reactive",2],{"content-query-niMQgmLNTb":3,"content-navigation-8C37fagqQL":1399},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":11,"body":13,"_type":1394,"_id":1395,"_source":1396,"_file":1397,"_extension":1398},"/docs/get-started/basics-of-yabal","get-started",false,"","Basics of Yabal","Learn about the basics of Yabal.",[5],{"sidebar":12},true,{"type":14,"children":15,"toc":1380},"root",[16,24,30,37,42,47,60,81,100,133,139,144,149,303,310,322,353,377,438,444,455,479,485,490,514,519,690,696,714,719,725,730,741,767,777,812,824,857,863,868,873,900,905,951,956,1003,1009,1014,1048,1060,1072,1154,1172,1183,1226,1232,1247,1258,1374],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"basics-of-yabal",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This page will teach you the basics of Yabal.",{"type":17,"tag":31,"props":32,"children":34},"h2",{"id":33},"comments",[35],{"type":23,"value":36},"Comments",{"type":17,"tag":25,"props":38,"children":39},{},[40],{"type":23,"value":41},"Comments are used to add notes to your code. They are ignored by the compiler.",{"type":17,"tag":25,"props":43,"children":44},{},[45],{"type":23,"value":46},"There are two types of comments in Yabal: single-line comments and multi-line comments.",{"type":17,"tag":25,"props":48,"children":49},{},[50,52,58],{"type":23,"value":51},"Single-line comments start with ",{"type":17,"tag":53,"props":54,"children":55},"code",{"className":7},[56],{"type":23,"value":57},"//",{"type":23,"value":59}," and end at the end of the line:",{"type":17,"tag":61,"props":62,"children":66},"pre",{"className":63,"code":64,"language":65,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","// This is a single-line comment\n","yabal",[67],{"type":17,"tag":53,"props":68,"children":69},{"__ignoreMap":7},[70],{"type":17,"tag":71,"props":72,"children":75},"span",{"class":73,"line":74},"line",1,[76],{"type":17,"tag":71,"props":77,"children":79},{"style":78},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[80],{"type":23,"value":64},{"type":17,"tag":25,"props":82,"children":83},{},[84,86,91,93,98],{"type":23,"value":85},"Multi-line comments start with ",{"type":17,"tag":53,"props":87,"children":88},{"className":7},[89],{"type":23,"value":90},"/*",{"type":23,"value":92}," and end with ",{"type":17,"tag":53,"props":94,"children":95},{"className":7},[96],{"type":23,"value":97},"*/",{"type":23,"value":99},":",{"type":17,"tag":61,"props":101,"children":103},{"className":63,"code":102,"language":65,"meta":7,"style":7},"/*\nThis is a multi-line comment\n*/\n",[104],{"type":17,"tag":53,"props":105,"children":106},{"__ignoreMap":7},[107,115,124],{"type":17,"tag":71,"props":108,"children":109},{"class":73,"line":74},[110],{"type":17,"tag":71,"props":111,"children":112},{"style":78},[113],{"type":23,"value":114},"/*\n",{"type":17,"tag":71,"props":116,"children":118},{"class":73,"line":117},2,[119],{"type":17,"tag":71,"props":120,"children":121},{"style":78},[122],{"type":23,"value":123},"This is a multi-line comment\n",{"type":17,"tag":71,"props":125,"children":127},{"class":73,"line":126},3,[128],{"type":17,"tag":71,"props":129,"children":130},{"style":78},[131],{"type":23,"value":132},"*/\n",{"type":17,"tag":31,"props":134,"children":136},{"id":135},"types",[137],{"type":23,"value":138},"Types",{"type":17,"tag":25,"props":140,"children":141},{},[142],{"type":23,"value":143},"Yabal is a statically typed language. An statically typed language means that the type of a variable is known at compile time. This is in contrast to a dynamically typed language (like JavaScript), where the type of a variable is only known at runtime.",{"type":17,"tag":25,"props":145,"children":146},{},[147],{"type":23,"value":148},"Yabal has the following types:",{"type":17,"tag":150,"props":151,"children":152},"table",{},[153,172],{"type":17,"tag":154,"props":155,"children":156},"thead",{},[157],{"type":17,"tag":158,"props":159,"children":160},"tr",{},[161,167],{"type":17,"tag":162,"props":163,"children":164},"th",{},[165],{"type":23,"value":166},"Type",{"type":17,"tag":162,"props":168,"children":169},{},[170],{"type":23,"value":171},"Description",{"type":17,"tag":173,"props":174,"children":175},"tbody",{},[176,193,223,254,281],{"type":17,"tag":158,"props":177,"children":178},{},[179,188],{"type":17,"tag":180,"props":181,"children":182},"td",{},[183],{"type":17,"tag":53,"props":184,"children":185},{"className":7},[186],{"type":23,"value":187},"int",{"type":17,"tag":180,"props":189,"children":190},{},[191],{"type":23,"value":192},"A 16-bit unsigned integer",{"type":17,"tag":158,"props":194,"children":195},{},[196,204],{"type":17,"tag":180,"props":197,"children":198},{},[199],{"type":17,"tag":53,"props":200,"children":201},{"className":7},[202],{"type":23,"value":203},"bool",{"type":17,"tag":180,"props":205,"children":206},{},[207,209,214,216,221],{"type":23,"value":208},"A boolean value (",{"type":17,"tag":53,"props":210,"children":211},{"className":7},[212],{"type":23,"value":213},"true",{"type":23,"value":215}," or ",{"type":17,"tag":53,"props":217,"children":218},{"className":7},[219],{"type":23,"value":220},"false",{"type":23,"value":222},") stored as a 16-bit integer",{"type":17,"tag":158,"props":224,"children":225},{},[226,240],{"type":17,"tag":180,"props":227,"children":228},{},[229,235],{"type":17,"tag":230,"props":231,"children":232},"em",{},[233],{"type":23,"value":234},"type",{"type":17,"tag":53,"props":236,"children":237},{"className":7},[238],{"type":23,"value":239},"[]",{"type":17,"tag":180,"props":241,"children":242},{},[243,245,252],{"type":23,"value":244},"An ",{"type":17,"tag":246,"props":247,"children":249},"a",{"href":248},"#arrays",[250],{"type":23,"value":251},"array",{"type":23,"value":253}," of values of the specified type",{"type":17,"tag":158,"props":255,"children":256},{},[257,276],{"type":17,"tag":180,"props":258,"children":259},{},[260,262,267,269,274],{"type":23,"value":261},"func\u003C",{"type":17,"tag":230,"props":263,"children":264},{},[265],{"type":23,"value":266},"parameters",{"type":23,"value":268},", ",{"type":17,"tag":230,"props":270,"children":271},{},[272],{"type":23,"value":273},"return type",{"type":23,"value":275},">",{"type":17,"tag":180,"props":277,"children":278},{},[279],{"type":23,"value":280},"A function that takes the specified parameters and returns the specified type",{"type":17,"tag":158,"props":282,"children":283},{},[284,292],{"type":17,"tag":180,"props":285,"children":286},{},[287],{"type":17,"tag":230,"props":288,"children":289},{},[290],{"type":23,"value":291},"UserDefined",{"type":17,"tag":180,"props":293,"children":294},{},[295,297],{"type":23,"value":296},"An user-defined ",{"type":17,"tag":246,"props":298,"children":300},{"href":299},"#structs",[301],{"type":23,"value":302},"struct",{"type":17,"tag":304,"props":305,"children":307},"h3",{"id":306},"structs",[308],{"type":23,"value":309},"Structs",{"type":17,"tag":25,"props":311,"children":312},{},[313,315,320],{"type":23,"value":314},"A struct is a user-defined type. It contains a number of fields, which can be of any ",{"type":17,"tag":246,"props":316,"children":318},{"href":317},"#types",[319],{"type":23,"value":234},{"type":23,"value":321},".",{"type":17,"tag":25,"props":323,"children":324},{},[325,327,331,333,338,340,345,347,351],{"type":23,"value":326},"Structs are declared using the ",{"type":17,"tag":53,"props":328,"children":329},{"className":7},[330],{"type":23,"value":302},{"type":23,"value":332}," keyword, followed by the name of the struct, and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":334,"children":335},{"className":7},[336],{"type":23,"value":337},"{",{"type":23,"value":339}," and ",{"type":17,"tag":53,"props":341,"children":342},{"className":7},[343],{"type":23,"value":344},"}",{"type":23,"value":346},").\nWithin the block of code, you can declare fields by specifying the ",{"type":17,"tag":246,"props":348,"children":349},{"href":317},[350],{"type":23,"value":234},{"type":23,"value":352}," and name of the field.",{"type":17,"tag":25,"props":354,"children":355},{},[356,358,363,365,370,371,376],{"type":23,"value":357},"For example, we declare a struct called ",{"type":17,"tag":53,"props":359,"children":360},{"className":7},[361],{"type":23,"value":362},"Position",{"type":23,"value":364}," with two fields, ",{"type":17,"tag":53,"props":366,"children":367},{"className":7},[368],{"type":23,"value":369},"x",{"type":23,"value":339},{"type":17,"tag":53,"props":372,"children":373},{"className":7},[374],{"type":23,"value":375},"y",{"type":23,"value":99},{"type":17,"tag":61,"props":378,"children":380},{"className":63,"code":379,"language":65,"meta":7,"style":7},"struct Position {\n    int x\n    int y\n}\n",[381],{"type":17,"tag":53,"props":382,"children":383},{"__ignoreMap":7},[384,404,417,429],{"type":17,"tag":71,"props":385,"children":386},{"class":73,"line":74},[387,392,398],{"type":17,"tag":71,"props":388,"children":390},{"style":389},"--shiki-default:#D73A49;--shiki-dark:#F97583",[391],{"type":23,"value":302},{"type":17,"tag":71,"props":393,"children":395},{"style":394},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[396],{"type":23,"value":397}," Position",{"type":17,"tag":71,"props":399,"children":401},{"style":400},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[402],{"type":23,"value":403}," {\n",{"type":17,"tag":71,"props":405,"children":406},{"class":73,"line":117},[407,412],{"type":17,"tag":71,"props":408,"children":409},{"style":389},[410],{"type":23,"value":411},"    int",{"type":17,"tag":71,"props":413,"children":414},{"style":400},[415],{"type":23,"value":416}," x\n",{"type":17,"tag":71,"props":418,"children":419},{"class":73,"line":126},[420,424],{"type":17,"tag":71,"props":421,"children":422},{"style":389},[423],{"type":23,"value":411},{"type":17,"tag":71,"props":425,"children":426},{"style":400},[427],{"type":23,"value":428}," y\n",{"type":17,"tag":71,"props":430,"children":432},{"class":73,"line":431},4,[433],{"type":17,"tag":71,"props":434,"children":435},{"style":400},[436],{"type":23,"value":437},"}\n",{"type":17,"tag":304,"props":439,"children":441},{"id":440},"arrays",[442],{"type":23,"value":443},"Arrays",{"type":17,"tag":25,"props":445,"children":446},{},[447,449,453],{"type":23,"value":448},"An array is a collection of values of the same type. Arrays are declared using the ",{"type":17,"tag":53,"props":450,"children":451},{"className":7},[452],{"type":23,"value":239},{"type":23,"value":454}," operator:",{"type":17,"tag":61,"props":456,"children":458},{"className":63,"code":457,"language":65,"meta":7,"style":7},"int[] numbers // An array of integers\n",[459],{"type":17,"tag":53,"props":460,"children":461},{"__ignoreMap":7},[462],{"type":17,"tag":71,"props":463,"children":464},{"class":73,"line":74},[465,469,474],{"type":17,"tag":71,"props":466,"children":467},{"style":389},[468],{"type":23,"value":187},{"type":17,"tag":71,"props":470,"children":471},{"style":400},[472],{"type":23,"value":473},"[] numbers ",{"type":17,"tag":71,"props":475,"children":476},{"style":78},[477],{"type":23,"value":478},"// An array of integers\n",{"type":17,"tag":31,"props":480,"children":482},{"id":481},"statements",[483],{"type":23,"value":484},"Statements",{"type":17,"tag":25,"props":486,"children":487},{},[488],{"type":23,"value":489},"The actual code in a Yabal program is made up of statements. Common statements are variable declarations, declaring functions, calling functions and control flow statements.",{"type":17,"tag":25,"props":491,"children":492},{},[493,495,501,503,507,508,512],{"type":23,"value":494},"A statement can be a single line of code that ends with a new-line or ",{"type":17,"tag":246,"props":496,"children":498},{"href":497},"#semi-colons",[499],{"type":23,"value":500},"semi-colon",{"type":23,"value":502},". A statement can also be multiple lines of code surrounded by curly braces (",{"type":17,"tag":53,"props":504,"children":505},{"className":7},[506],{"type":23,"value":337},{"type":23,"value":339},{"type":17,"tag":53,"props":509,"children":510},{"className":7},[511],{"type":23,"value":344},{"type":23,"value":513},").",{"type":17,"tag":25,"props":515,"children":516},{},[517],{"type":23,"value":518},"The following code shows an example of a block of code:",{"type":17,"tag":61,"props":520,"children":523},{"className":63,"code":521,"filename":522,"language":65,"meta":7,"style":7},"// Variable declaration statement\nint variable\n\n// Assignment statement\nvariable = 0\n\n// If statement that contains multiple statements\nif (variable == 0) {\n    // Assignment statement\n    variable = 1\n\n    // Expression statement (postfix increment)\n    variable++\n}\n","run",[524],{"type":17,"tag":53,"props":525,"children":526},{"__ignoreMap":7},[527,535,547,555,563,583,591,600,624,633,651,659,668,682],{"type":17,"tag":71,"props":528,"children":529},{"class":73,"line":74},[530],{"type":17,"tag":71,"props":531,"children":532},{"style":78},[533],{"type":23,"value":534},"// Variable declaration statement\n",{"type":17,"tag":71,"props":536,"children":537},{"class":73,"line":117},[538,542],{"type":17,"tag":71,"props":539,"children":540},{"style":389},[541],{"type":23,"value":187},{"type":17,"tag":71,"props":543,"children":544},{"style":400},[545],{"type":23,"value":546}," variable\n",{"type":17,"tag":71,"props":548,"children":549},{"class":73,"line":126},[550],{"type":17,"tag":71,"props":551,"children":552},{"emptyLinePlaceholder":12},[553],{"type":23,"value":554},"\n",{"type":17,"tag":71,"props":556,"children":557},{"class":73,"line":431},[558],{"type":17,"tag":71,"props":559,"children":560},{"style":78},[561],{"type":23,"value":562},"// Assignment statement\n",{"type":17,"tag":71,"props":564,"children":566},{"class":73,"line":565},5,[567,572,577],{"type":17,"tag":71,"props":568,"children":569},{"style":400},[570],{"type":23,"value":571},"variable ",{"type":17,"tag":71,"props":573,"children":574},{"style":389},[575],{"type":23,"value":576},"=",{"type":17,"tag":71,"props":578,"children":580},{"style":579},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[581],{"type":23,"value":582}," 0\n",{"type":17,"tag":71,"props":584,"children":586},{"class":73,"line":585},6,[587],{"type":17,"tag":71,"props":588,"children":589},{"emptyLinePlaceholder":12},[590],{"type":23,"value":554},{"type":17,"tag":71,"props":592,"children":594},{"class":73,"line":593},7,[595],{"type":17,"tag":71,"props":596,"children":597},{"style":78},[598],{"type":23,"value":599},"// If statement that contains multiple statements\n",{"type":17,"tag":71,"props":601,"children":603},{"class":73,"line":602},8,[604,609,614,619],{"type":17,"tag":71,"props":605,"children":606},{"style":389},[607],{"type":23,"value":608},"if",{"type":17,"tag":71,"props":610,"children":611},{"style":400},[612],{"type":23,"value":613}," (variable == ",{"type":17,"tag":71,"props":615,"children":616},{"style":579},[617],{"type":23,"value":618},"0",{"type":17,"tag":71,"props":620,"children":621},{"style":400},[622],{"type":23,"value":623},") {\n",{"type":17,"tag":71,"props":625,"children":627},{"class":73,"line":626},9,[628],{"type":17,"tag":71,"props":629,"children":630},{"style":78},[631],{"type":23,"value":632},"    // Assignment statement\n",{"type":17,"tag":71,"props":634,"children":636},{"class":73,"line":635},10,[637,642,646],{"type":17,"tag":71,"props":638,"children":639},{"style":400},[640],{"type":23,"value":641},"    variable ",{"type":17,"tag":71,"props":643,"children":644},{"style":389},[645],{"type":23,"value":576},{"type":17,"tag":71,"props":647,"children":648},{"style":579},[649],{"type":23,"value":650}," 1\n",{"type":17,"tag":71,"props":652,"children":654},{"class":73,"line":653},11,[655],{"type":17,"tag":71,"props":656,"children":657},{"emptyLinePlaceholder":12},[658],{"type":23,"value":554},{"type":17,"tag":71,"props":660,"children":662},{"class":73,"line":661},12,[663],{"type":17,"tag":71,"props":664,"children":665},{"style":78},[666],{"type":23,"value":667},"    // Expression statement (postfix increment)\n",{"type":17,"tag":71,"props":669,"children":671},{"class":73,"line":670},13,[672,677],{"type":17,"tag":71,"props":673,"children":674},{"style":400},[675],{"type":23,"value":676},"    variable",{"type":17,"tag":71,"props":678,"children":679},{"style":389},[680],{"type":23,"value":681},"++\n",{"type":17,"tag":71,"props":683,"children":685},{"class":73,"line":684},14,[686],{"type":17,"tag":71,"props":687,"children":688},{"style":400},[689],{"type":23,"value":437},{"type":17,"tag":31,"props":691,"children":693},{"id":692},"expressions",[694],{"type":23,"value":695},"Expressions",{"type":17,"tag":25,"props":697,"children":698},{},[699,701,706,708,713],{"type":23,"value":700},"An expression is a statement that evaluates to a value. For example, ",{"type":17,"tag":53,"props":702,"children":703},{"className":7},[704],{"type":23,"value":705},"1 + 2",{"type":23,"value":707}," is an expression that evaluates to ",{"type":17,"tag":53,"props":709,"children":710},{"className":7},[711],{"type":23,"value":712},"3",{"type":23,"value":321},{"type":17,"tag":25,"props":715,"children":716},{},[717],{"type":23,"value":718},"Expressions can be used in many places, such as in assignment statements, function calls, and control flow statements.",{"type":17,"tag":31,"props":720,"children":722},{"id":721},"variables",[723],{"type":23,"value":724},"Variables",{"type":17,"tag":25,"props":726,"children":727},{},[728],{"type":23,"value":729},"Variables are used to store values in memory.",{"type":17,"tag":25,"props":731,"children":732},{},[733,735,739],{"type":23,"value":734},"You can declare variable specifying the ",{"type":17,"tag":246,"props":736,"children":737},{"href":317},[738],{"type":23,"value":234},{"type":23,"value":740}," and name of the variable:",{"type":17,"tag":61,"props":742,"children":744},{"className":63,"code":743,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\"\nint variable\n",[745],{"type":17,"tag":53,"props":746,"children":747},{"__ignoreMap":7},[748,756],{"type":17,"tag":71,"props":749,"children":750},{"class":73,"line":74},[751],{"type":17,"tag":71,"props":752,"children":753},{"style":78},[754],{"type":23,"value":755},"// Create an integer variable called \"variable\"\n",{"type":17,"tag":71,"props":757,"children":758},{"class":73,"line":117},[759,763],{"type":17,"tag":71,"props":760,"children":761},{"style":389},[762],{"type":23,"value":187},{"type":17,"tag":71,"props":764,"children":765},{"style":400},[766],{"type":23,"value":546},{"type":17,"tag":25,"props":768,"children":769},{},[770,772,776],{"type":23,"value":771},"You can also assign a value to a variable when declaring it by using the ",{"type":17,"tag":53,"props":773,"children":774},{"className":7},[775],{"type":23,"value":576},{"type":23,"value":454},{"type":17,"tag":61,"props":778,"children":780},{"className":63,"code":779,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nint variable = 1\n",[781],{"type":17,"tag":53,"props":782,"children":783},{"__ignoreMap":7},[784,792],{"type":17,"tag":71,"props":785,"children":786},{"class":73,"line":74},[787],{"type":17,"tag":71,"props":788,"children":789},{"style":78},[790],{"type":23,"value":791},"// Create an integer variable called \"variable\" and assign it the value 1\n",{"type":17,"tag":71,"props":793,"children":794},{"class":73,"line":117},[795,799,804,808],{"type":17,"tag":71,"props":796,"children":797},{"style":389},[798],{"type":23,"value":187},{"type":17,"tag":71,"props":800,"children":801},{"style":400},[802],{"type":23,"value":803}," variable ",{"type":17,"tag":71,"props":805,"children":806},{"style":389},[807],{"type":23,"value":576},{"type":17,"tag":71,"props":809,"children":810},{"style":579},[811],{"type":23,"value":650},{"type":17,"tag":25,"props":813,"children":814},{},[815,817,822],{"type":23,"value":816},"It is also possible to let the compiler infer the type of the variable. This is done by using the ",{"type":17,"tag":53,"props":818,"children":819},{"className":7},[820],{"type":23,"value":821},"var",{"type":23,"value":823}," keyword.\nThe compiler will look at the value that is assigned to the variable, and infer the type from that:",{"type":17,"tag":61,"props":825,"children":827},{"className":63,"code":826,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nvar variable = 1\n",[828],{"type":17,"tag":53,"props":829,"children":830},{"__ignoreMap":7},[831,838],{"type":17,"tag":71,"props":832,"children":833},{"class":73,"line":74},[834],{"type":17,"tag":71,"props":835,"children":836},{"style":78},[837],{"type":23,"value":791},{"type":17,"tag":71,"props":839,"children":840},{"class":73,"line":117},[841,845,849,853],{"type":17,"tag":71,"props":842,"children":843},{"style":389},[844],{"type":23,"value":821},{"type":17,"tag":71,"props":846,"children":847},{"style":400},[848],{"type":23,"value":803},{"type":17,"tag":71,"props":850,"children":851},{"style":389},[852],{"type":23,"value":576},{"type":17,"tag":71,"props":854,"children":855},{"style":579},[856],{"type":23,"value":650},{"type":17,"tag":31,"props":858,"children":860},{"id":859},"semi-colons",[861],{"type":23,"value":862},"Semi-colons",{"type":17,"tag":25,"props":864,"children":865},{},[866],{"type":23,"value":867},"Semi-colons can be used to separate statements. They are optional, but are required if you want to put multiple statements on the same line.",{"type":17,"tag":25,"props":869,"children":870},{},[871],{"type":23,"value":872},"For example, this is valid:",{"type":17,"tag":61,"props":874,"children":876},{"className":63,"code":875,"language":65,"meta":7,"style":7},"int a = 1\n",[877],{"type":17,"tag":53,"props":878,"children":879},{"__ignoreMap":7},[880],{"type":17,"tag":71,"props":881,"children":882},{"class":73,"line":74},[883,887,892,896],{"type":17,"tag":71,"props":884,"children":885},{"style":389},[886],{"type":23,"value":187},{"type":17,"tag":71,"props":888,"children":889},{"style":400},[890],{"type":23,"value":891}," a ",{"type":17,"tag":71,"props":893,"children":894},{"style":389},[895],{"type":23,"value":576},{"type":17,"tag":71,"props":897,"children":898},{"style":579},[899],{"type":23,"value":650},{"type":17,"tag":25,"props":901,"children":902},{},[903],{"type":23,"value":904},"But this is not, since there are multiple statements on the same line:",{"type":17,"tag":61,"props":906,"children":908},{"className":63,"code":907,"language":65,"meta":7,"style":7},"int a = 1 int b = 2\n",[909],{"type":17,"tag":53,"props":910,"children":911},{"__ignoreMap":7},[912],{"type":17,"tag":71,"props":913,"children":914},{"class":73,"line":74},[915,919,923,927,932,937,942,946],{"type":17,"tag":71,"props":916,"children":917},{"style":389},[918],{"type":23,"value":187},{"type":17,"tag":71,"props":920,"children":921},{"style":400},[922],{"type":23,"value":891},{"type":17,"tag":71,"props":924,"children":925},{"style":389},[926],{"type":23,"value":576},{"type":17,"tag":71,"props":928,"children":929},{"style":579},[930],{"type":23,"value":931}," 1",{"type":17,"tag":71,"props":933,"children":934},{"style":389},[935],{"type":23,"value":936}," int",{"type":17,"tag":71,"props":938,"children":939},{"style":400},[940],{"type":23,"value":941}," b ",{"type":17,"tag":71,"props":943,"children":944},{"style":389},[945],{"type":23,"value":576},{"type":17,"tag":71,"props":947,"children":948},{"style":579},[949],{"type":23,"value":950}," 2\n",{"type":17,"tag":25,"props":952,"children":953},{},[954],{"type":23,"value":955},"If you want to put multiple statements on the same line, you can use semi-colons to separate them:",{"type":17,"tag":61,"props":957,"children":959},{"className":63,"code":958,"language":65,"meta":7,"style":7},"int a = 1; int b = 2\n",[960],{"type":17,"tag":53,"props":961,"children":962},{"__ignoreMap":7},[963],{"type":17,"tag":71,"props":964,"children":965},{"class":73,"line":74},[966,970,974,978,982,987,991,995,999],{"type":17,"tag":71,"props":967,"children":968},{"style":389},[969],{"type":23,"value":187},{"type":17,"tag":71,"props":971,"children":972},{"style":400},[973],{"type":23,"value":891},{"type":17,"tag":71,"props":975,"children":976},{"style":389},[977],{"type":23,"value":576},{"type":17,"tag":71,"props":979,"children":980},{"style":579},[981],{"type":23,"value":931},{"type":17,"tag":71,"props":983,"children":984},{"style":400},[985],{"type":23,"value":986},"; ",{"type":17,"tag":71,"props":988,"children":989},{"style":389},[990],{"type":23,"value":187},{"type":17,"tag":71,"props":992,"children":993},{"style":400},[994],{"type":23,"value":941},{"type":17,"tag":71,"props":996,"children":997},{"style":389},[998],{"type":23,"value":576},{"type":17,"tag":71,"props":1000,"children":1001},{"style":579},[1002],{"type":23,"value":950},{"type":17,"tag":31,"props":1004,"children":1006},{"id":1005},"functions",[1007],{"type":23,"value":1008},"Functions",{"type":17,"tag":25,"props":1010,"children":1011},{},[1012],{"type":23,"value":1013},"Functions are used to reuse code. When you declare a function with code, you can call it from other places in your code.",{"type":17,"tag":25,"props":1015,"children":1016},{},[1017,1019,1023,1025,1030,1031,1036,1038,1042,1043,1047],{"type":23,"value":1018},"Functions are specified the return ",{"type":17,"tag":246,"props":1020,"children":1021},{"href":317},[1022],{"type":23,"value":234},{"type":23,"value":1024}," and name of the function, followed by the parameters of the function in parentheses (",{"type":17,"tag":53,"props":1026,"children":1027},{"className":7},[1028],{"type":23,"value":1029},"(",{"type":23,"value":339},{"type":17,"tag":53,"props":1032,"children":1033},{"className":7},[1034],{"type":23,"value":1035},")",{"type":23,"value":1037},"), and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":1039,"children":1040},{"className":7},[1041],{"type":23,"value":337},{"type":23,"value":339},{"type":17,"tag":53,"props":1044,"children":1045},{"className":7},[1046],{"type":23,"value":344},{"type":23,"value":513},{"type":17,"tag":25,"props":1049,"children":1050},{},[1051,1053,1058],{"type":23,"value":1052},"To return a value from a function, use the ",{"type":17,"tag":53,"props":1054,"children":1055},{"className":7},[1056],{"type":23,"value":1057},"return",{"type":23,"value":1059}," keyword followed by the value to return.",{"type":17,"tag":25,"props":1061,"children":1062},{},[1063,1065,1070],{"type":23,"value":1064},"For example, the following code declares a function called ",{"type":17,"tag":53,"props":1066,"children":1067},{"className":7},[1068],{"type":23,"value":1069},"add",{"type":23,"value":1071}," that takes two integers as parameters and returns an integer:",{"type":17,"tag":61,"props":1073,"children":1075},{"className":63,"code":1074,"language":65,"meta":7,"style":7},"// Declare the add function\n// The function takes two integers (a and b) as parameters and returns an integer\nint add(int a, int b) {\n    return a + b\n}\n",[1076],{"type":17,"tag":53,"props":1077,"children":1078},{"__ignoreMap":7},[1079,1087,1095,1125,1147],{"type":17,"tag":71,"props":1080,"children":1081},{"class":73,"line":74},[1082],{"type":17,"tag":71,"props":1083,"children":1084},{"style":78},[1085],{"type":23,"value":1086},"// Declare the add function\n",{"type":17,"tag":71,"props":1088,"children":1089},{"class":73,"line":117},[1090],{"type":17,"tag":71,"props":1091,"children":1092},{"style":78},[1093],{"type":23,"value":1094},"// The function takes two integers (a and b) as parameters and returns an integer\n",{"type":17,"tag":71,"props":1096,"children":1097},{"class":73,"line":126},[1098,1102,1107,1111,1116,1120],{"type":17,"tag":71,"props":1099,"children":1100},{"style":389},[1101],{"type":23,"value":187},{"type":17,"tag":71,"props":1103,"children":1104},{"style":400},[1105],{"type":23,"value":1106}," add(",{"type":17,"tag":71,"props":1108,"children":1109},{"style":389},[1110],{"type":23,"value":187},{"type":17,"tag":71,"props":1112,"children":1113},{"style":400},[1114],{"type":23,"value":1115}," a, ",{"type":17,"tag":71,"props":1117,"children":1118},{"style":389},[1119],{"type":23,"value":187},{"type":17,"tag":71,"props":1121,"children":1122},{"style":400},[1123],{"type":23,"value":1124}," b) {\n",{"type":17,"tag":71,"props":1126,"children":1127},{"class":73,"line":431},[1128,1133,1137,1142],{"type":17,"tag":71,"props":1129,"children":1130},{"style":389},[1131],{"type":23,"value":1132},"    return",{"type":17,"tag":71,"props":1134,"children":1135},{"style":400},[1136],{"type":23,"value":891},{"type":17,"tag":71,"props":1138,"children":1139},{"style":389},[1140],{"type":23,"value":1141},"+",{"type":17,"tag":71,"props":1143,"children":1144},{"style":400},[1145],{"type":23,"value":1146}," b\n",{"type":17,"tag":71,"props":1148,"children":1149},{"class":73,"line":565},[1150],{"type":17,"tag":71,"props":1151,"children":1152},{"style":400},[1153],{"type":23,"value":437},{"type":17,"tag":25,"props":1155,"children":1156},{},[1157,1159,1164,1166,1170],{"type":23,"value":1158},"Functions can also be declared without a return type by specifying ",{"type":17,"tag":53,"props":1160,"children":1161},{"className":7},[1162],{"type":23,"value":1163},"void",{"type":23,"value":1165}," as the return type. A function with a return type of ",{"type":17,"tag":53,"props":1167,"children":1168},{"className":7},[1169],{"type":23,"value":1163},{"type":23,"value":1171}," cannot return a value.",{"type":17,"tag":25,"props":1173,"children":1174},{},[1175,1176,1181],{"type":23,"value":1064},{"type":17,"tag":53,"props":1177,"children":1178},{"className":7},[1179],{"type":23,"value":1180},"print",{"type":23,"value":1182}," that takes a int array as a parameter and returns nothing:",{"type":17,"tag":61,"props":1184,"children":1186},{"className":63,"code":1185,"language":65,"meta":7,"style":7},"void print(int[] data) {\n    // Print the value to the screen\n}\n",[1187],{"type":17,"tag":53,"props":1188,"children":1189},{"__ignoreMap":7},[1190,1211,1219],{"type":17,"tag":71,"props":1191,"children":1192},{"class":73,"line":74},[1193,1197,1202,1206],{"type":17,"tag":71,"props":1194,"children":1195},{"style":389},[1196],{"type":23,"value":1163},{"type":17,"tag":71,"props":1198,"children":1199},{"style":400},[1200],{"type":23,"value":1201}," print(",{"type":17,"tag":71,"props":1203,"children":1204},{"style":389},[1205],{"type":23,"value":187},{"type":17,"tag":71,"props":1207,"children":1208},{"style":400},[1209],{"type":23,"value":1210},"[] data) {\n",{"type":17,"tag":71,"props":1212,"children":1213},{"class":73,"line":117},[1214],{"type":17,"tag":71,"props":1215,"children":1216},{"style":78},[1217],{"type":23,"value":1218},"    // Print the value to the screen\n",{"type":17,"tag":71,"props":1220,"children":1221},{"class":73,"line":126},[1222],{"type":17,"tag":71,"props":1223,"children":1224},{"style":400},[1225],{"type":23,"value":437},{"type":17,"tag":304,"props":1227,"children":1229},{"id":1228},"calling-functions",[1230],{"type":23,"value":1231},"Calling functions",{"type":17,"tag":25,"props":1233,"children":1234},{},[1235,1237,1241,1242,1246],{"type":23,"value":1236},"To call a function, use the name of the function followed by the arguments of the function in parentheses (",{"type":17,"tag":53,"props":1238,"children":1239},{"className":7},[1240],{"type":23,"value":1029},{"type":23,"value":339},{"type":17,"tag":53,"props":1243,"children":1244},{"className":7},[1245],{"type":23,"value":1035},{"type":23,"value":513},{"type":17,"tag":25,"props":1248,"children":1249},{},[1250,1252,1256],{"type":23,"value":1251},"For example, the following code calls the ",{"type":17,"tag":53,"props":1253,"children":1254},{"className":7},[1255],{"type":23,"value":1069},{"type":23,"value":1257}," function that we declared earlier:",{"type":17,"tag":61,"props":1259,"children":1262},{"className":63,"code":1260,"filename":522,"highlights":1261,"language":65,"meta":7,"style":7},"// Call the add function and store the result in the \"result\" variable\nint result = add(1, 2)\n\nint add(int a, int b) {\n    return a + b\n}\n",[117],[1263],{"type":17,"tag":53,"props":1264,"children":1265},{"__ignoreMap":7},[1266,1274,1314,1321,1348,1367],{"type":17,"tag":71,"props":1267,"children":1268},{"class":73,"line":74},[1269],{"type":17,"tag":71,"props":1270,"children":1271},{"style":78},[1272],{"type":23,"value":1273},"// Call the add function and store the result in the \"result\" variable\n",{"type":17,"tag":71,"props":1275,"children":1277},{"class":1276,"line":117},"line highlight",[1278,1282,1287,1291,1295,1300,1304,1309],{"type":17,"tag":71,"props":1279,"children":1280},{"style":389},[1281],{"type":23,"value":187},{"type":17,"tag":71,"props":1283,"children":1284},{"style":400},[1285],{"type":23,"value":1286}," result ",{"type":17,"tag":71,"props":1288,"children":1289},{"style":389},[1290],{"type":23,"value":576},{"type":17,"tag":71,"props":1292,"children":1293},{"style":400},[1294],{"type":23,"value":1106},{"type":17,"tag":71,"props":1296,"children":1297},{"style":579},[1298],{"type":23,"value":1299},"1",{"type":17,"tag":71,"props":1301,"children":1302},{"style":400},[1303],{"type":23,"value":268},{"type":17,"tag":71,"props":1305,"children":1306},{"style":579},[1307],{"type":23,"value":1308},"2",{"type":17,"tag":71,"props":1310,"children":1311},{"style":400},[1312],{"type":23,"value":1313},")\n",{"type":17,"tag":71,"props":1315,"children":1316},{"class":73,"line":126},[1317],{"type":17,"tag":71,"props":1318,"children":1319},{"emptyLinePlaceholder":12},[1320],{"type":23,"value":554},{"type":17,"tag":71,"props":1322,"children":1323},{"class":73,"line":431},[1324,1328,1332,1336,1340,1344],{"type":17,"tag":71,"props":1325,"children":1326},{"style":389},[1327],{"type":23,"value":187},{"type":17,"tag":71,"props":1329,"children":1330},{"style":400},[1331],{"type":23,"value":1106},{"type":17,"tag":71,"props":1333,"children":1334},{"style":389},[1335],{"type":23,"value":187},{"type":17,"tag":71,"props":1337,"children":1338},{"style":400},[1339],{"type":23,"value":1115},{"type":17,"tag":71,"props":1341,"children":1342},{"style":389},[1343],{"type":23,"value":187},{"type":17,"tag":71,"props":1345,"children":1346},{"style":400},[1347],{"type":23,"value":1124},{"type":17,"tag":71,"props":1349,"children":1350},{"class":73,"line":565},[1351,1355,1359,1363],{"type":17,"tag":71,"props":1352,"children":1353},{"style":389},[1354],{"type":23,"value":1132},{"type":17,"tag":71,"props":1356,"children":1357},{"style":400},[1358],{"type":23,"value":891},{"type":17,"tag":71,"props":1360,"children":1361},{"style":389},[1362],{"type":23,"value":1141},{"type":17,"tag":71,"props":1364,"children":1365},{"style":400},[1366],{"type":23,"value":1146},{"type":17,"tag":71,"props":1368,"children":1369},{"class":73,"line":585},[1370],{"type":17,"tag":71,"props":1371,"children":1372},{"style":400},[1373],{"type":23,"value":437},{"type":17,"tag":1375,"props":1376,"children":1377},"style",{},[1378],{"type":23,"value":1379},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":117,"depth":117,"links":1381},[1382,1383,1387,1388,1389,1390,1391],{"id":33,"depth":117,"text":36},{"id":135,"depth":117,"text":138,"children":1384},[1385,1386],{"id":306,"depth":126,"text":309},{"id":440,"depth":126,"text":443},{"id":481,"depth":117,"text":484},{"id":692,"depth":117,"text":695},{"id":721,"depth":117,"text":724},{"id":859,"depth":117,"text":862},{"id":1005,"depth":117,"text":1008,"children":1392},[1393],{"id":1228,"depth":126,"text":1231},"markdown","content:docs:2.get-started:3.basics-of-yabal.md","content","docs/2.get-started/3.basics-of-yabal.md","md",[1400],{"title":1401,"_path":1402,"children":1403,"root":12},"Documentation","/docs",[1404,1405,1417,1430,1438],{"title":1401,"_path":1402},{"title":1406,"_path":1407,"children":1408,"sidebar":6},"Getting started","/docs/get-started",[1409,1412,1415,1416],{"title":1410,"_path":1411,"sidebar":12},"Downloads","/docs/get-started/downloads",{"title":1413,"_path":1414,"sidebar":12},"Emulator","/docs/get-started/emulator",{"title":8,"_path":4,"sidebar":12},{"title":1406,"_path":1407,"sidebar":6},{"title":1418,"_path":1419,"children":1420,"sidebar":6},"Language reference","/docs/language-reference",[1421,1423,1426,1429],{"title":309,"_path":1422,"sidebar":12},"/docs/language-reference/structs",{"title":1424,"_path":1425,"sidebar":12},"Function pointers","/docs/language-reference/function-pointer",{"title":1427,"_path":1428,"sidebar":12},"Stack allocations","/docs/language-reference/stack-allocations",{"title":1418,"_path":1419,"sidebar":6},{"title":1431,"_path":1432,"children":1433,"sidebar":6},"Perhipherals","/docs/peripherals",[1434,1437],{"title":1435,"_path":1436,"sidebar":12},"Screen","/docs/peripherals/screen",{"title":1431,"_path":1432,"sidebar":6},{"title":1439,"_path":1440,"children":1441,"sidebar":6},"Advanced topics","/docs/advanced-topics",[1442,1445,1448],{"title":1443,"_path":1444,"sidebar":12},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":1446,"_path":1447,"sidebar":12},"Optimizing","/docs/advanced-topics/optimizing",{"title":1439,"_path":1440,"sidebar":6},1702088644831]