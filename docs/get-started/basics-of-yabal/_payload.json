[{"data":1,"prerenderedAt":1346},["Reactive",2],{"content-query-niMQgmLNTb":3,"content-navigation-8C37fagqQL":1310},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":11,"body":13,"_type":1305,"_id":1306,"_source":1307,"_file":1308,"_extension":1309},"/docs/get-started/basics-of-yabal","get-started",false,"","Basics of Yabal","Learn about the basics of Yabal.",[5],{"sidebar":12},true,{"type":14,"children":15,"toc":1291},"root",[16,24,30,37,42,47,60,81,100,133,139,144,149,276,283,295,326,350,411,417,428,452,458,463,487,492,662,668,686,691,697,702,713,739,749,784,796,829,835,840,845,872,877,923,928,975,981,986,1020,1032,1044,1126,1144,1155,1198,1204,1219,1230,1285],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"basics-of-yabal",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This page will teach you the basics of Yabal.",{"type":17,"tag":31,"props":32,"children":34},"h2",{"id":33},"comments",[35],{"type":23,"value":36},"Comments",{"type":17,"tag":25,"props":38,"children":39},{},[40],{"type":23,"value":41},"Comments are used to add notes to your code. They are ignored by the compiler.",{"type":17,"tag":25,"props":43,"children":44},{},[45],{"type":23,"value":46},"There are two types of comments in Yabal: single-line comments and multi-line comments.",{"type":17,"tag":25,"props":48,"children":49},{},[50,52,58],{"type":23,"value":51},"Single-line comments start with ",{"type":17,"tag":53,"props":54,"children":55},"code",{"className":7},[56],{"type":23,"value":57},"//",{"type":23,"value":59}," and end at the end of the line:",{"type":17,"tag":61,"props":62,"children":66},"pre",{"className":63,"code":64,"language":65,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","// This is a single-line comment\n","yabal",[67],{"type":17,"tag":53,"props":68,"children":69},{"__ignoreMap":7},[70],{"type":17,"tag":71,"props":72,"children":75},"span",{"class":73,"line":74},"line",1,[76],{"type":17,"tag":71,"props":77,"children":79},{"style":78},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[80],{"type":23,"value":64},{"type":17,"tag":25,"props":82,"children":83},{},[84,86,91,93,98],{"type":23,"value":85},"Multi-line comments start with ",{"type":17,"tag":53,"props":87,"children":88},{"className":7},[89],{"type":23,"value":90},"/*",{"type":23,"value":92}," and end with ",{"type":17,"tag":53,"props":94,"children":95},{"className":7},[96],{"type":23,"value":97},"*/",{"type":23,"value":99},":",{"type":17,"tag":61,"props":101,"children":103},{"className":63,"code":102,"language":65,"meta":7,"style":7},"/*\nThis is a multi-line comment\n*/\n",[104],{"type":17,"tag":53,"props":105,"children":106},{"__ignoreMap":7},[107,115,124],{"type":17,"tag":71,"props":108,"children":109},{"class":73,"line":74},[110],{"type":17,"tag":71,"props":111,"children":112},{"style":78},[113],{"type":23,"value":114},"/*\n",{"type":17,"tag":71,"props":116,"children":118},{"class":73,"line":117},2,[119],{"type":17,"tag":71,"props":120,"children":121},{"style":78},[122],{"type":23,"value":123},"This is a multi-line comment\n",{"type":17,"tag":71,"props":125,"children":127},{"class":73,"line":126},3,[128],{"type":17,"tag":71,"props":129,"children":130},{"style":78},[131],{"type":23,"value":132},"*/\n",{"type":17,"tag":31,"props":134,"children":136},{"id":135},"types",[137],{"type":23,"value":138},"Types",{"type":17,"tag":25,"props":140,"children":141},{},[142],{"type":23,"value":143},"Yabal is a statically typed language. An statically typed language means that the type of a variable is known at compile time. This is in contrast to a dynamically typed language (like JavaScript), where the type of a variable is only known at runtime.",{"type":17,"tag":25,"props":145,"children":146},{},[147],{"type":23,"value":148},"Yabal has the following types:",{"type":17,"tag":150,"props":151,"children":152},"table",{},[153,172],{"type":17,"tag":154,"props":155,"children":156},"thead",{},[157],{"type":17,"tag":158,"props":159,"children":160},"tr",{},[161,167],{"type":17,"tag":162,"props":163,"children":164},"th",{},[165],{"type":23,"value":166},"Type",{"type":17,"tag":162,"props":168,"children":169},{},[170],{"type":23,"value":171},"Description",{"type":17,"tag":173,"props":174,"children":175},"tbody",{},[176,193,223,254],{"type":17,"tag":158,"props":177,"children":178},{},[179,188],{"type":17,"tag":180,"props":181,"children":182},"td",{},[183],{"type":17,"tag":53,"props":184,"children":185},{"className":7},[186],{"type":23,"value":187},"int",{"type":17,"tag":180,"props":189,"children":190},{},[191],{"type":23,"value":192},"A 16-bit unsigned integer",{"type":17,"tag":158,"props":194,"children":195},{},[196,204],{"type":17,"tag":180,"props":197,"children":198},{},[199],{"type":17,"tag":53,"props":200,"children":201},{"className":7},[202],{"type":23,"value":203},"bool",{"type":17,"tag":180,"props":205,"children":206},{},[207,209,214,216,221],{"type":23,"value":208},"A boolean value (",{"type":17,"tag":53,"props":210,"children":211},{"className":7},[212],{"type":23,"value":213},"true",{"type":23,"value":215}," or ",{"type":17,"tag":53,"props":217,"children":218},{"className":7},[219],{"type":23,"value":220},"false",{"type":23,"value":222},") stored as a 16-bit integer",{"type":17,"tag":158,"props":224,"children":225},{},[226,240],{"type":17,"tag":180,"props":227,"children":228},{},[229,235],{"type":17,"tag":230,"props":231,"children":232},"em",{},[233],{"type":23,"value":234},"type",{"type":17,"tag":53,"props":236,"children":237},{"className":7},[238],{"type":23,"value":239},"[]",{"type":17,"tag":180,"props":241,"children":242},{},[243,245,252],{"type":23,"value":244},"An ",{"type":17,"tag":246,"props":247,"children":249},"a",{"href":248},"#arrays",[250],{"type":23,"value":251},"array",{"type":23,"value":253}," of values of the specified type",{"type":17,"tag":158,"props":255,"children":256},{},[257,265],{"type":17,"tag":180,"props":258,"children":259},{},[260],{"type":17,"tag":230,"props":261,"children":262},{},[263],{"type":23,"value":264},"UserDefined",{"type":17,"tag":180,"props":266,"children":267},{},[268,270],{"type":23,"value":269},"An user-defined ",{"type":17,"tag":246,"props":271,"children":273},{"href":272},"#structs",[274],{"type":23,"value":275},"struct",{"type":17,"tag":277,"props":278,"children":280},"h3",{"id":279},"structs",[281],{"type":23,"value":282},"Structs",{"type":17,"tag":25,"props":284,"children":285},{},[286,288,293],{"type":23,"value":287},"A struct is a user-defined type. It contains a number of fields, which can be of any ",{"type":17,"tag":246,"props":289,"children":291},{"href":290},"#types",[292],{"type":23,"value":234},{"type":23,"value":294},".",{"type":17,"tag":25,"props":296,"children":297},{},[298,300,304,306,311,313,318,320,324],{"type":23,"value":299},"Structs are declared using the ",{"type":17,"tag":53,"props":301,"children":302},{"className":7},[303],{"type":23,"value":275},{"type":23,"value":305}," keyword, followed by the name of the struct, and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":307,"children":308},{"className":7},[309],{"type":23,"value":310},"{",{"type":23,"value":312}," and ",{"type":17,"tag":53,"props":314,"children":315},{"className":7},[316],{"type":23,"value":317},"}",{"type":23,"value":319},").\nWithin the block of code, you can declare fields by specifying the ",{"type":17,"tag":246,"props":321,"children":322},{"href":290},[323],{"type":23,"value":234},{"type":23,"value":325}," and name of the field.",{"type":17,"tag":25,"props":327,"children":328},{},[329,331,336,338,343,344,349],{"type":23,"value":330},"For example, we declare a struct called ",{"type":17,"tag":53,"props":332,"children":333},{"className":7},[334],{"type":23,"value":335},"Position",{"type":23,"value":337}," with two fields, ",{"type":17,"tag":53,"props":339,"children":340},{"className":7},[341],{"type":23,"value":342},"x",{"type":23,"value":312},{"type":17,"tag":53,"props":345,"children":346},{"className":7},[347],{"type":23,"value":348},"y",{"type":23,"value":99},{"type":17,"tag":61,"props":351,"children":353},{"className":63,"code":352,"language":65,"meta":7,"style":7},"struct Position {\n    int x\n    int y\n}\n",[354],{"type":17,"tag":53,"props":355,"children":356},{"__ignoreMap":7},[357,377,390,402],{"type":17,"tag":71,"props":358,"children":359},{"class":73,"line":74},[360,365,371],{"type":17,"tag":71,"props":361,"children":363},{"style":362},"--shiki-default:#D73A49;--shiki-dark:#F97583",[364],{"type":23,"value":275},{"type":17,"tag":71,"props":366,"children":368},{"style":367},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[369],{"type":23,"value":370}," Position",{"type":17,"tag":71,"props":372,"children":374},{"style":373},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[375],{"type":23,"value":376}," {\n",{"type":17,"tag":71,"props":378,"children":379},{"class":73,"line":117},[380,385],{"type":17,"tag":71,"props":381,"children":382},{"style":362},[383],{"type":23,"value":384},"    int",{"type":17,"tag":71,"props":386,"children":387},{"style":373},[388],{"type":23,"value":389}," x\n",{"type":17,"tag":71,"props":391,"children":392},{"class":73,"line":126},[393,397],{"type":17,"tag":71,"props":394,"children":395},{"style":362},[396],{"type":23,"value":384},{"type":17,"tag":71,"props":398,"children":399},{"style":373},[400],{"type":23,"value":401}," y\n",{"type":17,"tag":71,"props":403,"children":405},{"class":73,"line":404},4,[406],{"type":17,"tag":71,"props":407,"children":408},{"style":373},[409],{"type":23,"value":410},"}\n",{"type":17,"tag":277,"props":412,"children":414},{"id":413},"arrays",[415],{"type":23,"value":416},"Arrays",{"type":17,"tag":25,"props":418,"children":419},{},[420,422,426],{"type":23,"value":421},"An array is a collection of values of the same type. Arrays are declared using the ",{"type":17,"tag":53,"props":423,"children":424},{"className":7},[425],{"type":23,"value":239},{"type":23,"value":427}," operator:",{"type":17,"tag":61,"props":429,"children":431},{"className":63,"code":430,"language":65,"meta":7,"style":7},"int[] numbers // An array of integers\n",[432],{"type":17,"tag":53,"props":433,"children":434},{"__ignoreMap":7},[435],{"type":17,"tag":71,"props":436,"children":437},{"class":73,"line":74},[438,442,447],{"type":17,"tag":71,"props":439,"children":440},{"style":362},[441],{"type":23,"value":187},{"type":17,"tag":71,"props":443,"children":444},{"style":373},[445],{"type":23,"value":446},"[] numbers ",{"type":17,"tag":71,"props":448,"children":449},{"style":78},[450],{"type":23,"value":451},"// An array of integers\n",{"type":17,"tag":31,"props":453,"children":455},{"id":454},"statements",[456],{"type":23,"value":457},"Statements",{"type":17,"tag":25,"props":459,"children":460},{},[461],{"type":23,"value":462},"The actual code in a Yabal program is made up of statements. Common statements are variable declarations, declaring functions, calling functions and control flow statements.",{"type":17,"tag":25,"props":464,"children":465},{},[466,468,474,476,480,481,485],{"type":23,"value":467},"A statement can be a single line of code that ends with a new-line or ",{"type":17,"tag":246,"props":469,"children":471},{"href":470},"#semi-colons",[472],{"type":23,"value":473},"semi-colon",{"type":23,"value":475},". A statement can also be multiple lines of code surrounded by curly braces (",{"type":17,"tag":53,"props":477,"children":478},{"className":7},[479],{"type":23,"value":310},{"type":23,"value":312},{"type":17,"tag":53,"props":482,"children":483},{"className":7},[484],{"type":23,"value":317},{"type":23,"value":486},").",{"type":17,"tag":25,"props":488,"children":489},{},[490],{"type":23,"value":491},"The following code shows an example of a block of code:",{"type":17,"tag":61,"props":493,"children":495},{"className":63,"code":494,"language":65,"meta":7,"style":7},"// Variable declaration statement\nint variable\n\n// Assignment statement\nvariable = 0\n\n// If statement that contains multiple statements\nif (variable == 0) {\n    // Assignment statement\n    variable = 1\n\n    // Expression statement (postfix increment)\n    variable++\n}\n",[496],{"type":17,"tag":53,"props":497,"children":498},{"__ignoreMap":7},[499,507,519,527,535,555,563,572,596,605,623,631,640,654],{"type":17,"tag":71,"props":500,"children":501},{"class":73,"line":74},[502],{"type":17,"tag":71,"props":503,"children":504},{"style":78},[505],{"type":23,"value":506},"// Variable declaration statement\n",{"type":17,"tag":71,"props":508,"children":509},{"class":73,"line":117},[510,514],{"type":17,"tag":71,"props":511,"children":512},{"style":362},[513],{"type":23,"value":187},{"type":17,"tag":71,"props":515,"children":516},{"style":373},[517],{"type":23,"value":518}," variable\n",{"type":17,"tag":71,"props":520,"children":521},{"class":73,"line":126},[522],{"type":17,"tag":71,"props":523,"children":524},{"emptyLinePlaceholder":12},[525],{"type":23,"value":526},"\n",{"type":17,"tag":71,"props":528,"children":529},{"class":73,"line":404},[530],{"type":17,"tag":71,"props":531,"children":532},{"style":78},[533],{"type":23,"value":534},"// Assignment statement\n",{"type":17,"tag":71,"props":536,"children":538},{"class":73,"line":537},5,[539,544,549],{"type":17,"tag":71,"props":540,"children":541},{"style":373},[542],{"type":23,"value":543},"variable ",{"type":17,"tag":71,"props":545,"children":546},{"style":362},[547],{"type":23,"value":548},"=",{"type":17,"tag":71,"props":550,"children":552},{"style":551},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[553],{"type":23,"value":554}," 0\n",{"type":17,"tag":71,"props":556,"children":558},{"class":73,"line":557},6,[559],{"type":17,"tag":71,"props":560,"children":561},{"emptyLinePlaceholder":12},[562],{"type":23,"value":526},{"type":17,"tag":71,"props":564,"children":566},{"class":73,"line":565},7,[567],{"type":17,"tag":71,"props":568,"children":569},{"style":78},[570],{"type":23,"value":571},"// If statement that contains multiple statements\n",{"type":17,"tag":71,"props":573,"children":575},{"class":73,"line":574},8,[576,581,586,591],{"type":17,"tag":71,"props":577,"children":578},{"style":362},[579],{"type":23,"value":580},"if",{"type":17,"tag":71,"props":582,"children":583},{"style":373},[584],{"type":23,"value":585}," (variable == ",{"type":17,"tag":71,"props":587,"children":588},{"style":551},[589],{"type":23,"value":590},"0",{"type":17,"tag":71,"props":592,"children":593},{"style":373},[594],{"type":23,"value":595},") {\n",{"type":17,"tag":71,"props":597,"children":599},{"class":73,"line":598},9,[600],{"type":17,"tag":71,"props":601,"children":602},{"style":78},[603],{"type":23,"value":604},"    // Assignment statement\n",{"type":17,"tag":71,"props":606,"children":608},{"class":73,"line":607},10,[609,614,618],{"type":17,"tag":71,"props":610,"children":611},{"style":373},[612],{"type":23,"value":613},"    variable ",{"type":17,"tag":71,"props":615,"children":616},{"style":362},[617],{"type":23,"value":548},{"type":17,"tag":71,"props":619,"children":620},{"style":551},[621],{"type":23,"value":622}," 1\n",{"type":17,"tag":71,"props":624,"children":626},{"class":73,"line":625},11,[627],{"type":17,"tag":71,"props":628,"children":629},{"emptyLinePlaceholder":12},[630],{"type":23,"value":526},{"type":17,"tag":71,"props":632,"children":634},{"class":73,"line":633},12,[635],{"type":17,"tag":71,"props":636,"children":637},{"style":78},[638],{"type":23,"value":639},"    // Expression statement (postfix increment)\n",{"type":17,"tag":71,"props":641,"children":643},{"class":73,"line":642},13,[644,649],{"type":17,"tag":71,"props":645,"children":646},{"style":373},[647],{"type":23,"value":648},"    variable",{"type":17,"tag":71,"props":650,"children":651},{"style":362},[652],{"type":23,"value":653},"++\n",{"type":17,"tag":71,"props":655,"children":657},{"class":73,"line":656},14,[658],{"type":17,"tag":71,"props":659,"children":660},{"style":373},[661],{"type":23,"value":410},{"type":17,"tag":31,"props":663,"children":665},{"id":664},"expressions",[666],{"type":23,"value":667},"Expressions",{"type":17,"tag":25,"props":669,"children":670},{},[671,673,678,680,685],{"type":23,"value":672},"An expression is a statement that evaluates to a value. For example, ",{"type":17,"tag":53,"props":674,"children":675},{"className":7},[676],{"type":23,"value":677},"1 + 2",{"type":23,"value":679}," is an expression that evaluates to ",{"type":17,"tag":53,"props":681,"children":682},{"className":7},[683],{"type":23,"value":684},"3",{"type":23,"value":294},{"type":17,"tag":25,"props":687,"children":688},{},[689],{"type":23,"value":690},"Expressions can be used in many places, such as in assignment statements, function calls, and control flow statements.",{"type":17,"tag":31,"props":692,"children":694},{"id":693},"variables",[695],{"type":23,"value":696},"Variables",{"type":17,"tag":25,"props":698,"children":699},{},[700],{"type":23,"value":701},"Variables are used to store values in memory.",{"type":17,"tag":25,"props":703,"children":704},{},[705,707,711],{"type":23,"value":706},"You can declare variable specifying the ",{"type":17,"tag":246,"props":708,"children":709},{"href":290},[710],{"type":23,"value":234},{"type":23,"value":712}," and name of the variable:",{"type":17,"tag":61,"props":714,"children":716},{"className":63,"code":715,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\"\nint variable\n",[717],{"type":17,"tag":53,"props":718,"children":719},{"__ignoreMap":7},[720,728],{"type":17,"tag":71,"props":721,"children":722},{"class":73,"line":74},[723],{"type":17,"tag":71,"props":724,"children":725},{"style":78},[726],{"type":23,"value":727},"// Create an integer variable called \"variable\"\n",{"type":17,"tag":71,"props":729,"children":730},{"class":73,"line":117},[731,735],{"type":17,"tag":71,"props":732,"children":733},{"style":362},[734],{"type":23,"value":187},{"type":17,"tag":71,"props":736,"children":737},{"style":373},[738],{"type":23,"value":518},{"type":17,"tag":25,"props":740,"children":741},{},[742,744,748],{"type":23,"value":743},"You can also assign a value to a variable when declaring it by using the ",{"type":17,"tag":53,"props":745,"children":746},{"className":7},[747],{"type":23,"value":548},{"type":23,"value":427},{"type":17,"tag":61,"props":750,"children":752},{"className":63,"code":751,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nint variable = 1\n",[753],{"type":17,"tag":53,"props":754,"children":755},{"__ignoreMap":7},[756,764],{"type":17,"tag":71,"props":757,"children":758},{"class":73,"line":74},[759],{"type":17,"tag":71,"props":760,"children":761},{"style":78},[762],{"type":23,"value":763},"// Create an integer variable called \"variable\" and assign it the value 1\n",{"type":17,"tag":71,"props":765,"children":766},{"class":73,"line":117},[767,771,776,780],{"type":17,"tag":71,"props":768,"children":769},{"style":362},[770],{"type":23,"value":187},{"type":17,"tag":71,"props":772,"children":773},{"style":373},[774],{"type":23,"value":775}," variable ",{"type":17,"tag":71,"props":777,"children":778},{"style":362},[779],{"type":23,"value":548},{"type":17,"tag":71,"props":781,"children":782},{"style":551},[783],{"type":23,"value":622},{"type":17,"tag":25,"props":785,"children":786},{},[787,789,794],{"type":23,"value":788},"It is also possible to let the compiler infer the type of the variable. This is done by using the ",{"type":17,"tag":53,"props":790,"children":791},{"className":7},[792],{"type":23,"value":793},"var",{"type":23,"value":795}," keyword.\nThe compiler will look at the value that is assigned to the variable, and infer the type from that:",{"type":17,"tag":61,"props":797,"children":799},{"className":63,"code":798,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nvar variable = 1\n",[800],{"type":17,"tag":53,"props":801,"children":802},{"__ignoreMap":7},[803,810],{"type":17,"tag":71,"props":804,"children":805},{"class":73,"line":74},[806],{"type":17,"tag":71,"props":807,"children":808},{"style":78},[809],{"type":23,"value":763},{"type":17,"tag":71,"props":811,"children":812},{"class":73,"line":117},[813,817,821,825],{"type":17,"tag":71,"props":814,"children":815},{"style":362},[816],{"type":23,"value":793},{"type":17,"tag":71,"props":818,"children":819},{"style":373},[820],{"type":23,"value":775},{"type":17,"tag":71,"props":822,"children":823},{"style":362},[824],{"type":23,"value":548},{"type":17,"tag":71,"props":826,"children":827},{"style":551},[828],{"type":23,"value":622},{"type":17,"tag":31,"props":830,"children":832},{"id":831},"semi-colons",[833],{"type":23,"value":834},"Semi-colons",{"type":17,"tag":25,"props":836,"children":837},{},[838],{"type":23,"value":839},"Semi-colons can be used to separate statements. They are optional, but are required if you want to put multiple statements on the same line.",{"type":17,"tag":25,"props":841,"children":842},{},[843],{"type":23,"value":844},"For example, this is valid:",{"type":17,"tag":61,"props":846,"children":848},{"className":63,"code":847,"language":65,"meta":7,"style":7},"int a = 1\n",[849],{"type":17,"tag":53,"props":850,"children":851},{"__ignoreMap":7},[852],{"type":17,"tag":71,"props":853,"children":854},{"class":73,"line":74},[855,859,864,868],{"type":17,"tag":71,"props":856,"children":857},{"style":362},[858],{"type":23,"value":187},{"type":17,"tag":71,"props":860,"children":861},{"style":373},[862],{"type":23,"value":863}," a ",{"type":17,"tag":71,"props":865,"children":866},{"style":362},[867],{"type":23,"value":548},{"type":17,"tag":71,"props":869,"children":870},{"style":551},[871],{"type":23,"value":622},{"type":17,"tag":25,"props":873,"children":874},{},[875],{"type":23,"value":876},"But this is not, since there are multiple statements on the same line:",{"type":17,"tag":61,"props":878,"children":880},{"className":63,"code":879,"language":65,"meta":7,"style":7},"int a = 1 int b = 2\n",[881],{"type":17,"tag":53,"props":882,"children":883},{"__ignoreMap":7},[884],{"type":17,"tag":71,"props":885,"children":886},{"class":73,"line":74},[887,891,895,899,904,909,914,918],{"type":17,"tag":71,"props":888,"children":889},{"style":362},[890],{"type":23,"value":187},{"type":17,"tag":71,"props":892,"children":893},{"style":373},[894],{"type":23,"value":863},{"type":17,"tag":71,"props":896,"children":897},{"style":362},[898],{"type":23,"value":548},{"type":17,"tag":71,"props":900,"children":901},{"style":551},[902],{"type":23,"value":903}," 1",{"type":17,"tag":71,"props":905,"children":906},{"style":362},[907],{"type":23,"value":908}," int",{"type":17,"tag":71,"props":910,"children":911},{"style":373},[912],{"type":23,"value":913}," b ",{"type":17,"tag":71,"props":915,"children":916},{"style":362},[917],{"type":23,"value":548},{"type":17,"tag":71,"props":919,"children":920},{"style":551},[921],{"type":23,"value":922}," 2\n",{"type":17,"tag":25,"props":924,"children":925},{},[926],{"type":23,"value":927},"If you want to put multiple statements on the same line, you can use semi-colons to separate them:",{"type":17,"tag":61,"props":929,"children":931},{"className":63,"code":930,"language":65,"meta":7,"style":7},"int a = 1; int b = 2\n",[932],{"type":17,"tag":53,"props":933,"children":934},{"__ignoreMap":7},[935],{"type":17,"tag":71,"props":936,"children":937},{"class":73,"line":74},[938,942,946,950,954,959,963,967,971],{"type":17,"tag":71,"props":939,"children":940},{"style":362},[941],{"type":23,"value":187},{"type":17,"tag":71,"props":943,"children":944},{"style":373},[945],{"type":23,"value":863},{"type":17,"tag":71,"props":947,"children":948},{"style":362},[949],{"type":23,"value":548},{"type":17,"tag":71,"props":951,"children":952},{"style":551},[953],{"type":23,"value":903},{"type":17,"tag":71,"props":955,"children":956},{"style":373},[957],{"type":23,"value":958},"; ",{"type":17,"tag":71,"props":960,"children":961},{"style":362},[962],{"type":23,"value":187},{"type":17,"tag":71,"props":964,"children":965},{"style":373},[966],{"type":23,"value":913},{"type":17,"tag":71,"props":968,"children":969},{"style":362},[970],{"type":23,"value":548},{"type":17,"tag":71,"props":972,"children":973},{"style":551},[974],{"type":23,"value":922},{"type":17,"tag":31,"props":976,"children":978},{"id":977},"functions",[979],{"type":23,"value":980},"Functions",{"type":17,"tag":25,"props":982,"children":983},{},[984],{"type":23,"value":985},"Functions are used to reuse code. When you declare a function with code, you can call it from other places in your code.",{"type":17,"tag":25,"props":987,"children":988},{},[989,991,995,997,1002,1003,1008,1010,1014,1015,1019],{"type":23,"value":990},"Functions are specified the return ",{"type":17,"tag":246,"props":992,"children":993},{"href":290},[994],{"type":23,"value":234},{"type":23,"value":996}," and name of the function, followed by the parameters of the function in parentheses (",{"type":17,"tag":53,"props":998,"children":999},{"className":7},[1000],{"type":23,"value":1001},"(",{"type":23,"value":312},{"type":17,"tag":53,"props":1004,"children":1005},{"className":7},[1006],{"type":23,"value":1007},")",{"type":23,"value":1009},"), and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":1011,"children":1012},{"className":7},[1013],{"type":23,"value":310},{"type":23,"value":312},{"type":17,"tag":53,"props":1016,"children":1017},{"className":7},[1018],{"type":23,"value":317},{"type":23,"value":486},{"type":17,"tag":25,"props":1021,"children":1022},{},[1023,1025,1030],{"type":23,"value":1024},"To return a value from a function, use the ",{"type":17,"tag":53,"props":1026,"children":1027},{"className":7},[1028],{"type":23,"value":1029},"return",{"type":23,"value":1031}," keyword followed by the value to return.",{"type":17,"tag":25,"props":1033,"children":1034},{},[1035,1037,1042],{"type":23,"value":1036},"For example, the following code declares a function called ",{"type":17,"tag":53,"props":1038,"children":1039},{"className":7},[1040],{"type":23,"value":1041},"add",{"type":23,"value":1043}," that takes two integers as parameters and returns an integer:",{"type":17,"tag":61,"props":1045,"children":1047},{"className":63,"code":1046,"language":65,"meta":7,"style":7},"// Declare the add function\n// The function takes two integers (a and b) as parameters and returns an integer\nint add(int a, int b) {\n    return a + b\n}\n",[1048],{"type":17,"tag":53,"props":1049,"children":1050},{"__ignoreMap":7},[1051,1059,1067,1097,1119],{"type":17,"tag":71,"props":1052,"children":1053},{"class":73,"line":74},[1054],{"type":17,"tag":71,"props":1055,"children":1056},{"style":78},[1057],{"type":23,"value":1058},"// Declare the add function\n",{"type":17,"tag":71,"props":1060,"children":1061},{"class":73,"line":117},[1062],{"type":17,"tag":71,"props":1063,"children":1064},{"style":78},[1065],{"type":23,"value":1066},"// The function takes two integers (a and b) as parameters and returns an integer\n",{"type":17,"tag":71,"props":1068,"children":1069},{"class":73,"line":126},[1070,1074,1079,1083,1088,1092],{"type":17,"tag":71,"props":1071,"children":1072},{"style":362},[1073],{"type":23,"value":187},{"type":17,"tag":71,"props":1075,"children":1076},{"style":373},[1077],{"type":23,"value":1078}," add(",{"type":17,"tag":71,"props":1080,"children":1081},{"style":362},[1082],{"type":23,"value":187},{"type":17,"tag":71,"props":1084,"children":1085},{"style":373},[1086],{"type":23,"value":1087}," a, ",{"type":17,"tag":71,"props":1089,"children":1090},{"style":362},[1091],{"type":23,"value":187},{"type":17,"tag":71,"props":1093,"children":1094},{"style":373},[1095],{"type":23,"value":1096}," b) {\n",{"type":17,"tag":71,"props":1098,"children":1099},{"class":73,"line":404},[1100,1105,1109,1114],{"type":17,"tag":71,"props":1101,"children":1102},{"style":362},[1103],{"type":23,"value":1104},"    return",{"type":17,"tag":71,"props":1106,"children":1107},{"style":373},[1108],{"type":23,"value":863},{"type":17,"tag":71,"props":1110,"children":1111},{"style":362},[1112],{"type":23,"value":1113},"+",{"type":17,"tag":71,"props":1115,"children":1116},{"style":373},[1117],{"type":23,"value":1118}," b\n",{"type":17,"tag":71,"props":1120,"children":1121},{"class":73,"line":537},[1122],{"type":17,"tag":71,"props":1123,"children":1124},{"style":373},[1125],{"type":23,"value":410},{"type":17,"tag":25,"props":1127,"children":1128},{},[1129,1131,1136,1138,1142],{"type":23,"value":1130},"Functions can also be declared without a return type by specifying ",{"type":17,"tag":53,"props":1132,"children":1133},{"className":7},[1134],{"type":23,"value":1135},"void",{"type":23,"value":1137}," as the return type. A function with a return type of ",{"type":17,"tag":53,"props":1139,"children":1140},{"className":7},[1141],{"type":23,"value":1135},{"type":23,"value":1143}," cannot return a value.",{"type":17,"tag":25,"props":1145,"children":1146},{},[1147,1148,1153],{"type":23,"value":1036},{"type":17,"tag":53,"props":1149,"children":1150},{"className":7},[1151],{"type":23,"value":1152},"print",{"type":23,"value":1154}," that takes a int array as a parameter and returns nothing:",{"type":17,"tag":61,"props":1156,"children":1158},{"className":63,"code":1157,"language":65,"meta":7,"style":7},"void print(int[] data) {\n    // Print the value to the screen\n}\n",[1159],{"type":17,"tag":53,"props":1160,"children":1161},{"__ignoreMap":7},[1162,1183,1191],{"type":17,"tag":71,"props":1163,"children":1164},{"class":73,"line":74},[1165,1169,1174,1178],{"type":17,"tag":71,"props":1166,"children":1167},{"style":367},[1168],{"type":23,"value":1135},{"type":17,"tag":71,"props":1170,"children":1171},{"style":373},[1172],{"type":23,"value":1173}," print(",{"type":17,"tag":71,"props":1175,"children":1176},{"style":362},[1177],{"type":23,"value":187},{"type":17,"tag":71,"props":1179,"children":1180},{"style":373},[1181],{"type":23,"value":1182},"[] data) {\n",{"type":17,"tag":71,"props":1184,"children":1185},{"class":73,"line":117},[1186],{"type":17,"tag":71,"props":1187,"children":1188},{"style":78},[1189],{"type":23,"value":1190},"    // Print the value to the screen\n",{"type":17,"tag":71,"props":1192,"children":1193},{"class":73,"line":126},[1194],{"type":17,"tag":71,"props":1195,"children":1196},{"style":373},[1197],{"type":23,"value":410},{"type":17,"tag":277,"props":1199,"children":1201},{"id":1200},"calling-functions",[1202],{"type":23,"value":1203},"Calling functions",{"type":17,"tag":25,"props":1205,"children":1206},{},[1207,1209,1213,1214,1218],{"type":23,"value":1208},"To call a function, use the name of the function followed by the arguments of the function in parentheses (",{"type":17,"tag":53,"props":1210,"children":1211},{"className":7},[1212],{"type":23,"value":1001},{"type":23,"value":312},{"type":17,"tag":53,"props":1215,"children":1216},{"className":7},[1217],{"type":23,"value":1007},{"type":23,"value":486},{"type":17,"tag":25,"props":1220,"children":1221},{},[1222,1224,1228],{"type":23,"value":1223},"For example, the following code calls the ",{"type":17,"tag":53,"props":1225,"children":1226},{"className":7},[1227],{"type":23,"value":1041},{"type":23,"value":1229}," function that we declared earlier:",{"type":17,"tag":61,"props":1231,"children":1233},{"className":63,"code":1232,"language":65,"meta":7,"style":7},"// Call the add function and store the result in the \"result\" variable\nint result = add(1, 2)\n",[1234],{"type":17,"tag":53,"props":1235,"children":1236},{"__ignoreMap":7},[1237,1245],{"type":17,"tag":71,"props":1238,"children":1239},{"class":73,"line":74},[1240],{"type":17,"tag":71,"props":1241,"children":1242},{"style":78},[1243],{"type":23,"value":1244},"// Call the add function and store the result in the \"result\" variable\n",{"type":17,"tag":71,"props":1246,"children":1247},{"class":73,"line":117},[1248,1252,1257,1261,1265,1270,1275,1280],{"type":17,"tag":71,"props":1249,"children":1250},{"style":362},[1251],{"type":23,"value":187},{"type":17,"tag":71,"props":1253,"children":1254},{"style":373},[1255],{"type":23,"value":1256}," result ",{"type":17,"tag":71,"props":1258,"children":1259},{"style":362},[1260],{"type":23,"value":548},{"type":17,"tag":71,"props":1262,"children":1263},{"style":373},[1264],{"type":23,"value":1078},{"type":17,"tag":71,"props":1266,"children":1267},{"style":551},[1268],{"type":23,"value":1269},"1",{"type":17,"tag":71,"props":1271,"children":1272},{"style":373},[1273],{"type":23,"value":1274},", ",{"type":17,"tag":71,"props":1276,"children":1277},{"style":551},[1278],{"type":23,"value":1279},"2",{"type":17,"tag":71,"props":1281,"children":1282},{"style":373},[1283],{"type":23,"value":1284},")\n",{"type":17,"tag":1286,"props":1287,"children":1288},"style",{},[1289],{"type":23,"value":1290},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":117,"depth":117,"links":1292},[1293,1294,1298,1299,1300,1301,1302],{"id":33,"depth":117,"text":36},{"id":135,"depth":117,"text":138,"children":1295},[1296,1297],{"id":279,"depth":126,"text":282},{"id":413,"depth":126,"text":416},{"id":454,"depth":117,"text":457},{"id":664,"depth":117,"text":667},{"id":693,"depth":117,"text":696},{"id":831,"depth":117,"text":834},{"id":977,"depth":117,"text":980,"children":1303},[1304],{"id":1200,"depth":126,"text":1203},"markdown","content:docs:2.get-started:3.basics-of-yabal.md","content","docs/2.get-started/3.basics-of-yabal.md","md",[1311],{"title":1312,"_path":1313,"children":1314,"root":12},"Documentation","/docs",[1315,1316,1328,1335],{"title":1312,"_path":1313},{"title":1317,"_path":1318,"children":1319,"sidebar":6},"Getting started","/docs/get-started",[1320,1323,1326,1327],{"title":1321,"_path":1322,"sidebar":12},"Downloads","/docs/get-started/downloads",{"title":1324,"_path":1325,"sidebar":12},"Emulator","/docs/get-started/emulator",{"title":8,"_path":4,"sidebar":12},{"title":1317,"_path":1318,"sidebar":6},{"title":1329,"_path":1330,"children":1331,"sidebar":6},"Language reference","/docs/language-reference",[1332,1334],{"title":282,"_path":1333,"sidebar":12},"/docs/language-reference/structs",{"title":1329,"_path":1330,"sidebar":6},{"title":1336,"_path":1337,"children":1338,"sidebar":6},"Advanced topics","/docs/advanced-topics",[1339,1342,1345],{"title":1340,"_path":1341,"sidebar":12},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":1343,"_path":1344,"sidebar":12},"Optimizing","/docs/advanced-topics/optimizing",{"title":1336,"_path":1337,"sidebar":6},1698279074060]