[{"data":1,"prerenderedAt":1417},["Reactive",2],{"content-query-niMQgmLNTb":3,"content-navigation-8C37fagqQL":1373},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":11,"body":13,"_type":1368,"_id":1369,"_source":1370,"_file":1371,"_extension":1372},"/docs/get-started/basics-of-yabal","get-started",false,"","Basics of Yabal","Learn about the basics of Yabal.",[5],{"sidebar":12},true,{"type":14,"children":15,"toc":1354},"root",[16,24,30,37,42,47,60,81,100,133,139,144,149,276,283,295,326,350,411,417,428,452,458,463,487,492,663,669,687,692,698,703,714,740,750,785,797,830,836,841,846,873,878,924,929,976,982,987,1021,1033,1045,1127,1145,1156,1199,1205,1220,1231,1348],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"basics-of-yabal",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This page will teach you the basics of Yabal.",{"type":17,"tag":31,"props":32,"children":34},"h2",{"id":33},"comments",[35],{"type":23,"value":36},"Comments",{"type":17,"tag":25,"props":38,"children":39},{},[40],{"type":23,"value":41},"Comments are used to add notes to your code. They are ignored by the compiler.",{"type":17,"tag":25,"props":43,"children":44},{},[45],{"type":23,"value":46},"There are two types of comments in Yabal: single-line comments and multi-line comments.",{"type":17,"tag":25,"props":48,"children":49},{},[50,52,58],{"type":23,"value":51},"Single-line comments start with ",{"type":17,"tag":53,"props":54,"children":55},"code",{"className":7},[56],{"type":23,"value":57},"//",{"type":23,"value":59}," and end at the end of the line:",{"type":17,"tag":61,"props":62,"children":66},"pre",{"className":63,"code":64,"language":65,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","// This is a single-line comment\n","yabal",[67],{"type":17,"tag":53,"props":68,"children":69},{"__ignoreMap":7},[70],{"type":17,"tag":71,"props":72,"children":75},"span",{"class":73,"line":74},"line",1,[76],{"type":17,"tag":71,"props":77,"children":79},{"style":78},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[80],{"type":23,"value":64},{"type":17,"tag":25,"props":82,"children":83},{},[84,86,91,93,98],{"type":23,"value":85},"Multi-line comments start with ",{"type":17,"tag":53,"props":87,"children":88},{"className":7},[89],{"type":23,"value":90},"/*",{"type":23,"value":92}," and end with ",{"type":17,"tag":53,"props":94,"children":95},{"className":7},[96],{"type":23,"value":97},"*/",{"type":23,"value":99},":",{"type":17,"tag":61,"props":101,"children":103},{"className":63,"code":102,"language":65,"meta":7,"style":7},"/*\nThis is a multi-line comment\n*/\n",[104],{"type":17,"tag":53,"props":105,"children":106},{"__ignoreMap":7},[107,115,124],{"type":17,"tag":71,"props":108,"children":109},{"class":73,"line":74},[110],{"type":17,"tag":71,"props":111,"children":112},{"style":78},[113],{"type":23,"value":114},"/*\n",{"type":17,"tag":71,"props":116,"children":118},{"class":73,"line":117},2,[119],{"type":17,"tag":71,"props":120,"children":121},{"style":78},[122],{"type":23,"value":123},"This is a multi-line comment\n",{"type":17,"tag":71,"props":125,"children":127},{"class":73,"line":126},3,[128],{"type":17,"tag":71,"props":129,"children":130},{"style":78},[131],{"type":23,"value":132},"*/\n",{"type":17,"tag":31,"props":134,"children":136},{"id":135},"types",[137],{"type":23,"value":138},"Types",{"type":17,"tag":25,"props":140,"children":141},{},[142],{"type":23,"value":143},"Yabal is a statically typed language. An statically typed language means that the type of a variable is known at compile time. This is in contrast to a dynamically typed language (like JavaScript), where the type of a variable is only known at runtime.",{"type":17,"tag":25,"props":145,"children":146},{},[147],{"type":23,"value":148},"Yabal has the following types:",{"type":17,"tag":150,"props":151,"children":152},"table",{},[153,172],{"type":17,"tag":154,"props":155,"children":156},"thead",{},[157],{"type":17,"tag":158,"props":159,"children":160},"tr",{},[161,167],{"type":17,"tag":162,"props":163,"children":164},"th",{},[165],{"type":23,"value":166},"Type",{"type":17,"tag":162,"props":168,"children":169},{},[170],{"type":23,"value":171},"Description",{"type":17,"tag":173,"props":174,"children":175},"tbody",{},[176,193,223,254],{"type":17,"tag":158,"props":177,"children":178},{},[179,188],{"type":17,"tag":180,"props":181,"children":182},"td",{},[183],{"type":17,"tag":53,"props":184,"children":185},{"className":7},[186],{"type":23,"value":187},"int",{"type":17,"tag":180,"props":189,"children":190},{},[191],{"type":23,"value":192},"A 16-bit unsigned integer",{"type":17,"tag":158,"props":194,"children":195},{},[196,204],{"type":17,"tag":180,"props":197,"children":198},{},[199],{"type":17,"tag":53,"props":200,"children":201},{"className":7},[202],{"type":23,"value":203},"bool",{"type":17,"tag":180,"props":205,"children":206},{},[207,209,214,216,221],{"type":23,"value":208},"A boolean value (",{"type":17,"tag":53,"props":210,"children":211},{"className":7},[212],{"type":23,"value":213},"true",{"type":23,"value":215}," or ",{"type":17,"tag":53,"props":217,"children":218},{"className":7},[219],{"type":23,"value":220},"false",{"type":23,"value":222},") stored as a 16-bit integer",{"type":17,"tag":158,"props":224,"children":225},{},[226,240],{"type":17,"tag":180,"props":227,"children":228},{},[229,235],{"type":17,"tag":230,"props":231,"children":232},"em",{},[233],{"type":23,"value":234},"type",{"type":17,"tag":53,"props":236,"children":237},{"className":7},[238],{"type":23,"value":239},"[]",{"type":17,"tag":180,"props":241,"children":242},{},[243,245,252],{"type":23,"value":244},"An ",{"type":17,"tag":246,"props":247,"children":249},"a",{"href":248},"#arrays",[250],{"type":23,"value":251},"array",{"type":23,"value":253}," of values of the specified type",{"type":17,"tag":158,"props":255,"children":256},{},[257,265],{"type":17,"tag":180,"props":258,"children":259},{},[260],{"type":17,"tag":230,"props":261,"children":262},{},[263],{"type":23,"value":264},"UserDefined",{"type":17,"tag":180,"props":266,"children":267},{},[268,270],{"type":23,"value":269},"An user-defined ",{"type":17,"tag":246,"props":271,"children":273},{"href":272},"#structs",[274],{"type":23,"value":275},"struct",{"type":17,"tag":277,"props":278,"children":280},"h3",{"id":279},"structs",[281],{"type":23,"value":282},"Structs",{"type":17,"tag":25,"props":284,"children":285},{},[286,288,293],{"type":23,"value":287},"A struct is a user-defined type. It contains a number of fields, which can be of any ",{"type":17,"tag":246,"props":289,"children":291},{"href":290},"#types",[292],{"type":23,"value":234},{"type":23,"value":294},".",{"type":17,"tag":25,"props":296,"children":297},{},[298,300,304,306,311,313,318,320,324],{"type":23,"value":299},"Structs are declared using the ",{"type":17,"tag":53,"props":301,"children":302},{"className":7},[303],{"type":23,"value":275},{"type":23,"value":305}," keyword, followed by the name of the struct, and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":307,"children":308},{"className":7},[309],{"type":23,"value":310},"{",{"type":23,"value":312}," and ",{"type":17,"tag":53,"props":314,"children":315},{"className":7},[316],{"type":23,"value":317},"}",{"type":23,"value":319},").\nWithin the block of code, you can declare fields by specifying the ",{"type":17,"tag":246,"props":321,"children":322},{"href":290},[323],{"type":23,"value":234},{"type":23,"value":325}," and name of the field.",{"type":17,"tag":25,"props":327,"children":328},{},[329,331,336,338,343,344,349],{"type":23,"value":330},"For example, we declare a struct called ",{"type":17,"tag":53,"props":332,"children":333},{"className":7},[334],{"type":23,"value":335},"Position",{"type":23,"value":337}," with two fields, ",{"type":17,"tag":53,"props":339,"children":340},{"className":7},[341],{"type":23,"value":342},"x",{"type":23,"value":312},{"type":17,"tag":53,"props":345,"children":346},{"className":7},[347],{"type":23,"value":348},"y",{"type":23,"value":99},{"type":17,"tag":61,"props":351,"children":353},{"className":63,"code":352,"language":65,"meta":7,"style":7},"struct Position {\n    int x\n    int y\n}\n",[354],{"type":17,"tag":53,"props":355,"children":356},{"__ignoreMap":7},[357,377,390,402],{"type":17,"tag":71,"props":358,"children":359},{"class":73,"line":74},[360,365,371],{"type":17,"tag":71,"props":361,"children":363},{"style":362},"--shiki-default:#D73A49;--shiki-dark:#F97583",[364],{"type":23,"value":275},{"type":17,"tag":71,"props":366,"children":368},{"style":367},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[369],{"type":23,"value":370}," Position",{"type":17,"tag":71,"props":372,"children":374},{"style":373},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[375],{"type":23,"value":376}," {\n",{"type":17,"tag":71,"props":378,"children":379},{"class":73,"line":117},[380,385],{"type":17,"tag":71,"props":381,"children":382},{"style":362},[383],{"type":23,"value":384},"    int",{"type":17,"tag":71,"props":386,"children":387},{"style":373},[388],{"type":23,"value":389}," x\n",{"type":17,"tag":71,"props":391,"children":392},{"class":73,"line":126},[393,397],{"type":17,"tag":71,"props":394,"children":395},{"style":362},[396],{"type":23,"value":384},{"type":17,"tag":71,"props":398,"children":399},{"style":373},[400],{"type":23,"value":401}," y\n",{"type":17,"tag":71,"props":403,"children":405},{"class":73,"line":404},4,[406],{"type":17,"tag":71,"props":407,"children":408},{"style":373},[409],{"type":23,"value":410},"}\n",{"type":17,"tag":277,"props":412,"children":414},{"id":413},"arrays",[415],{"type":23,"value":416},"Arrays",{"type":17,"tag":25,"props":418,"children":419},{},[420,422,426],{"type":23,"value":421},"An array is a collection of values of the same type. Arrays are declared using the ",{"type":17,"tag":53,"props":423,"children":424},{"className":7},[425],{"type":23,"value":239},{"type":23,"value":427}," operator:",{"type":17,"tag":61,"props":429,"children":431},{"className":63,"code":430,"language":65,"meta":7,"style":7},"int[] numbers // An array of integers\n",[432],{"type":17,"tag":53,"props":433,"children":434},{"__ignoreMap":7},[435],{"type":17,"tag":71,"props":436,"children":437},{"class":73,"line":74},[438,442,447],{"type":17,"tag":71,"props":439,"children":440},{"style":362},[441],{"type":23,"value":187},{"type":17,"tag":71,"props":443,"children":444},{"style":373},[445],{"type":23,"value":446},"[] numbers ",{"type":17,"tag":71,"props":448,"children":449},{"style":78},[450],{"type":23,"value":451},"// An array of integers\n",{"type":17,"tag":31,"props":453,"children":455},{"id":454},"statements",[456],{"type":23,"value":457},"Statements",{"type":17,"tag":25,"props":459,"children":460},{},[461],{"type":23,"value":462},"The actual code in a Yabal program is made up of statements. Common statements are variable declarations, declaring functions, calling functions and control flow statements.",{"type":17,"tag":25,"props":464,"children":465},{},[466,468,474,476,480,481,485],{"type":23,"value":467},"A statement can be a single line of code that ends with a new-line or ",{"type":17,"tag":246,"props":469,"children":471},{"href":470},"#semi-colons",[472],{"type":23,"value":473},"semi-colon",{"type":23,"value":475},". A statement can also be multiple lines of code surrounded by curly braces (",{"type":17,"tag":53,"props":477,"children":478},{"className":7},[479],{"type":23,"value":310},{"type":23,"value":312},{"type":17,"tag":53,"props":482,"children":483},{"className":7},[484],{"type":23,"value":317},{"type":23,"value":486},").",{"type":17,"tag":25,"props":488,"children":489},{},[490],{"type":23,"value":491},"The following code shows an example of a block of code:",{"type":17,"tag":61,"props":493,"children":496},{"className":63,"code":494,"filename":495,"language":65,"meta":7,"style":7},"// Variable declaration statement\nint variable\n\n// Assignment statement\nvariable = 0\n\n// If statement that contains multiple statements\nif (variable == 0) {\n    // Assignment statement\n    variable = 1\n\n    // Expression statement (postfix increment)\n    variable++\n}\n","run",[497],{"type":17,"tag":53,"props":498,"children":499},{"__ignoreMap":7},[500,508,520,528,536,556,564,573,597,606,624,632,641,655],{"type":17,"tag":71,"props":501,"children":502},{"class":73,"line":74},[503],{"type":17,"tag":71,"props":504,"children":505},{"style":78},[506],{"type":23,"value":507},"// Variable declaration statement\n",{"type":17,"tag":71,"props":509,"children":510},{"class":73,"line":117},[511,515],{"type":17,"tag":71,"props":512,"children":513},{"style":362},[514],{"type":23,"value":187},{"type":17,"tag":71,"props":516,"children":517},{"style":373},[518],{"type":23,"value":519}," variable\n",{"type":17,"tag":71,"props":521,"children":522},{"class":73,"line":126},[523],{"type":17,"tag":71,"props":524,"children":525},{"emptyLinePlaceholder":12},[526],{"type":23,"value":527},"\n",{"type":17,"tag":71,"props":529,"children":530},{"class":73,"line":404},[531],{"type":17,"tag":71,"props":532,"children":533},{"style":78},[534],{"type":23,"value":535},"// Assignment statement\n",{"type":17,"tag":71,"props":537,"children":539},{"class":73,"line":538},5,[540,545,550],{"type":17,"tag":71,"props":541,"children":542},{"style":373},[543],{"type":23,"value":544},"variable ",{"type":17,"tag":71,"props":546,"children":547},{"style":362},[548],{"type":23,"value":549},"=",{"type":17,"tag":71,"props":551,"children":553},{"style":552},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[554],{"type":23,"value":555}," 0\n",{"type":17,"tag":71,"props":557,"children":559},{"class":73,"line":558},6,[560],{"type":17,"tag":71,"props":561,"children":562},{"emptyLinePlaceholder":12},[563],{"type":23,"value":527},{"type":17,"tag":71,"props":565,"children":567},{"class":73,"line":566},7,[568],{"type":17,"tag":71,"props":569,"children":570},{"style":78},[571],{"type":23,"value":572},"// If statement that contains multiple statements\n",{"type":17,"tag":71,"props":574,"children":576},{"class":73,"line":575},8,[577,582,587,592],{"type":17,"tag":71,"props":578,"children":579},{"style":362},[580],{"type":23,"value":581},"if",{"type":17,"tag":71,"props":583,"children":584},{"style":373},[585],{"type":23,"value":586}," (variable == ",{"type":17,"tag":71,"props":588,"children":589},{"style":552},[590],{"type":23,"value":591},"0",{"type":17,"tag":71,"props":593,"children":594},{"style":373},[595],{"type":23,"value":596},") {\n",{"type":17,"tag":71,"props":598,"children":600},{"class":73,"line":599},9,[601],{"type":17,"tag":71,"props":602,"children":603},{"style":78},[604],{"type":23,"value":605},"    // Assignment statement\n",{"type":17,"tag":71,"props":607,"children":609},{"class":73,"line":608},10,[610,615,619],{"type":17,"tag":71,"props":611,"children":612},{"style":373},[613],{"type":23,"value":614},"    variable ",{"type":17,"tag":71,"props":616,"children":617},{"style":362},[618],{"type":23,"value":549},{"type":17,"tag":71,"props":620,"children":621},{"style":552},[622],{"type":23,"value":623}," 1\n",{"type":17,"tag":71,"props":625,"children":627},{"class":73,"line":626},11,[628],{"type":17,"tag":71,"props":629,"children":630},{"emptyLinePlaceholder":12},[631],{"type":23,"value":527},{"type":17,"tag":71,"props":633,"children":635},{"class":73,"line":634},12,[636],{"type":17,"tag":71,"props":637,"children":638},{"style":78},[639],{"type":23,"value":640},"    // Expression statement (postfix increment)\n",{"type":17,"tag":71,"props":642,"children":644},{"class":73,"line":643},13,[645,650],{"type":17,"tag":71,"props":646,"children":647},{"style":373},[648],{"type":23,"value":649},"    variable",{"type":17,"tag":71,"props":651,"children":652},{"style":362},[653],{"type":23,"value":654},"++\n",{"type":17,"tag":71,"props":656,"children":658},{"class":73,"line":657},14,[659],{"type":17,"tag":71,"props":660,"children":661},{"style":373},[662],{"type":23,"value":410},{"type":17,"tag":31,"props":664,"children":666},{"id":665},"expressions",[667],{"type":23,"value":668},"Expressions",{"type":17,"tag":25,"props":670,"children":671},{},[672,674,679,681,686],{"type":23,"value":673},"An expression is a statement that evaluates to a value. For example, ",{"type":17,"tag":53,"props":675,"children":676},{"className":7},[677],{"type":23,"value":678},"1 + 2",{"type":23,"value":680}," is an expression that evaluates to ",{"type":17,"tag":53,"props":682,"children":683},{"className":7},[684],{"type":23,"value":685},"3",{"type":23,"value":294},{"type":17,"tag":25,"props":688,"children":689},{},[690],{"type":23,"value":691},"Expressions can be used in many places, such as in assignment statements, function calls, and control flow statements.",{"type":17,"tag":31,"props":693,"children":695},{"id":694},"variables",[696],{"type":23,"value":697},"Variables",{"type":17,"tag":25,"props":699,"children":700},{},[701],{"type":23,"value":702},"Variables are used to store values in memory.",{"type":17,"tag":25,"props":704,"children":705},{},[706,708,712],{"type":23,"value":707},"You can declare variable specifying the ",{"type":17,"tag":246,"props":709,"children":710},{"href":290},[711],{"type":23,"value":234},{"type":23,"value":713}," and name of the variable:",{"type":17,"tag":61,"props":715,"children":717},{"className":63,"code":716,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\"\nint variable\n",[718],{"type":17,"tag":53,"props":719,"children":720},{"__ignoreMap":7},[721,729],{"type":17,"tag":71,"props":722,"children":723},{"class":73,"line":74},[724],{"type":17,"tag":71,"props":725,"children":726},{"style":78},[727],{"type":23,"value":728},"// Create an integer variable called \"variable\"\n",{"type":17,"tag":71,"props":730,"children":731},{"class":73,"line":117},[732,736],{"type":17,"tag":71,"props":733,"children":734},{"style":362},[735],{"type":23,"value":187},{"type":17,"tag":71,"props":737,"children":738},{"style":373},[739],{"type":23,"value":519},{"type":17,"tag":25,"props":741,"children":742},{},[743,745,749],{"type":23,"value":744},"You can also assign a value to a variable when declaring it by using the ",{"type":17,"tag":53,"props":746,"children":747},{"className":7},[748],{"type":23,"value":549},{"type":23,"value":427},{"type":17,"tag":61,"props":751,"children":753},{"className":63,"code":752,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nint variable = 1\n",[754],{"type":17,"tag":53,"props":755,"children":756},{"__ignoreMap":7},[757,765],{"type":17,"tag":71,"props":758,"children":759},{"class":73,"line":74},[760],{"type":17,"tag":71,"props":761,"children":762},{"style":78},[763],{"type":23,"value":764},"// Create an integer variable called \"variable\" and assign it the value 1\n",{"type":17,"tag":71,"props":766,"children":767},{"class":73,"line":117},[768,772,777,781],{"type":17,"tag":71,"props":769,"children":770},{"style":362},[771],{"type":23,"value":187},{"type":17,"tag":71,"props":773,"children":774},{"style":373},[775],{"type":23,"value":776}," variable ",{"type":17,"tag":71,"props":778,"children":779},{"style":362},[780],{"type":23,"value":549},{"type":17,"tag":71,"props":782,"children":783},{"style":552},[784],{"type":23,"value":623},{"type":17,"tag":25,"props":786,"children":787},{},[788,790,795],{"type":23,"value":789},"It is also possible to let the compiler infer the type of the variable. This is done by using the ",{"type":17,"tag":53,"props":791,"children":792},{"className":7},[793],{"type":23,"value":794},"var",{"type":23,"value":796}," keyword.\nThe compiler will look at the value that is assigned to the variable, and infer the type from that:",{"type":17,"tag":61,"props":798,"children":800},{"className":63,"code":799,"language":65,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nvar variable = 1\n",[801],{"type":17,"tag":53,"props":802,"children":803},{"__ignoreMap":7},[804,811],{"type":17,"tag":71,"props":805,"children":806},{"class":73,"line":74},[807],{"type":17,"tag":71,"props":808,"children":809},{"style":78},[810],{"type":23,"value":764},{"type":17,"tag":71,"props":812,"children":813},{"class":73,"line":117},[814,818,822,826],{"type":17,"tag":71,"props":815,"children":816},{"style":362},[817],{"type":23,"value":794},{"type":17,"tag":71,"props":819,"children":820},{"style":373},[821],{"type":23,"value":776},{"type":17,"tag":71,"props":823,"children":824},{"style":362},[825],{"type":23,"value":549},{"type":17,"tag":71,"props":827,"children":828},{"style":552},[829],{"type":23,"value":623},{"type":17,"tag":31,"props":831,"children":833},{"id":832},"semi-colons",[834],{"type":23,"value":835},"Semi-colons",{"type":17,"tag":25,"props":837,"children":838},{},[839],{"type":23,"value":840},"Semi-colons can be used to separate statements. They are optional, but are required if you want to put multiple statements on the same line.",{"type":17,"tag":25,"props":842,"children":843},{},[844],{"type":23,"value":845},"For example, this is valid:",{"type":17,"tag":61,"props":847,"children":849},{"className":63,"code":848,"language":65,"meta":7,"style":7},"int a = 1\n",[850],{"type":17,"tag":53,"props":851,"children":852},{"__ignoreMap":7},[853],{"type":17,"tag":71,"props":854,"children":855},{"class":73,"line":74},[856,860,865,869],{"type":17,"tag":71,"props":857,"children":858},{"style":362},[859],{"type":23,"value":187},{"type":17,"tag":71,"props":861,"children":862},{"style":373},[863],{"type":23,"value":864}," a ",{"type":17,"tag":71,"props":866,"children":867},{"style":362},[868],{"type":23,"value":549},{"type":17,"tag":71,"props":870,"children":871},{"style":552},[872],{"type":23,"value":623},{"type":17,"tag":25,"props":874,"children":875},{},[876],{"type":23,"value":877},"But this is not, since there are multiple statements on the same line:",{"type":17,"tag":61,"props":879,"children":881},{"className":63,"code":880,"language":65,"meta":7,"style":7},"int a = 1 int b = 2\n",[882],{"type":17,"tag":53,"props":883,"children":884},{"__ignoreMap":7},[885],{"type":17,"tag":71,"props":886,"children":887},{"class":73,"line":74},[888,892,896,900,905,910,915,919],{"type":17,"tag":71,"props":889,"children":890},{"style":362},[891],{"type":23,"value":187},{"type":17,"tag":71,"props":893,"children":894},{"style":373},[895],{"type":23,"value":864},{"type":17,"tag":71,"props":897,"children":898},{"style":362},[899],{"type":23,"value":549},{"type":17,"tag":71,"props":901,"children":902},{"style":552},[903],{"type":23,"value":904}," 1",{"type":17,"tag":71,"props":906,"children":907},{"style":362},[908],{"type":23,"value":909}," int",{"type":17,"tag":71,"props":911,"children":912},{"style":373},[913],{"type":23,"value":914}," b ",{"type":17,"tag":71,"props":916,"children":917},{"style":362},[918],{"type":23,"value":549},{"type":17,"tag":71,"props":920,"children":921},{"style":552},[922],{"type":23,"value":923}," 2\n",{"type":17,"tag":25,"props":925,"children":926},{},[927],{"type":23,"value":928},"If you want to put multiple statements on the same line, you can use semi-colons to separate them:",{"type":17,"tag":61,"props":930,"children":932},{"className":63,"code":931,"language":65,"meta":7,"style":7},"int a = 1; int b = 2\n",[933],{"type":17,"tag":53,"props":934,"children":935},{"__ignoreMap":7},[936],{"type":17,"tag":71,"props":937,"children":938},{"class":73,"line":74},[939,943,947,951,955,960,964,968,972],{"type":17,"tag":71,"props":940,"children":941},{"style":362},[942],{"type":23,"value":187},{"type":17,"tag":71,"props":944,"children":945},{"style":373},[946],{"type":23,"value":864},{"type":17,"tag":71,"props":948,"children":949},{"style":362},[950],{"type":23,"value":549},{"type":17,"tag":71,"props":952,"children":953},{"style":552},[954],{"type":23,"value":904},{"type":17,"tag":71,"props":956,"children":957},{"style":373},[958],{"type":23,"value":959},"; ",{"type":17,"tag":71,"props":961,"children":962},{"style":362},[963],{"type":23,"value":187},{"type":17,"tag":71,"props":965,"children":966},{"style":373},[967],{"type":23,"value":914},{"type":17,"tag":71,"props":969,"children":970},{"style":362},[971],{"type":23,"value":549},{"type":17,"tag":71,"props":973,"children":974},{"style":552},[975],{"type":23,"value":923},{"type":17,"tag":31,"props":977,"children":979},{"id":978},"functions",[980],{"type":23,"value":981},"Functions",{"type":17,"tag":25,"props":983,"children":984},{},[985],{"type":23,"value":986},"Functions are used to reuse code. When you declare a function with code, you can call it from other places in your code.",{"type":17,"tag":25,"props":988,"children":989},{},[990,992,996,998,1003,1004,1009,1011,1015,1016,1020],{"type":23,"value":991},"Functions are specified the return ",{"type":17,"tag":246,"props":993,"children":994},{"href":290},[995],{"type":23,"value":234},{"type":23,"value":997}," and name of the function, followed by the parameters of the function in parentheses (",{"type":17,"tag":53,"props":999,"children":1000},{"className":7},[1001],{"type":23,"value":1002},"(",{"type":23,"value":312},{"type":17,"tag":53,"props":1005,"children":1006},{"className":7},[1007],{"type":23,"value":1008},")",{"type":23,"value":1010},"), and then a block of code surrounded by curly braces (",{"type":17,"tag":53,"props":1012,"children":1013},{"className":7},[1014],{"type":23,"value":310},{"type":23,"value":312},{"type":17,"tag":53,"props":1017,"children":1018},{"className":7},[1019],{"type":23,"value":317},{"type":23,"value":486},{"type":17,"tag":25,"props":1022,"children":1023},{},[1024,1026,1031],{"type":23,"value":1025},"To return a value from a function, use the ",{"type":17,"tag":53,"props":1027,"children":1028},{"className":7},[1029],{"type":23,"value":1030},"return",{"type":23,"value":1032}," keyword followed by the value to return.",{"type":17,"tag":25,"props":1034,"children":1035},{},[1036,1038,1043],{"type":23,"value":1037},"For example, the following code declares a function called ",{"type":17,"tag":53,"props":1039,"children":1040},{"className":7},[1041],{"type":23,"value":1042},"add",{"type":23,"value":1044}," that takes two integers as parameters and returns an integer:",{"type":17,"tag":61,"props":1046,"children":1048},{"className":63,"code":1047,"language":65,"meta":7,"style":7},"// Declare the add function\n// The function takes two integers (a and b) as parameters and returns an integer\nint add(int a, int b) {\n    return a + b\n}\n",[1049],{"type":17,"tag":53,"props":1050,"children":1051},{"__ignoreMap":7},[1052,1060,1068,1098,1120],{"type":17,"tag":71,"props":1053,"children":1054},{"class":73,"line":74},[1055],{"type":17,"tag":71,"props":1056,"children":1057},{"style":78},[1058],{"type":23,"value":1059},"// Declare the add function\n",{"type":17,"tag":71,"props":1061,"children":1062},{"class":73,"line":117},[1063],{"type":17,"tag":71,"props":1064,"children":1065},{"style":78},[1066],{"type":23,"value":1067},"// The function takes two integers (a and b) as parameters and returns an integer\n",{"type":17,"tag":71,"props":1069,"children":1070},{"class":73,"line":126},[1071,1075,1080,1084,1089,1093],{"type":17,"tag":71,"props":1072,"children":1073},{"style":362},[1074],{"type":23,"value":187},{"type":17,"tag":71,"props":1076,"children":1077},{"style":373},[1078],{"type":23,"value":1079}," add(",{"type":17,"tag":71,"props":1081,"children":1082},{"style":362},[1083],{"type":23,"value":187},{"type":17,"tag":71,"props":1085,"children":1086},{"style":373},[1087],{"type":23,"value":1088}," a, ",{"type":17,"tag":71,"props":1090,"children":1091},{"style":362},[1092],{"type":23,"value":187},{"type":17,"tag":71,"props":1094,"children":1095},{"style":373},[1096],{"type":23,"value":1097}," b) {\n",{"type":17,"tag":71,"props":1099,"children":1100},{"class":73,"line":404},[1101,1106,1110,1115],{"type":17,"tag":71,"props":1102,"children":1103},{"style":362},[1104],{"type":23,"value":1105},"    return",{"type":17,"tag":71,"props":1107,"children":1108},{"style":373},[1109],{"type":23,"value":864},{"type":17,"tag":71,"props":1111,"children":1112},{"style":362},[1113],{"type":23,"value":1114},"+",{"type":17,"tag":71,"props":1116,"children":1117},{"style":373},[1118],{"type":23,"value":1119}," b\n",{"type":17,"tag":71,"props":1121,"children":1122},{"class":73,"line":538},[1123],{"type":17,"tag":71,"props":1124,"children":1125},{"style":373},[1126],{"type":23,"value":410},{"type":17,"tag":25,"props":1128,"children":1129},{},[1130,1132,1137,1139,1143],{"type":23,"value":1131},"Functions can also be declared without a return type by specifying ",{"type":17,"tag":53,"props":1133,"children":1134},{"className":7},[1135],{"type":23,"value":1136},"void",{"type":23,"value":1138}," as the return type. A function with a return type of ",{"type":17,"tag":53,"props":1140,"children":1141},{"className":7},[1142],{"type":23,"value":1136},{"type":23,"value":1144}," cannot return a value.",{"type":17,"tag":25,"props":1146,"children":1147},{},[1148,1149,1154],{"type":23,"value":1037},{"type":17,"tag":53,"props":1150,"children":1151},{"className":7},[1152],{"type":23,"value":1153},"print",{"type":23,"value":1155}," that takes a int array as a parameter and returns nothing:",{"type":17,"tag":61,"props":1157,"children":1159},{"className":63,"code":1158,"language":65,"meta":7,"style":7},"void print(int[] data) {\n    // Print the value to the screen\n}\n",[1160],{"type":17,"tag":53,"props":1161,"children":1162},{"__ignoreMap":7},[1163,1184,1192],{"type":17,"tag":71,"props":1164,"children":1165},{"class":73,"line":74},[1166,1170,1175,1179],{"type":17,"tag":71,"props":1167,"children":1168},{"style":367},[1169],{"type":23,"value":1136},{"type":17,"tag":71,"props":1171,"children":1172},{"style":373},[1173],{"type":23,"value":1174}," print(",{"type":17,"tag":71,"props":1176,"children":1177},{"style":362},[1178],{"type":23,"value":187},{"type":17,"tag":71,"props":1180,"children":1181},{"style":373},[1182],{"type":23,"value":1183},"[] data) {\n",{"type":17,"tag":71,"props":1185,"children":1186},{"class":73,"line":117},[1187],{"type":17,"tag":71,"props":1188,"children":1189},{"style":78},[1190],{"type":23,"value":1191},"    // Print the value to the screen\n",{"type":17,"tag":71,"props":1193,"children":1194},{"class":73,"line":126},[1195],{"type":17,"tag":71,"props":1196,"children":1197},{"style":373},[1198],{"type":23,"value":410},{"type":17,"tag":277,"props":1200,"children":1202},{"id":1201},"calling-functions",[1203],{"type":23,"value":1204},"Calling functions",{"type":17,"tag":25,"props":1206,"children":1207},{},[1208,1210,1214,1215,1219],{"type":23,"value":1209},"To call a function, use the name of the function followed by the arguments of the function in parentheses (",{"type":17,"tag":53,"props":1211,"children":1212},{"className":7},[1213],{"type":23,"value":1002},{"type":23,"value":312},{"type":17,"tag":53,"props":1216,"children":1217},{"className":7},[1218],{"type":23,"value":1008},{"type":23,"value":486},{"type":17,"tag":25,"props":1221,"children":1222},{},[1223,1225,1229],{"type":23,"value":1224},"For example, the following code calls the ",{"type":17,"tag":53,"props":1226,"children":1227},{"className":7},[1228],{"type":23,"value":1042},{"type":23,"value":1230}," function that we declared earlier:",{"type":17,"tag":61,"props":1232,"children":1235},{"className":63,"code":1233,"filename":495,"highlights":1234,"language":65,"meta":7,"style":7},"// Call the add function and store the result in the \"result\" variable\nint result = add(1, 2)\n\nint add(int a, int b) {\n    return a + b\n}\n",[117],[1236],{"type":17,"tag":53,"props":1237,"children":1238},{"__ignoreMap":7},[1239,1247,1288,1295,1322,1341],{"type":17,"tag":71,"props":1240,"children":1241},{"class":73,"line":74},[1242],{"type":17,"tag":71,"props":1243,"children":1244},{"style":78},[1245],{"type":23,"value":1246},"// Call the add function and store the result in the \"result\" variable\n",{"type":17,"tag":71,"props":1248,"children":1250},{"class":1249,"line":117},"line highlight",[1251,1255,1260,1264,1268,1273,1278,1283],{"type":17,"tag":71,"props":1252,"children":1253},{"style":362},[1254],{"type":23,"value":187},{"type":17,"tag":71,"props":1256,"children":1257},{"style":373},[1258],{"type":23,"value":1259}," result ",{"type":17,"tag":71,"props":1261,"children":1262},{"style":362},[1263],{"type":23,"value":549},{"type":17,"tag":71,"props":1265,"children":1266},{"style":373},[1267],{"type":23,"value":1079},{"type":17,"tag":71,"props":1269,"children":1270},{"style":552},[1271],{"type":23,"value":1272},"1",{"type":17,"tag":71,"props":1274,"children":1275},{"style":373},[1276],{"type":23,"value":1277},", ",{"type":17,"tag":71,"props":1279,"children":1280},{"style":552},[1281],{"type":23,"value":1282},"2",{"type":17,"tag":71,"props":1284,"children":1285},{"style":373},[1286],{"type":23,"value":1287},")\n",{"type":17,"tag":71,"props":1289,"children":1290},{"class":73,"line":126},[1291],{"type":17,"tag":71,"props":1292,"children":1293},{"emptyLinePlaceholder":12},[1294],{"type":23,"value":527},{"type":17,"tag":71,"props":1296,"children":1297},{"class":73,"line":404},[1298,1302,1306,1310,1314,1318],{"type":17,"tag":71,"props":1299,"children":1300},{"style":362},[1301],{"type":23,"value":187},{"type":17,"tag":71,"props":1303,"children":1304},{"style":373},[1305],{"type":23,"value":1079},{"type":17,"tag":71,"props":1307,"children":1308},{"style":362},[1309],{"type":23,"value":187},{"type":17,"tag":71,"props":1311,"children":1312},{"style":373},[1313],{"type":23,"value":1088},{"type":17,"tag":71,"props":1315,"children":1316},{"style":362},[1317],{"type":23,"value":187},{"type":17,"tag":71,"props":1319,"children":1320},{"style":373},[1321],{"type":23,"value":1097},{"type":17,"tag":71,"props":1323,"children":1324},{"class":73,"line":538},[1325,1329,1333,1337],{"type":17,"tag":71,"props":1326,"children":1327},{"style":362},[1328],{"type":23,"value":1105},{"type":17,"tag":71,"props":1330,"children":1331},{"style":373},[1332],{"type":23,"value":864},{"type":17,"tag":71,"props":1334,"children":1335},{"style":362},[1336],{"type":23,"value":1114},{"type":17,"tag":71,"props":1338,"children":1339},{"style":373},[1340],{"type":23,"value":1119},{"type":17,"tag":71,"props":1342,"children":1343},{"class":73,"line":558},[1344],{"type":17,"tag":71,"props":1345,"children":1346},{"style":373},[1347],{"type":23,"value":410},{"type":17,"tag":1349,"props":1350,"children":1351},"style",{},[1352],{"type":23,"value":1353},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":117,"depth":117,"links":1355},[1356,1357,1361,1362,1363,1364,1365],{"id":33,"depth":117,"text":36},{"id":135,"depth":117,"text":138,"children":1358},[1359,1360],{"id":279,"depth":126,"text":282},{"id":413,"depth":126,"text":416},{"id":454,"depth":117,"text":457},{"id":665,"depth":117,"text":668},{"id":694,"depth":117,"text":697},{"id":832,"depth":117,"text":835},{"id":978,"depth":117,"text":981,"children":1366},[1367],{"id":1201,"depth":126,"text":1204},"markdown","content:docs:2.get-started:3.basics-of-yabal.md","content","docs/2.get-started/3.basics-of-yabal.md","md",[1374],{"title":1375,"_path":1376,"children":1377,"root":12},"Documentation","/docs",[1378,1379,1391,1398,1406],{"title":1375,"_path":1376},{"title":1380,"_path":1381,"children":1382,"sidebar":6},"Getting started","/docs/get-started",[1383,1386,1389,1390],{"title":1384,"_path":1385,"sidebar":12},"Downloads","/docs/get-started/downloads",{"title":1387,"_path":1388,"sidebar":12},"Emulator","/docs/get-started/emulator",{"title":8,"_path":4,"sidebar":12},{"title":1380,"_path":1381,"sidebar":6},{"title":1392,"_path":1393,"children":1394,"sidebar":6},"Language reference","/docs/language-reference",[1395,1397],{"title":282,"_path":1396,"sidebar":12},"/docs/language-reference/structs",{"title":1392,"_path":1393,"sidebar":6},{"title":1399,"_path":1400,"children":1401,"sidebar":6},"Perhipherals","/docs/peripherals",[1402,1405],{"title":1403,"_path":1404,"sidebar":12},"Screen","/docs/peripherals/screen",{"title":1399,"_path":1400,"sidebar":6},{"title":1407,"_path":1408,"children":1409,"sidebar":6},"Advanced topics","/docs/advanced-topics",[1410,1413,1416],{"title":1411,"_path":1412,"sidebar":12},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":1414,"_path":1415,"sidebar":12},"Optimizing","/docs/advanced-topics/optimizing",{"title":1407,"_path":1408,"sidebar":6},1698346814457]