[{"data":1,"prerenderedAt":1795},["Reactive",2],{"content-query-AcJ52JYVSR":3,"content-navigation-8C37fagqQL":54,"content-navigation-AUvUjo7VrF":106,"content-query-NKK6OdiaiL":115,"content-query-lyMJy2tOYZ":215,"content-query-4SxawDMX1W":429},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":49,"_id":50,"_source":51,"_file":52,"_extension":53},"/docs/get-started","docs",false,"","Getting started","Get started with Yabal.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":46},"root",[16,24,41],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"getting-started",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28,30,39],{"type":23,"value":29},"Yabal is a programming language for ",{"type":17,"tag":31,"props":32,"children":36},"a",{"href":33,"rel":34},"https://github.com/sam-astro/Astro8-Computer",[35],"nofollow",[37],{"type":23,"value":38},"Astro-8",{"type":23,"value":40},", a custom 16-bit homebrew CPU. Yabal stands for \"Yet Another Basic Astro-8 Language\".\nIt is a simple language that is easy to learn and use, and compiles to Astro-8 assembly.",{"type":17,"tag":42,"props":43,"children":45},"related",{":tags":44},"get-started",[],{"title":7,"searchDepth":47,"depth":47,"links":48},2,[],"markdown","content:docs:2.get-started:index.md","content","docs/2.get-started/index.md","md",[55],{"title":56,"_path":57,"children":58,"root":65},"Documentation","/docs",[59,60,73,87,95],{"title":56,"_path":57},{"title":8,"_path":4,"children":61,"sidebar":6},[62,66,69,72],{"title":63,"_path":64,"sidebar":65},"Downloads","/docs/get-started/downloads",true,{"title":67,"_path":68,"sidebar":65},"Emulator","/docs/get-started/emulator",{"title":70,"_path":71,"sidebar":65},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":8,"_path":4,"sidebar":6},{"title":74,"_path":75,"children":76,"sidebar":6},"Language reference","/docs/language-reference",[77,80,83,86],{"title":78,"_path":79,"sidebar":65},"Structs","/docs/language-reference/structs",{"title":81,"_path":82,"sidebar":65},"Function pointers","/docs/language-reference/function-pointer",{"title":84,"_path":85,"sidebar":65},"Stack allocations","/docs/language-reference/stack-allocations",{"title":74,"_path":75,"sidebar":6},{"title":88,"_path":89,"children":90,"sidebar":6},"Perhipherals","/docs/peripherals",[91,94],{"title":92,"_path":93,"sidebar":65},"Screen","/docs/peripherals/screen",{"title":88,"_path":89,"sidebar":6},{"title":96,"_path":97,"children":98,"sidebar":6},"Advanced topics","/docs/advanced-topics",[99,102,105],{"title":100,"_path":101,"sidebar":65},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":103,"_path":104,"sidebar":65},"Optimizing","/docs/advanced-topics/optimizing",{"title":96,"_path":97,"sidebar":6},[107],{"title":56,"_path":57,"children":108,"root":65},[109],{"title":110,"_path":4,"children":111},"Get Started",[112,113,114],{"title":63,"_path":64,"sidebar":65},{"title":67,"_path":68,"sidebar":65},{"title":70,"_path":71,"sidebar":65},{"_path":64,"_dir":44,"_draft":6,"_partial":6,"_locale":7,"title":63,"description":116,"tags":117,"navigation":118,"body":119,"_type":49,"_id":213,"_source":51,"_file":214,"_extension":53},"Download the Yabal compiler and Astro-8 emulator.",[44],{"sidebar":65},{"type":14,"children":120,"toc":209},[121,126,131,138,143,165,185,190,194,200,205],{"type":17,"tag":18,"props":122,"children":124},{"id":123},"downloads",[125],{"type":23,"value":63},{"type":17,"tag":25,"props":127,"children":128},{},[129],{"type":23,"value":130},"On this page you can download the Yabal compiler and the Astro-8 emulator.",{"type":17,"tag":132,"props":133,"children":135},"h2",{"id":134},"yabal",[136],{"type":23,"value":137},"Yabal",{"type":17,"tag":25,"props":139,"children":140},{},[141],{"type":23,"value":142},"There are two builds types of Yabal:",{"type":17,"tag":25,"props":144,"children":145},{},[146,152,154,158,163],{"type":17,"tag":147,"props":148,"children":149},"strong",{},[150],{"type":23,"value":151},"Native",{"type":23,"value":153}," - Native builds for the architecture you are running on for faster startup time and smaller memory footprints.",{"type":17,"tag":155,"props":156,"children":157},"br",{},[],{"type":17,"tag":147,"props":159,"children":160},{},[161],{"type":23,"value":162},"Runtime",{"type":23,"value":164}," - Builds with the .NET Runtime for better performance (JIT / PGO).",{"type":17,"tag":25,"props":166,"children":167},{},[168,170,176,178,183],{"type":23,"value":169},"The native builds do not support importings fonts (",{"type":17,"tag":171,"props":172,"children":173},"code",{"className":7},[174],{"type":23,"value":175},"include_font",{"type":23,"value":177},") and images (",{"type":17,"tag":171,"props":179,"children":180},{"className":7},[181],{"type":23,"value":182},"include_image",{"type":23,"value":184},").",{"type":17,"tag":186,"props":187,"children":189},"download",{":repo":188},"YabalLang/compiler",[],{"type":17,"tag":191,"props":192,"children":193},"hr",{},[],{"type":17,"tag":132,"props":195,"children":197},{"id":196},"astro-8-emulator",[198],{"type":23,"value":199},"Astro-8 Emulator",{"type":17,"tag":25,"props":201,"children":202},{},[203],{"type":23,"value":204},"Astro-8 emulator an emulator for Astro-8. In comparison to the Yabal emulator it supports more features like audio and file I/O.",{"type":17,"tag":186,"props":206,"children":208},{":repo":207},"sam-astro/Astro8-Computer",[],{"title":7,"searchDepth":47,"depth":47,"links":210},[211,212],{"id":134,"depth":47,"text":137},{"id":196,"depth":47,"text":199},"content:docs:2.get-started:1.downloads.md","docs/2.get-started/1.downloads.md",{"_path":68,"_dir":44,"_draft":6,"_partial":6,"_locale":7,"title":67,"description":216,"tags":217,"navigation":218,"body":219,"_type":49,"_id":427,"_source":51,"_file":428,"_extension":53},"Learn how to run your Yabal programs.",[44],{"sidebar":65},{"type":14,"children":220,"toc":423},[221,226,231,237,260,272,310,322,364,378,384,389,394,417],{"type":17,"tag":18,"props":222,"children":224},{"id":223},"emulator",[225],{"type":23,"value":67},{"type":17,"tag":25,"props":227,"children":228},{},[229],{"type":23,"value":230},"To run your Yabal programs, you need to install the Astro-8 emulator. The Astro-8 emulator is a virtual machine that runs Astro-8 assembly code. Yabal compiles your code to Astro-8 assembly code, which is then run by the emulator.",{"type":17,"tag":132,"props":232,"children":234},{"id":233},"native-emulator",[235],{"type":23,"value":236},"Native emulator",{"type":17,"tag":25,"props":238,"children":239},{},[240,242,249,251,258],{"type":23,"value":241},"It is recommended to install the ",{"type":17,"tag":31,"props":243,"children":246},{"href":244,"rel":245},"https://github.com/sam-astro/Astro8-Computer/releases",[35],[247],{"type":23,"value":248},"Astro-8 emulator",{"type":23,"value":250}," by ",{"type":17,"tag":31,"props":252,"children":255},{"href":253,"rel":254},"https://github.com/sam-astro",[35],[256],{"type":23,"value":257},"sam-astro",{"type":23,"value":259}," to run your programs, since the emulator contains all the latest features like audio and file system support.",{"type":17,"tag":25,"props":261,"children":262},{},[263,265,270],{"type":23,"value":264},"To start your script with the native Astro-8 emulator, add the ",{"type":17,"tag":171,"props":266,"children":267},{"className":7},[268],{"type":23,"value":269},"-n",{"type":23,"value":271}," flag in the run command:",{"type":17,"tag":273,"props":274,"children":278},"pre",{"className":275,"code":276,"language":277,"meta":7,"style":7},"language-bash shiki shiki-themes github-light github-dark","yabal run program.yabal -n\n","bash",[279],{"type":17,"tag":171,"props":280,"children":281},{"__ignoreMap":7},[282],{"type":17,"tag":283,"props":284,"children":287},"span",{"class":285,"line":286},"line",1,[288,293,299,304],{"type":17,"tag":283,"props":289,"children":291},{"style":290},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[292],{"type":23,"value":134},{"type":17,"tag":283,"props":294,"children":296},{"style":295},"--shiki-default:#032F62;--shiki-dark:#9ECBFF",[297],{"type":23,"value":298}," run",{"type":17,"tag":283,"props":300,"children":301},{"style":295},[302],{"type":23,"value":303}," program.yabal",{"type":17,"tag":283,"props":305,"children":307},{"style":306},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[308],{"type":23,"value":309}," -n\n",{"type":17,"tag":25,"props":311,"children":312},{},[313,315,320],{"type":23,"value":314},"If you want to pass arguments to the native emulator, add ",{"type":17,"tag":171,"props":316,"children":317},{"className":7},[318],{"type":23,"value":319},"--",{"type":23,"value":321}," and move the file name to the end of the command. After that, you can pass arguments to the emulator:",{"type":17,"tag":273,"props":323,"children":325},{"className":275,"code":324,"language":277,"meta":7,"style":7},"yabal run -n -- program.yabal -f 1000\n",[326],{"type":17,"tag":171,"props":327,"children":328},{"__ignoreMap":7},[329],{"type":17,"tag":283,"props":330,"children":331},{"class":285,"line":286},[332,336,340,345,350,354,359],{"type":17,"tag":283,"props":333,"children":334},{"style":290},[335],{"type":23,"value":134},{"type":17,"tag":283,"props":337,"children":338},{"style":295},[339],{"type":23,"value":298},{"type":17,"tag":283,"props":341,"children":342},{"style":306},[343],{"type":23,"value":344}," -n",{"type":17,"tag":283,"props":346,"children":347},{"style":306},[348],{"type":23,"value":349}," --",{"type":17,"tag":283,"props":351,"children":352},{"style":295},[353],{"type":23,"value":303},{"type":17,"tag":283,"props":355,"children":356},{"style":306},[357],{"type":23,"value":358}," -f",{"type":17,"tag":283,"props":360,"children":361},{"style":306},[362],{"type":23,"value":363}," 1000\n",{"type":17,"tag":25,"props":365,"children":366},{},[367,369,376],{"type":23,"value":368},"For all the options of the native emulator, ",{"type":17,"tag":31,"props":370,"children":373},{"href":371,"rel":372},"https://sam-astro.github.io/Astro8-Computer/docs/Usage.html#emulator",[35],[374],{"type":23,"value":375},"see the documentation",{"type":23,"value":377},".",{"type":17,"tag":132,"props":379,"children":381},{"id":380},"built-in-emulator",[382],{"type":23,"value":383},"Built-in emulator",{"type":17,"tag":25,"props":385,"children":386},{},[387],{"type":23,"value":388},"If you don't want to install the Astro-8 emulator, you can use the built-in emulator instead. However, the built-in emulator is not as feature-rich as the native emulator.",{"type":17,"tag":25,"props":390,"children":391},{},[392],{"type":23,"value":393},"To start your program with the built-in emulator, run the following command:",{"type":17,"tag":273,"props":395,"children":397},{"className":275,"code":396,"language":277,"meta":7,"style":7},"yabal run program.yabal\n",[398],{"type":17,"tag":171,"props":399,"children":400},{"__ignoreMap":7},[401],{"type":17,"tag":283,"props":402,"children":403},{"class":285,"line":286},[404,408,412],{"type":17,"tag":283,"props":405,"children":406},{"style":290},[407],{"type":23,"value":134},{"type":17,"tag":283,"props":409,"children":410},{"style":295},[411],{"type":23,"value":298},{"type":17,"tag":283,"props":413,"children":414},{"style":295},[415],{"type":23,"value":416}," program.yabal\n",{"type":17,"tag":418,"props":419,"children":420},"style",{},[421],{"type":23,"value":422},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":47,"depth":47,"links":424},[425,426],{"id":233,"depth":47,"text":236},{"id":380,"depth":47,"text":383},"content:docs:2.get-started:2.emulator.md","docs/2.get-started/2.emulator.md",{"_path":71,"_dir":44,"_draft":6,"_partial":6,"_locale":7,"title":70,"description":430,"tags":431,"navigation":432,"body":433,"_type":49,"_id":1793,"_source":51,"_file":1794,"_extension":53},"Learn about the basics of Yabal.",[44],{"sidebar":65},{"type":14,"children":434,"toc":1779},[435,440,445,451,456,461,473,489,508,540,546,551,556,709,715,726,757,781,841,847,858,882,888,893,916,921,1091,1097,1115,1120,1126,1131,1142,1168,1178,1213,1225,1258,1264,1269,1274,1301,1306,1352,1357,1404,1410,1415,1449,1461,1473,1555,1573,1584,1627,1633,1648,1659,1775],{"type":17,"tag":18,"props":436,"children":438},{"id":437},"basics-of-yabal",[439],{"type":23,"value":70},{"type":17,"tag":25,"props":441,"children":442},{},[443],{"type":23,"value":444},"This page will teach you the basics of Yabal.",{"type":17,"tag":132,"props":446,"children":448},{"id":447},"comments",[449],{"type":23,"value":450},"Comments",{"type":17,"tag":25,"props":452,"children":453},{},[454],{"type":23,"value":455},"Comments are used to add notes to your code. They are ignored by the compiler.",{"type":17,"tag":25,"props":457,"children":458},{},[459],{"type":23,"value":460},"There are two types of comments in Yabal: single-line comments and multi-line comments.",{"type":17,"tag":25,"props":462,"children":463},{},[464,466,471],{"type":23,"value":465},"Single-line comments start with ",{"type":17,"tag":171,"props":467,"children":468},{"className":7},[469],{"type":23,"value":470},"//",{"type":23,"value":472}," and end at the end of the line:",{"type":17,"tag":273,"props":474,"children":477},{"className":475,"code":476,"language":134,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","// This is a single-line comment\n",[478],{"type":17,"tag":171,"props":479,"children":480},{"__ignoreMap":7},[481],{"type":17,"tag":283,"props":482,"children":483},{"class":285,"line":286},[484],{"type":17,"tag":283,"props":485,"children":487},{"style":486},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[488],{"type":23,"value":476},{"type":17,"tag":25,"props":490,"children":491},{},[492,494,499,501,506],{"type":23,"value":493},"Multi-line comments start with ",{"type":17,"tag":171,"props":495,"children":496},{"className":7},[497],{"type":23,"value":498},"/*",{"type":23,"value":500}," and end with ",{"type":17,"tag":171,"props":502,"children":503},{"className":7},[504],{"type":23,"value":505},"*/",{"type":23,"value":507},":",{"type":17,"tag":273,"props":509,"children":511},{"className":475,"code":510,"language":134,"meta":7,"style":7},"/*\nThis is a multi-line comment\n*/\n",[512],{"type":17,"tag":171,"props":513,"children":514},{"__ignoreMap":7},[515,523,531],{"type":17,"tag":283,"props":516,"children":517},{"class":285,"line":286},[518],{"type":17,"tag":283,"props":519,"children":520},{"style":486},[521],{"type":23,"value":522},"/*\n",{"type":17,"tag":283,"props":524,"children":525},{"class":285,"line":47},[526],{"type":17,"tag":283,"props":527,"children":528},{"style":486},[529],{"type":23,"value":530},"This is a multi-line comment\n",{"type":17,"tag":283,"props":532,"children":534},{"class":285,"line":533},3,[535],{"type":17,"tag":283,"props":536,"children":537},{"style":486},[538],{"type":23,"value":539},"*/\n",{"type":17,"tag":132,"props":541,"children":543},{"id":542},"types",[544],{"type":23,"value":545},"Types",{"type":17,"tag":25,"props":547,"children":548},{},[549],{"type":23,"value":550},"Yabal is a statically typed language. An statically typed language means that the type of a variable is known at compile time. This is in contrast to a dynamically typed language (like JavaScript), where the type of a variable is only known at runtime.",{"type":17,"tag":25,"props":552,"children":553},{},[554],{"type":23,"value":555},"Yabal has the following types:",{"type":17,"tag":557,"props":558,"children":559},"table",{},[560,579],{"type":17,"tag":561,"props":562,"children":563},"thead",{},[564],{"type":17,"tag":565,"props":566,"children":567},"tr",{},[568,574],{"type":17,"tag":569,"props":570,"children":571},"th",{},[572],{"type":23,"value":573},"Type",{"type":17,"tag":569,"props":575,"children":576},{},[577],{"type":23,"value":578},"Description",{"type":17,"tag":580,"props":581,"children":582},"tbody",{},[583,600,630,660,687],{"type":17,"tag":565,"props":584,"children":585},{},[586,595],{"type":17,"tag":587,"props":588,"children":589},"td",{},[590],{"type":17,"tag":171,"props":591,"children":592},{"className":7},[593],{"type":23,"value":594},"int",{"type":17,"tag":587,"props":596,"children":597},{},[598],{"type":23,"value":599},"A 16-bit unsigned integer",{"type":17,"tag":565,"props":601,"children":602},{},[603,611],{"type":17,"tag":587,"props":604,"children":605},{},[606],{"type":17,"tag":171,"props":607,"children":608},{"className":7},[609],{"type":23,"value":610},"bool",{"type":17,"tag":587,"props":612,"children":613},{},[614,616,621,623,628],{"type":23,"value":615},"A boolean value (",{"type":17,"tag":171,"props":617,"children":618},{"className":7},[619],{"type":23,"value":620},"true",{"type":23,"value":622}," or ",{"type":17,"tag":171,"props":624,"children":625},{"className":7},[626],{"type":23,"value":627},"false",{"type":23,"value":629},") stored as a 16-bit integer",{"type":17,"tag":565,"props":631,"children":632},{},[633,647],{"type":17,"tag":587,"props":634,"children":635},{},[636,642],{"type":17,"tag":637,"props":638,"children":639},"em",{},[640],{"type":23,"value":641},"type",{"type":17,"tag":171,"props":643,"children":644},{"className":7},[645],{"type":23,"value":646},"[]",{"type":17,"tag":587,"props":648,"children":649},{},[650,652,658],{"type":23,"value":651},"An ",{"type":17,"tag":31,"props":653,"children":655},{"href":654},"#arrays",[656],{"type":23,"value":657},"array",{"type":23,"value":659}," of values of the specified type",{"type":17,"tag":565,"props":661,"children":662},{},[663,682],{"type":17,"tag":587,"props":664,"children":665},{},[666,668,673,675,680],{"type":23,"value":667},"func\u003C",{"type":17,"tag":637,"props":669,"children":670},{},[671],{"type":23,"value":672},"parameters",{"type":23,"value":674},", ",{"type":17,"tag":637,"props":676,"children":677},{},[678],{"type":23,"value":679},"return type",{"type":23,"value":681},">",{"type":17,"tag":587,"props":683,"children":684},{},[685],{"type":23,"value":686},"A function that takes the specified parameters and returns the specified type",{"type":17,"tag":565,"props":688,"children":689},{},[690,698],{"type":17,"tag":587,"props":691,"children":692},{},[693],{"type":17,"tag":637,"props":694,"children":695},{},[696],{"type":23,"value":697},"UserDefined",{"type":17,"tag":587,"props":699,"children":700},{},[701,703],{"type":23,"value":702},"An user-defined ",{"type":17,"tag":31,"props":704,"children":706},{"href":705},"#structs",[707],{"type":23,"value":708},"struct",{"type":17,"tag":710,"props":711,"children":713},"h3",{"id":712},"structs",[714],{"type":23,"value":78},{"type":17,"tag":25,"props":716,"children":717},{},[718,720,725],{"type":23,"value":719},"A struct is a user-defined type. It contains a number of fields, which can be of any ",{"type":17,"tag":31,"props":721,"children":723},{"href":722},"#types",[724],{"type":23,"value":641},{"type":23,"value":377},{"type":17,"tag":25,"props":727,"children":728},{},[729,731,735,737,742,744,749,751,755],{"type":23,"value":730},"Structs are declared using the ",{"type":17,"tag":171,"props":732,"children":733},{"className":7},[734],{"type":23,"value":708},{"type":23,"value":736}," keyword, followed by the name of the struct, and then a block of code surrounded by curly braces (",{"type":17,"tag":171,"props":738,"children":739},{"className":7},[740],{"type":23,"value":741},"{",{"type":23,"value":743}," and ",{"type":17,"tag":171,"props":745,"children":746},{"className":7},[747],{"type":23,"value":748},"}",{"type":23,"value":750},").\nWithin the block of code, you can declare fields by specifying the ",{"type":17,"tag":31,"props":752,"children":753},{"href":722},[754],{"type":23,"value":641},{"type":23,"value":756}," and name of the field.",{"type":17,"tag":25,"props":758,"children":759},{},[760,762,767,769,774,775,780],{"type":23,"value":761},"For example, we declare a struct called ",{"type":17,"tag":171,"props":763,"children":764},{"className":7},[765],{"type":23,"value":766},"Position",{"type":23,"value":768}," with two fields, ",{"type":17,"tag":171,"props":770,"children":771},{"className":7},[772],{"type":23,"value":773},"x",{"type":23,"value":743},{"type":17,"tag":171,"props":776,"children":777},{"className":7},[778],{"type":23,"value":779},"y",{"type":23,"value":507},{"type":17,"tag":273,"props":782,"children":784},{"className":475,"code":783,"language":134,"meta":7,"style":7},"struct Position {\n    int x\n    int y\n}\n",[785],{"type":17,"tag":171,"props":786,"children":787},{"__ignoreMap":7},[788,807,820,832],{"type":17,"tag":283,"props":789,"children":790},{"class":285,"line":286},[791,796,801],{"type":17,"tag":283,"props":792,"children":794},{"style":793},"--shiki-default:#D73A49;--shiki-dark:#F97583",[795],{"type":23,"value":708},{"type":17,"tag":283,"props":797,"children":798},{"style":290},[799],{"type":23,"value":800}," Position",{"type":17,"tag":283,"props":802,"children":804},{"style":803},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[805],{"type":23,"value":806}," {\n",{"type":17,"tag":283,"props":808,"children":809},{"class":285,"line":47},[810,815],{"type":17,"tag":283,"props":811,"children":812},{"style":793},[813],{"type":23,"value":814},"    int",{"type":17,"tag":283,"props":816,"children":817},{"style":803},[818],{"type":23,"value":819}," x\n",{"type":17,"tag":283,"props":821,"children":822},{"class":285,"line":533},[823,827],{"type":17,"tag":283,"props":824,"children":825},{"style":793},[826],{"type":23,"value":814},{"type":17,"tag":283,"props":828,"children":829},{"style":803},[830],{"type":23,"value":831}," y\n",{"type":17,"tag":283,"props":833,"children":835},{"class":285,"line":834},4,[836],{"type":17,"tag":283,"props":837,"children":838},{"style":803},[839],{"type":23,"value":840},"}\n",{"type":17,"tag":710,"props":842,"children":844},{"id":843},"arrays",[845],{"type":23,"value":846},"Arrays",{"type":17,"tag":25,"props":848,"children":849},{},[850,852,856],{"type":23,"value":851},"An array is a collection of values of the same type. Arrays are declared using the ",{"type":17,"tag":171,"props":853,"children":854},{"className":7},[855],{"type":23,"value":646},{"type":23,"value":857}," operator:",{"type":17,"tag":273,"props":859,"children":861},{"className":475,"code":860,"language":134,"meta":7,"style":7},"int[] numbers // An array of integers\n",[862],{"type":17,"tag":171,"props":863,"children":864},{"__ignoreMap":7},[865],{"type":17,"tag":283,"props":866,"children":867},{"class":285,"line":286},[868,872,877],{"type":17,"tag":283,"props":869,"children":870},{"style":793},[871],{"type":23,"value":594},{"type":17,"tag":283,"props":873,"children":874},{"style":803},[875],{"type":23,"value":876},"[] numbers ",{"type":17,"tag":283,"props":878,"children":879},{"style":486},[880],{"type":23,"value":881},"// An array of integers\n",{"type":17,"tag":132,"props":883,"children":885},{"id":884},"statements",[886],{"type":23,"value":887},"Statements",{"type":17,"tag":25,"props":889,"children":890},{},[891],{"type":23,"value":892},"The actual code in a Yabal program is made up of statements. Common statements are variable declarations, declaring functions, calling functions and control flow statements.",{"type":17,"tag":25,"props":894,"children":895},{},[896,898,904,906,910,911,915],{"type":23,"value":897},"A statement can be a single line of code that ends with a new-line or ",{"type":17,"tag":31,"props":899,"children":901},{"href":900},"#semi-colons",[902],{"type":23,"value":903},"semi-colon",{"type":23,"value":905},". A statement can also be multiple lines of code surrounded by curly braces (",{"type":17,"tag":171,"props":907,"children":908},{"className":7},[909],{"type":23,"value":741},{"type":23,"value":743},{"type":17,"tag":171,"props":912,"children":913},{"className":7},[914],{"type":23,"value":748},{"type":23,"value":184},{"type":17,"tag":25,"props":917,"children":918},{},[919],{"type":23,"value":920},"The following code shows an example of a block of code:",{"type":17,"tag":273,"props":922,"children":925},{"className":475,"code":923,"filename":924,"language":134,"meta":7,"style":7},"// Variable declaration statement\nint variable\n\n// Assignment statement\nvariable = 0\n\n// If statement that contains multiple statements\nif (variable == 0) {\n    // Assignment statement\n    variable = 1\n\n    // Expression statement (postfix increment)\n    variable++\n}\n","run",[926],{"type":17,"tag":171,"props":927,"children":928},{"__ignoreMap":7},[929,937,949,957,965,984,992,1001,1025,1034,1052,1060,1069,1083],{"type":17,"tag":283,"props":930,"children":931},{"class":285,"line":286},[932],{"type":17,"tag":283,"props":933,"children":934},{"style":486},[935],{"type":23,"value":936},"// Variable declaration statement\n",{"type":17,"tag":283,"props":938,"children":939},{"class":285,"line":47},[940,944],{"type":17,"tag":283,"props":941,"children":942},{"style":793},[943],{"type":23,"value":594},{"type":17,"tag":283,"props":945,"children":946},{"style":803},[947],{"type":23,"value":948}," variable\n",{"type":17,"tag":283,"props":950,"children":951},{"class":285,"line":533},[952],{"type":17,"tag":283,"props":953,"children":954},{"emptyLinePlaceholder":65},[955],{"type":23,"value":956},"\n",{"type":17,"tag":283,"props":958,"children":959},{"class":285,"line":834},[960],{"type":17,"tag":283,"props":961,"children":962},{"style":486},[963],{"type":23,"value":964},"// Assignment statement\n",{"type":17,"tag":283,"props":966,"children":968},{"class":285,"line":967},5,[969,974,979],{"type":17,"tag":283,"props":970,"children":971},{"style":803},[972],{"type":23,"value":973},"variable ",{"type":17,"tag":283,"props":975,"children":976},{"style":793},[977],{"type":23,"value":978},"=",{"type":17,"tag":283,"props":980,"children":981},{"style":306},[982],{"type":23,"value":983}," 0\n",{"type":17,"tag":283,"props":985,"children":987},{"class":285,"line":986},6,[988],{"type":17,"tag":283,"props":989,"children":990},{"emptyLinePlaceholder":65},[991],{"type":23,"value":956},{"type":17,"tag":283,"props":993,"children":995},{"class":285,"line":994},7,[996],{"type":17,"tag":283,"props":997,"children":998},{"style":486},[999],{"type":23,"value":1000},"// If statement that contains multiple statements\n",{"type":17,"tag":283,"props":1002,"children":1004},{"class":285,"line":1003},8,[1005,1010,1015,1020],{"type":17,"tag":283,"props":1006,"children":1007},{"style":793},[1008],{"type":23,"value":1009},"if",{"type":17,"tag":283,"props":1011,"children":1012},{"style":803},[1013],{"type":23,"value":1014}," (variable == ",{"type":17,"tag":283,"props":1016,"children":1017},{"style":306},[1018],{"type":23,"value":1019},"0",{"type":17,"tag":283,"props":1021,"children":1022},{"style":803},[1023],{"type":23,"value":1024},") {\n",{"type":17,"tag":283,"props":1026,"children":1028},{"class":285,"line":1027},9,[1029],{"type":17,"tag":283,"props":1030,"children":1031},{"style":486},[1032],{"type":23,"value":1033},"    // Assignment statement\n",{"type":17,"tag":283,"props":1035,"children":1037},{"class":285,"line":1036},10,[1038,1043,1047],{"type":17,"tag":283,"props":1039,"children":1040},{"style":803},[1041],{"type":23,"value":1042},"    variable ",{"type":17,"tag":283,"props":1044,"children":1045},{"style":793},[1046],{"type":23,"value":978},{"type":17,"tag":283,"props":1048,"children":1049},{"style":306},[1050],{"type":23,"value":1051}," 1\n",{"type":17,"tag":283,"props":1053,"children":1055},{"class":285,"line":1054},11,[1056],{"type":17,"tag":283,"props":1057,"children":1058},{"emptyLinePlaceholder":65},[1059],{"type":23,"value":956},{"type":17,"tag":283,"props":1061,"children":1063},{"class":285,"line":1062},12,[1064],{"type":17,"tag":283,"props":1065,"children":1066},{"style":486},[1067],{"type":23,"value":1068},"    // Expression statement (postfix increment)\n",{"type":17,"tag":283,"props":1070,"children":1072},{"class":285,"line":1071},13,[1073,1078],{"type":17,"tag":283,"props":1074,"children":1075},{"style":803},[1076],{"type":23,"value":1077},"    variable",{"type":17,"tag":283,"props":1079,"children":1080},{"style":793},[1081],{"type":23,"value":1082},"++\n",{"type":17,"tag":283,"props":1084,"children":1086},{"class":285,"line":1085},14,[1087],{"type":17,"tag":283,"props":1088,"children":1089},{"style":803},[1090],{"type":23,"value":840},{"type":17,"tag":132,"props":1092,"children":1094},{"id":1093},"expressions",[1095],{"type":23,"value":1096},"Expressions",{"type":17,"tag":25,"props":1098,"children":1099},{},[1100,1102,1107,1109,1114],{"type":23,"value":1101},"An expression is a statement that evaluates to a value. For example, ",{"type":17,"tag":171,"props":1103,"children":1104},{"className":7},[1105],{"type":23,"value":1106},"1 + 2",{"type":23,"value":1108}," is an expression that evaluates to ",{"type":17,"tag":171,"props":1110,"children":1111},{"className":7},[1112],{"type":23,"value":1113},"3",{"type":23,"value":377},{"type":17,"tag":25,"props":1116,"children":1117},{},[1118],{"type":23,"value":1119},"Expressions can be used in many places, such as in assignment statements, function calls, and control flow statements.",{"type":17,"tag":132,"props":1121,"children":1123},{"id":1122},"variables",[1124],{"type":23,"value":1125},"Variables",{"type":17,"tag":25,"props":1127,"children":1128},{},[1129],{"type":23,"value":1130},"Variables are used to store values in memory.",{"type":17,"tag":25,"props":1132,"children":1133},{},[1134,1136,1140],{"type":23,"value":1135},"You can declare variable specifying the ",{"type":17,"tag":31,"props":1137,"children":1138},{"href":722},[1139],{"type":23,"value":641},{"type":23,"value":1141}," and name of the variable:",{"type":17,"tag":273,"props":1143,"children":1145},{"className":475,"code":1144,"language":134,"meta":7,"style":7},"// Create an integer variable called \"variable\"\nint variable\n",[1146],{"type":17,"tag":171,"props":1147,"children":1148},{"__ignoreMap":7},[1149,1157],{"type":17,"tag":283,"props":1150,"children":1151},{"class":285,"line":286},[1152],{"type":17,"tag":283,"props":1153,"children":1154},{"style":486},[1155],{"type":23,"value":1156},"// Create an integer variable called \"variable\"\n",{"type":17,"tag":283,"props":1158,"children":1159},{"class":285,"line":47},[1160,1164],{"type":17,"tag":283,"props":1161,"children":1162},{"style":793},[1163],{"type":23,"value":594},{"type":17,"tag":283,"props":1165,"children":1166},{"style":803},[1167],{"type":23,"value":948},{"type":17,"tag":25,"props":1169,"children":1170},{},[1171,1173,1177],{"type":23,"value":1172},"You can also assign a value to a variable when declaring it by using the ",{"type":17,"tag":171,"props":1174,"children":1175},{"className":7},[1176],{"type":23,"value":978},{"type":23,"value":857},{"type":17,"tag":273,"props":1179,"children":1181},{"className":475,"code":1180,"language":134,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nint variable = 1\n",[1182],{"type":17,"tag":171,"props":1183,"children":1184},{"__ignoreMap":7},[1185,1193],{"type":17,"tag":283,"props":1186,"children":1187},{"class":285,"line":286},[1188],{"type":17,"tag":283,"props":1189,"children":1190},{"style":486},[1191],{"type":23,"value":1192},"// Create an integer variable called \"variable\" and assign it the value 1\n",{"type":17,"tag":283,"props":1194,"children":1195},{"class":285,"line":47},[1196,1200,1205,1209],{"type":17,"tag":283,"props":1197,"children":1198},{"style":793},[1199],{"type":23,"value":594},{"type":17,"tag":283,"props":1201,"children":1202},{"style":803},[1203],{"type":23,"value":1204}," variable ",{"type":17,"tag":283,"props":1206,"children":1207},{"style":793},[1208],{"type":23,"value":978},{"type":17,"tag":283,"props":1210,"children":1211},{"style":306},[1212],{"type":23,"value":1051},{"type":17,"tag":25,"props":1214,"children":1215},{},[1216,1218,1223],{"type":23,"value":1217},"It is also possible to let the compiler infer the type of the variable. This is done by using the ",{"type":17,"tag":171,"props":1219,"children":1220},{"className":7},[1221],{"type":23,"value":1222},"var",{"type":23,"value":1224}," keyword.\nThe compiler will look at the value that is assigned to the variable, and infer the type from that:",{"type":17,"tag":273,"props":1226,"children":1228},{"className":475,"code":1227,"language":134,"meta":7,"style":7},"// Create an integer variable called \"variable\" and assign it the value 1\nvar variable = 1\n",[1229],{"type":17,"tag":171,"props":1230,"children":1231},{"__ignoreMap":7},[1232,1239],{"type":17,"tag":283,"props":1233,"children":1234},{"class":285,"line":286},[1235],{"type":17,"tag":283,"props":1236,"children":1237},{"style":486},[1238],{"type":23,"value":1192},{"type":17,"tag":283,"props":1240,"children":1241},{"class":285,"line":47},[1242,1246,1250,1254],{"type":17,"tag":283,"props":1243,"children":1244},{"style":793},[1245],{"type":23,"value":1222},{"type":17,"tag":283,"props":1247,"children":1248},{"style":803},[1249],{"type":23,"value":1204},{"type":17,"tag":283,"props":1251,"children":1252},{"style":793},[1253],{"type":23,"value":978},{"type":17,"tag":283,"props":1255,"children":1256},{"style":306},[1257],{"type":23,"value":1051},{"type":17,"tag":132,"props":1259,"children":1261},{"id":1260},"semi-colons",[1262],{"type":23,"value":1263},"Semi-colons",{"type":17,"tag":25,"props":1265,"children":1266},{},[1267],{"type":23,"value":1268},"Semi-colons can be used to separate statements. They are optional, but are required if you want to put multiple statements on the same line.",{"type":17,"tag":25,"props":1270,"children":1271},{},[1272],{"type":23,"value":1273},"For example, this is valid:",{"type":17,"tag":273,"props":1275,"children":1277},{"className":475,"code":1276,"language":134,"meta":7,"style":7},"int a = 1\n",[1278],{"type":17,"tag":171,"props":1279,"children":1280},{"__ignoreMap":7},[1281],{"type":17,"tag":283,"props":1282,"children":1283},{"class":285,"line":286},[1284,1288,1293,1297],{"type":17,"tag":283,"props":1285,"children":1286},{"style":793},[1287],{"type":23,"value":594},{"type":17,"tag":283,"props":1289,"children":1290},{"style":803},[1291],{"type":23,"value":1292}," a ",{"type":17,"tag":283,"props":1294,"children":1295},{"style":793},[1296],{"type":23,"value":978},{"type":17,"tag":283,"props":1298,"children":1299},{"style":306},[1300],{"type":23,"value":1051},{"type":17,"tag":25,"props":1302,"children":1303},{},[1304],{"type":23,"value":1305},"But this is not, since there are multiple statements on the same line:",{"type":17,"tag":273,"props":1307,"children":1309},{"className":475,"code":1308,"language":134,"meta":7,"style":7},"int a = 1 int b = 2\n",[1310],{"type":17,"tag":171,"props":1311,"children":1312},{"__ignoreMap":7},[1313],{"type":17,"tag":283,"props":1314,"children":1315},{"class":285,"line":286},[1316,1320,1324,1328,1333,1338,1343,1347],{"type":17,"tag":283,"props":1317,"children":1318},{"style":793},[1319],{"type":23,"value":594},{"type":17,"tag":283,"props":1321,"children":1322},{"style":803},[1323],{"type":23,"value":1292},{"type":17,"tag":283,"props":1325,"children":1326},{"style":793},[1327],{"type":23,"value":978},{"type":17,"tag":283,"props":1329,"children":1330},{"style":306},[1331],{"type":23,"value":1332}," 1",{"type":17,"tag":283,"props":1334,"children":1335},{"style":793},[1336],{"type":23,"value":1337}," int",{"type":17,"tag":283,"props":1339,"children":1340},{"style":803},[1341],{"type":23,"value":1342}," b ",{"type":17,"tag":283,"props":1344,"children":1345},{"style":793},[1346],{"type":23,"value":978},{"type":17,"tag":283,"props":1348,"children":1349},{"style":306},[1350],{"type":23,"value":1351}," 2\n",{"type":17,"tag":25,"props":1353,"children":1354},{},[1355],{"type":23,"value":1356},"If you want to put multiple statements on the same line, you can use semi-colons to separate them:",{"type":17,"tag":273,"props":1358,"children":1360},{"className":475,"code":1359,"language":134,"meta":7,"style":7},"int a = 1; int b = 2\n",[1361],{"type":17,"tag":171,"props":1362,"children":1363},{"__ignoreMap":7},[1364],{"type":17,"tag":283,"props":1365,"children":1366},{"class":285,"line":286},[1367,1371,1375,1379,1383,1388,1392,1396,1400],{"type":17,"tag":283,"props":1368,"children":1369},{"style":793},[1370],{"type":23,"value":594},{"type":17,"tag":283,"props":1372,"children":1373},{"style":803},[1374],{"type":23,"value":1292},{"type":17,"tag":283,"props":1376,"children":1377},{"style":793},[1378],{"type":23,"value":978},{"type":17,"tag":283,"props":1380,"children":1381},{"style":306},[1382],{"type":23,"value":1332},{"type":17,"tag":283,"props":1384,"children":1385},{"style":803},[1386],{"type":23,"value":1387},"; ",{"type":17,"tag":283,"props":1389,"children":1390},{"style":793},[1391],{"type":23,"value":594},{"type":17,"tag":283,"props":1393,"children":1394},{"style":803},[1395],{"type":23,"value":1342},{"type":17,"tag":283,"props":1397,"children":1398},{"style":793},[1399],{"type":23,"value":978},{"type":17,"tag":283,"props":1401,"children":1402},{"style":306},[1403],{"type":23,"value":1351},{"type":17,"tag":132,"props":1405,"children":1407},{"id":1406},"functions",[1408],{"type":23,"value":1409},"Functions",{"type":17,"tag":25,"props":1411,"children":1412},{},[1413],{"type":23,"value":1414},"Functions are used to reuse code. When you declare a function with code, you can call it from other places in your code.",{"type":17,"tag":25,"props":1416,"children":1417},{},[1418,1420,1424,1426,1431,1432,1437,1439,1443,1444,1448],{"type":23,"value":1419},"Functions are specified the return ",{"type":17,"tag":31,"props":1421,"children":1422},{"href":722},[1423],{"type":23,"value":641},{"type":23,"value":1425}," and name of the function, followed by the parameters of the function in parentheses (",{"type":17,"tag":171,"props":1427,"children":1428},{"className":7},[1429],{"type":23,"value":1430},"(",{"type":23,"value":743},{"type":17,"tag":171,"props":1433,"children":1434},{"className":7},[1435],{"type":23,"value":1436},")",{"type":23,"value":1438},"), and then a block of code surrounded by curly braces (",{"type":17,"tag":171,"props":1440,"children":1441},{"className":7},[1442],{"type":23,"value":741},{"type":23,"value":743},{"type":17,"tag":171,"props":1445,"children":1446},{"className":7},[1447],{"type":23,"value":748},{"type":23,"value":184},{"type":17,"tag":25,"props":1450,"children":1451},{},[1452,1454,1459],{"type":23,"value":1453},"To return a value from a function, use the ",{"type":17,"tag":171,"props":1455,"children":1456},{"className":7},[1457],{"type":23,"value":1458},"return",{"type":23,"value":1460}," keyword followed by the value to return.",{"type":17,"tag":25,"props":1462,"children":1463},{},[1464,1466,1471],{"type":23,"value":1465},"For example, the following code declares a function called ",{"type":17,"tag":171,"props":1467,"children":1468},{"className":7},[1469],{"type":23,"value":1470},"add",{"type":23,"value":1472}," that takes two integers as parameters and returns an integer:",{"type":17,"tag":273,"props":1474,"children":1476},{"className":475,"code":1475,"language":134,"meta":7,"style":7},"// Declare the add function\n// The function takes two integers (a and b) as parameters and returns an integer\nint add(int a, int b) {\n    return a + b\n}\n",[1477],{"type":17,"tag":171,"props":1478,"children":1479},{"__ignoreMap":7},[1480,1488,1496,1526,1548],{"type":17,"tag":283,"props":1481,"children":1482},{"class":285,"line":286},[1483],{"type":17,"tag":283,"props":1484,"children":1485},{"style":486},[1486],{"type":23,"value":1487},"// Declare the add function\n",{"type":17,"tag":283,"props":1489,"children":1490},{"class":285,"line":47},[1491],{"type":17,"tag":283,"props":1492,"children":1493},{"style":486},[1494],{"type":23,"value":1495},"// The function takes two integers (a and b) as parameters and returns an integer\n",{"type":17,"tag":283,"props":1497,"children":1498},{"class":285,"line":533},[1499,1503,1508,1512,1517,1521],{"type":17,"tag":283,"props":1500,"children":1501},{"style":793},[1502],{"type":23,"value":594},{"type":17,"tag":283,"props":1504,"children":1505},{"style":803},[1506],{"type":23,"value":1507}," add(",{"type":17,"tag":283,"props":1509,"children":1510},{"style":793},[1511],{"type":23,"value":594},{"type":17,"tag":283,"props":1513,"children":1514},{"style":803},[1515],{"type":23,"value":1516}," a, ",{"type":17,"tag":283,"props":1518,"children":1519},{"style":793},[1520],{"type":23,"value":594},{"type":17,"tag":283,"props":1522,"children":1523},{"style":803},[1524],{"type":23,"value":1525}," b) {\n",{"type":17,"tag":283,"props":1527,"children":1528},{"class":285,"line":834},[1529,1534,1538,1543],{"type":17,"tag":283,"props":1530,"children":1531},{"style":793},[1532],{"type":23,"value":1533},"    return",{"type":17,"tag":283,"props":1535,"children":1536},{"style":803},[1537],{"type":23,"value":1292},{"type":17,"tag":283,"props":1539,"children":1540},{"style":793},[1541],{"type":23,"value":1542},"+",{"type":17,"tag":283,"props":1544,"children":1545},{"style":803},[1546],{"type":23,"value":1547}," b\n",{"type":17,"tag":283,"props":1549,"children":1550},{"class":285,"line":967},[1551],{"type":17,"tag":283,"props":1552,"children":1553},{"style":803},[1554],{"type":23,"value":840},{"type":17,"tag":25,"props":1556,"children":1557},{},[1558,1560,1565,1567,1571],{"type":23,"value":1559},"Functions can also be declared without a return type by specifying ",{"type":17,"tag":171,"props":1561,"children":1562},{"className":7},[1563],{"type":23,"value":1564},"void",{"type":23,"value":1566}," as the return type. A function with a return type of ",{"type":17,"tag":171,"props":1568,"children":1569},{"className":7},[1570],{"type":23,"value":1564},{"type":23,"value":1572}," cannot return a value.",{"type":17,"tag":25,"props":1574,"children":1575},{},[1576,1577,1582],{"type":23,"value":1465},{"type":17,"tag":171,"props":1578,"children":1579},{"className":7},[1580],{"type":23,"value":1581},"print",{"type":23,"value":1583}," that takes a int array as a parameter and returns nothing:",{"type":17,"tag":273,"props":1585,"children":1587},{"className":475,"code":1586,"language":134,"meta":7,"style":7},"void print(int[] data) {\n    // Print the value to the screen\n}\n",[1588],{"type":17,"tag":171,"props":1589,"children":1590},{"__ignoreMap":7},[1591,1612,1620],{"type":17,"tag":283,"props":1592,"children":1593},{"class":285,"line":286},[1594,1598,1603,1607],{"type":17,"tag":283,"props":1595,"children":1596},{"style":793},[1597],{"type":23,"value":1564},{"type":17,"tag":283,"props":1599,"children":1600},{"style":803},[1601],{"type":23,"value":1602}," print(",{"type":17,"tag":283,"props":1604,"children":1605},{"style":793},[1606],{"type":23,"value":594},{"type":17,"tag":283,"props":1608,"children":1609},{"style":803},[1610],{"type":23,"value":1611},"[] data) {\n",{"type":17,"tag":283,"props":1613,"children":1614},{"class":285,"line":47},[1615],{"type":17,"tag":283,"props":1616,"children":1617},{"style":486},[1618],{"type":23,"value":1619},"    // Print the value to the screen\n",{"type":17,"tag":283,"props":1621,"children":1622},{"class":285,"line":533},[1623],{"type":17,"tag":283,"props":1624,"children":1625},{"style":803},[1626],{"type":23,"value":840},{"type":17,"tag":710,"props":1628,"children":1630},{"id":1629},"calling-functions",[1631],{"type":23,"value":1632},"Calling functions",{"type":17,"tag":25,"props":1634,"children":1635},{},[1636,1638,1642,1643,1647],{"type":23,"value":1637},"To call a function, use the name of the function followed by the arguments of the function in parentheses (",{"type":17,"tag":171,"props":1639,"children":1640},{"className":7},[1641],{"type":23,"value":1430},{"type":23,"value":743},{"type":17,"tag":171,"props":1644,"children":1645},{"className":7},[1646],{"type":23,"value":1436},{"type":23,"value":184},{"type":17,"tag":25,"props":1649,"children":1650},{},[1651,1653,1657],{"type":23,"value":1652},"For example, the following code calls the ",{"type":17,"tag":171,"props":1654,"children":1655},{"className":7},[1656],{"type":23,"value":1470},{"type":23,"value":1658}," function that we declared earlier:",{"type":17,"tag":273,"props":1660,"children":1663},{"className":475,"code":1661,"filename":924,"highlights":1662,"language":134,"meta":7,"style":7},"// Call the add function and store the result in the \"result\" variable\nint result = add(1, 2)\n\nint add(int a, int b) {\n    return a + b\n}\n",[47],[1664],{"type":17,"tag":171,"props":1665,"children":1666},{"__ignoreMap":7},[1667,1675,1715,1722,1749,1768],{"type":17,"tag":283,"props":1668,"children":1669},{"class":285,"line":286},[1670],{"type":17,"tag":283,"props":1671,"children":1672},{"style":486},[1673],{"type":23,"value":1674},"// Call the add function and store the result in the \"result\" variable\n",{"type":17,"tag":283,"props":1676,"children":1678},{"class":1677,"line":47},"line highlight",[1679,1683,1688,1692,1696,1701,1705,1710],{"type":17,"tag":283,"props":1680,"children":1681},{"style":793},[1682],{"type":23,"value":594},{"type":17,"tag":283,"props":1684,"children":1685},{"style":803},[1686],{"type":23,"value":1687}," result ",{"type":17,"tag":283,"props":1689,"children":1690},{"style":793},[1691],{"type":23,"value":978},{"type":17,"tag":283,"props":1693,"children":1694},{"style":803},[1695],{"type":23,"value":1507},{"type":17,"tag":283,"props":1697,"children":1698},{"style":306},[1699],{"type":23,"value":1700},"1",{"type":17,"tag":283,"props":1702,"children":1703},{"style":803},[1704],{"type":23,"value":674},{"type":17,"tag":283,"props":1706,"children":1707},{"style":306},[1708],{"type":23,"value":1709},"2",{"type":17,"tag":283,"props":1711,"children":1712},{"style":803},[1713],{"type":23,"value":1714},")\n",{"type":17,"tag":283,"props":1716,"children":1717},{"class":285,"line":533},[1718],{"type":17,"tag":283,"props":1719,"children":1720},{"emptyLinePlaceholder":65},[1721],{"type":23,"value":956},{"type":17,"tag":283,"props":1723,"children":1724},{"class":285,"line":834},[1725,1729,1733,1737,1741,1745],{"type":17,"tag":283,"props":1726,"children":1727},{"style":793},[1728],{"type":23,"value":594},{"type":17,"tag":283,"props":1730,"children":1731},{"style":803},[1732],{"type":23,"value":1507},{"type":17,"tag":283,"props":1734,"children":1735},{"style":793},[1736],{"type":23,"value":594},{"type":17,"tag":283,"props":1738,"children":1739},{"style":803},[1740],{"type":23,"value":1516},{"type":17,"tag":283,"props":1742,"children":1743},{"style":793},[1744],{"type":23,"value":594},{"type":17,"tag":283,"props":1746,"children":1747},{"style":803},[1748],{"type":23,"value":1525},{"type":17,"tag":283,"props":1750,"children":1751},{"class":285,"line":967},[1752,1756,1760,1764],{"type":17,"tag":283,"props":1753,"children":1754},{"style":793},[1755],{"type":23,"value":1533},{"type":17,"tag":283,"props":1757,"children":1758},{"style":803},[1759],{"type":23,"value":1292},{"type":17,"tag":283,"props":1761,"children":1762},{"style":793},[1763],{"type":23,"value":1542},{"type":17,"tag":283,"props":1765,"children":1766},{"style":803},[1767],{"type":23,"value":1547},{"type":17,"tag":283,"props":1769,"children":1770},{"class":285,"line":986},[1771],{"type":17,"tag":283,"props":1772,"children":1773},{"style":803},[1774],{"type":23,"value":840},{"type":17,"tag":418,"props":1776,"children":1777},{},[1778],{"type":23,"value":422},{"title":7,"searchDepth":47,"depth":47,"links":1780},[1781,1782,1786,1787,1788,1789,1790],{"id":447,"depth":47,"text":450},{"id":542,"depth":47,"text":545,"children":1783},[1784,1785],{"id":712,"depth":533,"text":78},{"id":843,"depth":533,"text":846},{"id":884,"depth":47,"text":887},{"id":1093,"depth":47,"text":1096},{"id":1122,"depth":47,"text":1125},{"id":1260,"depth":47,"text":1263},{"id":1406,"depth":47,"text":1409,"children":1791},[1792],{"id":1629,"depth":533,"text":1632},"content:docs:2.get-started:3.basics-of-yabal.md","docs/2.get-started/3.basics-of-yabal.md",1702090721948]