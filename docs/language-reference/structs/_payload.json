[{"data":1,"prerenderedAt":1350},["Reactive",2],{"content-query-F8MIrzCjkh":3,"content-navigation-8C37fagqQL":1299},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":11,"body":13,"_type":1294,"_id":1295,"_source":1296,"_file":1297,"_extension":1298},"/docs/language-reference/structs","language-reference",false,"","Structs","Learn more about structs.",[5],{"sidebar":12},true,{"type":14,"children":15,"toc":1286},"root",[16,24,30,101,108,113,246,267,274,279,386,391,503,508,628,634,653,766,771,884,890,902,1033,1039,1044,1280],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"structs",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":31,"props":32,"children":36},"pre",{"className":33,"code":34,"language":35,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[37],{"type":17,"tag":38,"props":39,"children":40},"code",{"__ignoreMap":7},[41,65,79,92],{"type":17,"tag":42,"props":43,"children":46},"span",{"class":44,"line":45},"line",1,[47,53,59],{"type":17,"tag":42,"props":48,"children":50},{"style":49},"--shiki-default:#D73A49;--shiki-dark:#F97583",[51],{"type":23,"value":52},"struct",{"type":17,"tag":42,"props":54,"children":56},{"style":55},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[57],{"type":23,"value":58}," Point",{"type":17,"tag":42,"props":60,"children":62},{"style":61},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[63],{"type":23,"value":64}," {\n",{"type":17,"tag":42,"props":66,"children":68},{"class":44,"line":67},2,[69,74],{"type":17,"tag":42,"props":70,"children":71},{"style":49},[72],{"type":23,"value":73},"    int",{"type":17,"tag":42,"props":75,"children":76},{"style":61},[77],{"type":23,"value":78}," x;\n",{"type":17,"tag":42,"props":80,"children":82},{"class":44,"line":81},3,[83,87],{"type":17,"tag":42,"props":84,"children":85},{"style":49},[86],{"type":23,"value":73},{"type":17,"tag":42,"props":88,"children":89},{"style":61},[90],{"type":23,"value":91}," y;\n",{"type":17,"tag":42,"props":93,"children":95},{"class":44,"line":94},4,[96],{"type":17,"tag":42,"props":97,"children":98},{"style":61},[99],{"type":23,"value":100},"}\n",{"type":17,"tag":102,"props":103,"children":105},"h2",{"id":104},"bit-fields",[106],{"type":23,"value":107},"Bit-fields",{"type":17,"tag":25,"props":109,"children":110},{},[111],{"type":23,"value":112},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":31,"props":114,"children":116},{"className":33,"code":115,"language":35,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[117],{"type":17,"tag":38,"props":118,"children":119},{"__ignoreMap":7},[120,136,164,188,213,238],{"type":17,"tag":42,"props":121,"children":122},{"class":44,"line":45},[123,127,132],{"type":17,"tag":42,"props":124,"children":125},{"style":49},[126],{"type":23,"value":52},{"type":17,"tag":42,"props":128,"children":129},{"style":55},[130],{"type":23,"value":131}," MouseInput",{"type":17,"tag":42,"props":133,"children":134},{"style":61},[135],{"type":23,"value":64},{"type":17,"tag":42,"props":137,"children":138},{"class":44,"line":67},[139,143,148,153,159],{"type":17,"tag":42,"props":140,"children":141},{"style":49},[142],{"type":23,"value":73},{"type":17,"tag":42,"props":144,"children":145},{"style":61},[146],{"type":23,"value":147}," y ",{"type":17,"tag":42,"props":149,"children":150},{"style":49},[151],{"type":23,"value":152},":",{"type":17,"tag":42,"props":154,"children":156},{"style":155},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[157],{"type":23,"value":158}," 7",{"type":17,"tag":42,"props":160,"children":161},{"style":61},[162],{"type":23,"value":163},";\n",{"type":17,"tag":42,"props":165,"children":166},{"class":44,"line":81},[167,171,176,180,184],{"type":17,"tag":42,"props":168,"children":169},{"style":49},[170],{"type":23,"value":73},{"type":17,"tag":42,"props":172,"children":173},{"style":61},[174],{"type":23,"value":175}," x ",{"type":17,"tag":42,"props":177,"children":178},{"style":49},[179],{"type":23,"value":152},{"type":17,"tag":42,"props":181,"children":182},{"style":155},[183],{"type":23,"value":158},{"type":17,"tag":42,"props":185,"children":186},{"style":61},[187],{"type":23,"value":163},{"type":17,"tag":42,"props":189,"children":190},{"class":44,"line":94},[191,195,200,204,209],{"type":17,"tag":42,"props":192,"children":193},{"style":49},[194],{"type":23,"value":73},{"type":17,"tag":42,"props":196,"children":197},{"style":61},[198],{"type":23,"value":199}," left ",{"type":17,"tag":42,"props":201,"children":202},{"style":49},[203],{"type":23,"value":152},{"type":17,"tag":42,"props":205,"children":206},{"style":155},[207],{"type":23,"value":208}," 1",{"type":17,"tag":42,"props":210,"children":211},{"style":61},[212],{"type":23,"value":163},{"type":17,"tag":42,"props":214,"children":216},{"class":44,"line":215},5,[217,221,226,230,234],{"type":17,"tag":42,"props":218,"children":219},{"style":49},[220],{"type":23,"value":73},{"type":17,"tag":42,"props":222,"children":223},{"style":61},[224],{"type":23,"value":225}," right ",{"type":17,"tag":42,"props":227,"children":228},{"style":49},[229],{"type":23,"value":152},{"type":17,"tag":42,"props":231,"children":232},{"style":155},[233],{"type":23,"value":208},{"type":17,"tag":42,"props":235,"children":236},{"style":61},[237],{"type":23,"value":163},{"type":17,"tag":42,"props":239,"children":241},{"class":44,"line":240},6,[242],{"type":17,"tag":42,"props":243,"children":244},{"style":61},[245],{"type":23,"value":100},{"type":17,"tag":247,"props":248,"children":249},"warning",{},[250],{"type":17,"tag":25,"props":251,"children":252},{},[253,259,261,265],{"type":17,"tag":254,"props":255,"children":256},"strong",{},[257],{"type":23,"value":258},"Note:",{"type":23,"value":260}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":262,"props":263,"children":264},"br",{},[],{"type":23,"value":266},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":268,"props":269,"children":271},"h3",{"id":270},"bit-offsets",[272],{"type":23,"value":273},"Bit offsets",{"type":17,"tag":25,"props":275,"children":276},{},[277],{"type":23,"value":278},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":31,"props":280,"children":282},{"className":33,"code":281,"language":35,"meta":7,"style":7},"struct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[283],{"type":17,"tag":38,"props":284,"children":285},{"__ignoreMap":7},[286,302,329,354,379],{"type":17,"tag":42,"props":287,"children":288},{"class":44,"line":45},[289,293,298],{"type":17,"tag":42,"props":290,"children":291},{"style":49},[292],{"type":23,"value":52},{"type":17,"tag":42,"props":294,"children":295},{"style":55},[296],{"type":23,"value":297}," Example",{"type":17,"tag":42,"props":299,"children":300},{"style":61},[301],{"type":23,"value":64},{"type":17,"tag":42,"props":303,"children":304},{"class":44,"line":67},[305,309,314,318,323],{"type":17,"tag":42,"props":306,"children":307},{"style":49},[308],{"type":23,"value":73},{"type":17,"tag":42,"props":310,"children":311},{"style":61},[312],{"type":23,"value":313}," a ",{"type":17,"tag":42,"props":315,"children":316},{"style":49},[317],{"type":23,"value":152},{"type":17,"tag":42,"props":319,"children":320},{"style":155},[321],{"type":23,"value":322}," 8",{"type":17,"tag":42,"props":324,"children":326},{"style":325},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[327],{"type":23,"value":328}," // Offset 0 with 8 bits\n",{"type":17,"tag":42,"props":330,"children":331},{"class":44,"line":81},[332,336,341,345,349],{"type":17,"tag":42,"props":333,"children":334},{"style":49},[335],{"type":23,"value":73},{"type":17,"tag":42,"props":337,"children":338},{"style":61},[339],{"type":23,"value":340}," b ",{"type":17,"tag":42,"props":342,"children":343},{"style":49},[344],{"type":23,"value":152},{"type":17,"tag":42,"props":346,"children":347},{"style":155},[348],{"type":23,"value":322},{"type":17,"tag":42,"props":350,"children":351},{"style":325},[352],{"type":23,"value":353}," // Offset 8 with 8 bits\n",{"type":17,"tag":42,"props":355,"children":356},{"class":44,"line":94},[357,361,366,370,374],{"type":17,"tag":42,"props":358,"children":359},{"style":49},[360],{"type":23,"value":73},{"type":17,"tag":42,"props":362,"children":363},{"style":61},[364],{"type":23,"value":365}," c ",{"type":17,"tag":42,"props":367,"children":368},{"style":49},[369],{"type":23,"value":152},{"type":17,"tag":42,"props":371,"children":372},{"style":155},[373],{"type":23,"value":322},{"type":17,"tag":42,"props":375,"children":376},{"style":325},[377],{"type":23,"value":378}," // Offset 16 with 8 bits\n",{"type":17,"tag":42,"props":380,"children":381},{"class":44,"line":215},[382],{"type":17,"tag":42,"props":383,"children":384},{"style":61},[385],{"type":23,"value":100},{"type":17,"tag":25,"props":387,"children":388},{},[389],{"type":23,"value":390},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":31,"props":392,"children":395},{"className":33,"code":393,"highlights":394,"language":35,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[215],[396],{"type":17,"tag":38,"props":397,"children":398},{"__ignoreMap":7},[399,407,423,447,471,496],{"type":17,"tag":42,"props":400,"children":401},{"class":44,"line":45},[402],{"type":17,"tag":42,"props":403,"children":404},{"style":325},[405],{"type":23,"value":406},"// Note: the following example will not compile\n",{"type":17,"tag":42,"props":408,"children":409},{"class":44,"line":67},[410,414,419],{"type":17,"tag":42,"props":411,"children":412},{"style":49},[413],{"type":23,"value":52},{"type":17,"tag":42,"props":415,"children":416},{"style":55},[417],{"type":23,"value":418}," InvalidExample",{"type":17,"tag":42,"props":420,"children":421},{"style":61},[422],{"type":23,"value":64},{"type":17,"tag":42,"props":424,"children":425},{"class":44,"line":81},[426,430,434,438,442],{"type":17,"tag":42,"props":427,"children":428},{"style":49},[429],{"type":23,"value":73},{"type":17,"tag":42,"props":431,"children":432},{"style":61},[433],{"type":23,"value":313},{"type":17,"tag":42,"props":435,"children":436},{"style":49},[437],{"type":23,"value":152},{"type":17,"tag":42,"props":439,"children":440},{"style":155},[441],{"type":23,"value":158},{"type":17,"tag":42,"props":443,"children":444},{"style":325},[445],{"type":23,"value":446}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":42,"props":448,"children":449},{"class":44,"line":94},[450,454,458,462,466],{"type":17,"tag":42,"props":451,"children":452},{"style":49},[453],{"type":23,"value":73},{"type":17,"tag":42,"props":455,"children":456},{"style":61},[457],{"type":23,"value":340},{"type":17,"tag":42,"props":459,"children":460},{"style":49},[461],{"type":23,"value":152},{"type":17,"tag":42,"props":463,"children":464},{"style":155},[465],{"type":23,"value":158},{"type":17,"tag":42,"props":467,"children":468},{"style":325},[469],{"type":23,"value":470}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":42,"props":472,"children":474},{"class":473,"line":215},"line highlight",[475,479,483,487,491],{"type":17,"tag":42,"props":476,"children":477},{"style":49},[478],{"type":23,"value":73},{"type":17,"tag":42,"props":480,"children":481},{"style":61},[482],{"type":23,"value":365},{"type":17,"tag":42,"props":484,"children":485},{"style":49},[486],{"type":23,"value":152},{"type":17,"tag":42,"props":488,"children":489},{"style":155},[490],{"type":23,"value":158},{"type":17,"tag":42,"props":492,"children":493},{"style":325},[494],{"type":23,"value":495}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":42,"props":497,"children":498},{"class":44,"line":240},[499],{"type":17,"tag":42,"props":500,"children":501},{"style":61},[502],{"type":23,"value":100},{"type":17,"tag":25,"props":504,"children":505},{},[506],{"type":23,"value":507},"When a normal field is introduced, the offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":31,"props":509,"children":512},{"className":33,"code":510,"highlights":511,"language":35,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[94],[513],{"type":17,"tag":38,"props":514,"children":515},{"__ignoreMap":7},[516,531,555,579,596,621],{"type":17,"tag":42,"props":517,"children":518},{"class":44,"line":45},[519,523,527],{"type":17,"tag":42,"props":520,"children":521},{"style":49},[522],{"type":23,"value":52},{"type":17,"tag":42,"props":524,"children":525},{"style":55},[526],{"type":23,"value":297},{"type":17,"tag":42,"props":528,"children":529},{"style":61},[530],{"type":23,"value":64},{"type":17,"tag":42,"props":532,"children":533},{"class":44,"line":67},[534,538,542,546,550],{"type":17,"tag":42,"props":535,"children":536},{"style":49},[537],{"type":23,"value":73},{"type":17,"tag":42,"props":539,"children":540},{"style":61},[541],{"type":23,"value":313},{"type":17,"tag":42,"props":543,"children":544},{"style":49},[545],{"type":23,"value":152},{"type":17,"tag":42,"props":547,"children":548},{"style":155},[549],{"type":23,"value":158},{"type":17,"tag":42,"props":551,"children":552},{"style":325},[553],{"type":23,"value":554},"   //          Offset 0,    7 bits\n",{"type":17,"tag":42,"props":556,"children":557},{"class":44,"line":81},[558,562,566,570,574],{"type":17,"tag":42,"props":559,"children":560},{"style":49},[561],{"type":23,"value":73},{"type":17,"tag":42,"props":563,"children":564},{"style":61},[565],{"type":23,"value":340},{"type":17,"tag":42,"props":567,"children":568},{"style":49},[569],{"type":23,"value":152},{"type":17,"tag":42,"props":571,"children":572},{"style":155},[573],{"type":23,"value":158},{"type":17,"tag":42,"props":575,"children":576},{"style":325},[577],{"type":23,"value":578},"   //          Offset 7,    7 bits\n",{"type":17,"tag":42,"props":580,"children":581},{"class":473,"line":94},[582,586,591],{"type":17,"tag":42,"props":583,"children":584},{"style":49},[585],{"type":23,"value":73},{"type":17,"tag":42,"props":587,"children":588},{"style":61},[589],{"type":23,"value":590}," c       ",{"type":17,"tag":42,"props":592,"children":593},{"style":325},[594],{"type":23,"value":595},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":42,"props":597,"children":598},{"class":44,"line":215},[599,603,608,612,616],{"type":17,"tag":42,"props":600,"children":601},{"style":49},[602],{"type":23,"value":73},{"type":17,"tag":42,"props":604,"children":605},{"style":61},[606],{"type":23,"value":607}," d ",{"type":17,"tag":42,"props":609,"children":610},{"style":49},[611],{"type":23,"value":152},{"type":17,"tag":42,"props":613,"children":614},{"style":155},[615],{"type":23,"value":158},{"type":17,"tag":42,"props":617,"children":618},{"style":325},[619],{"type":23,"value":620},"   //          Offset 32,   7 bits\n",{"type":17,"tag":42,"props":622,"children":623},{"class":44,"line":240},[624],{"type":17,"tag":42,"props":625,"children":626},{"style":61},[627],{"type":23,"value":100},{"type":17,"tag":102,"props":629,"children":631},{"id":630},"initializing-structs",[632],{"type":23,"value":633},"Initializing structs",{"type":17,"tag":25,"props":635,"children":636},{},[637,639,644,646,651],{"type":23,"value":638},"Structs can be initialized by using curly braces (",{"type":17,"tag":38,"props":640,"children":641},{"className":7},[642],{"type":23,"value":643},"{",{"type":23,"value":645}," and ",{"type":17,"tag":38,"props":647,"children":648},{"className":7},[649],{"type":23,"value":650},"}",{"type":23,"value":652},") to specify the values of the fields. For example:",{"type":17,"tag":31,"props":654,"children":659},{"className":33,"code":655,"filename":656,"highlights":657,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[658],7,[660],{"type":17,"tag":38,"props":661,"children":662},{"__ignoreMap":7},[663,678,689,700,707,715,723],{"type":17,"tag":42,"props":664,"children":665},{"class":44,"line":45},[666,670,674],{"type":17,"tag":42,"props":667,"children":668},{"style":49},[669],{"type":23,"value":52},{"type":17,"tag":42,"props":671,"children":672},{"style":55},[673],{"type":23,"value":58},{"type":17,"tag":42,"props":675,"children":676},{"style":61},[677],{"type":23,"value":64},{"type":17,"tag":42,"props":679,"children":680},{"class":44,"line":67},[681,685],{"type":17,"tag":42,"props":682,"children":683},{"style":49},[684],{"type":23,"value":73},{"type":17,"tag":42,"props":686,"children":687},{"style":61},[688],{"type":23,"value":78},{"type":17,"tag":42,"props":690,"children":691},{"class":44,"line":81},[692,696],{"type":17,"tag":42,"props":693,"children":694},{"style":49},[695],{"type":23,"value":73},{"type":17,"tag":42,"props":697,"children":698},{"style":61},[699],{"type":23,"value":91},{"type":17,"tag":42,"props":701,"children":702},{"class":44,"line":94},[703],{"type":17,"tag":42,"props":704,"children":705},{"style":61},[706],{"type":23,"value":100},{"type":17,"tag":42,"props":708,"children":709},{"class":44,"line":215},[710],{"type":17,"tag":42,"props":711,"children":712},{"emptyLinePlaceholder":12},[713],{"type":23,"value":714},"\n",{"type":17,"tag":42,"props":716,"children":717},{"class":44,"line":240},[718],{"type":17,"tag":42,"props":719,"children":720},{"style":325},[721],{"type":23,"value":722},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":42,"props":724,"children":725},{"class":473,"line":658},[726,731,736,741,746,751,756,761],{"type":17,"tag":42,"props":727,"children":728},{"style":55},[729],{"type":23,"value":730},"Point",{"type":17,"tag":42,"props":732,"children":733},{"style":61},[734],{"type":23,"value":735}," point ",{"type":17,"tag":42,"props":737,"children":738},{"style":49},[739],{"type":23,"value":740},"=",{"type":17,"tag":42,"props":742,"children":743},{"style":61},[744],{"type":23,"value":745}," { ",{"type":17,"tag":42,"props":747,"children":748},{"style":155},[749],{"type":23,"value":750},"1",{"type":17,"tag":42,"props":752,"children":753},{"style":61},[754],{"type":23,"value":755},", ",{"type":17,"tag":42,"props":757,"children":758},{"style":155},[759],{"type":23,"value":760},"2",{"type":17,"tag":42,"props":762,"children":763},{"style":61},[764],{"type":23,"value":765}," }\n",{"type":17,"tag":25,"props":767,"children":768},{},[769],{"type":23,"value":770},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":31,"props":772,"children":776},{"className":33,"code":773,"filename":656,"highlights":774,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[775],8,[777],{"type":17,"tag":38,"props":778,"children":779},{"__ignoreMap":7},[780,795,806,817,824,831,839,847],{"type":17,"tag":42,"props":781,"children":782},{"class":44,"line":45},[783,787,791],{"type":17,"tag":42,"props":784,"children":785},{"style":49},[786],{"type":23,"value":52},{"type":17,"tag":42,"props":788,"children":789},{"style":55},[790],{"type":23,"value":58},{"type":17,"tag":42,"props":792,"children":793},{"style":61},[794],{"type":23,"value":64},{"type":17,"tag":42,"props":796,"children":797},{"class":44,"line":67},[798,802],{"type":17,"tag":42,"props":799,"children":800},{"style":49},[801],{"type":23,"value":73},{"type":17,"tag":42,"props":803,"children":804},{"style":61},[805],{"type":23,"value":78},{"type":17,"tag":42,"props":807,"children":808},{"class":44,"line":81},[809,813],{"type":17,"tag":42,"props":810,"children":811},{"style":49},[812],{"type":23,"value":73},{"type":17,"tag":42,"props":814,"children":815},{"style":61},[816],{"type":23,"value":91},{"type":17,"tag":42,"props":818,"children":819},{"class":44,"line":94},[820],{"type":17,"tag":42,"props":821,"children":822},{"style":61},[823],{"type":23,"value":100},{"type":17,"tag":42,"props":825,"children":826},{"class":44,"line":215},[827],{"type":17,"tag":42,"props":828,"children":829},{"emptyLinePlaceholder":12},[830],{"type":23,"value":714},{"type":17,"tag":42,"props":832,"children":833},{"class":44,"line":240},[834],{"type":17,"tag":42,"props":835,"children":836},{"style":325},[837],{"type":23,"value":838},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":42,"props":840,"children":841},{"class":44,"line":658},[842],{"type":17,"tag":42,"props":843,"children":844},{"style":325},[845],{"type":23,"value":846},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":42,"props":848,"children":849},{"class":473,"line":775},[850,854,858,862,867,871,876,880],{"type":17,"tag":42,"props":851,"children":852},{"style":55},[853],{"type":23,"value":730},{"type":17,"tag":42,"props":855,"children":856},{"style":61},[857],{"type":23,"value":735},{"type":17,"tag":42,"props":859,"children":860},{"style":49},[861],{"type":23,"value":740},{"type":17,"tag":42,"props":863,"children":864},{"style":61},[865],{"type":23,"value":866}," { y: ",{"type":17,"tag":42,"props":868,"children":869},{"style":155},[870],{"type":23,"value":760},{"type":17,"tag":42,"props":872,"children":873},{"style":61},[874],{"type":23,"value":875},", x: ",{"type":17,"tag":42,"props":877,"children":878},{"style":155},[879],{"type":23,"value":750},{"type":17,"tag":42,"props":881,"children":882},{"style":61},[883],{"type":23,"value":765},{"type":17,"tag":102,"props":885,"children":887},{"id":886},"accessing-fields",[888],{"type":23,"value":889},"Accessing fields",{"type":17,"tag":25,"props":891,"children":892},{},[893,895,900],{"type":23,"value":894},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":38,"props":896,"children":897},{"className":7},[898],{"type":23,"value":899},".",{"type":23,"value":901},") operator. For example:",{"type":17,"tag":31,"props":903,"children":907},{"className":33,"code":904,"filename":656,"highlights":905,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[906],9,[908],{"type":17,"tag":38,"props":909,"children":910},{"__ignoreMap":7},[911,926,937,948,955,962,997,1004,1012],{"type":17,"tag":42,"props":912,"children":913},{"class":44,"line":45},[914,918,922],{"type":17,"tag":42,"props":915,"children":916},{"style":49},[917],{"type":23,"value":52},{"type":17,"tag":42,"props":919,"children":920},{"style":55},[921],{"type":23,"value":58},{"type":17,"tag":42,"props":923,"children":924},{"style":61},[925],{"type":23,"value":64},{"type":17,"tag":42,"props":927,"children":928},{"class":44,"line":67},[929,933],{"type":17,"tag":42,"props":930,"children":931},{"style":49},[932],{"type":23,"value":73},{"type":17,"tag":42,"props":934,"children":935},{"style":61},[936],{"type":23,"value":78},{"type":17,"tag":42,"props":938,"children":939},{"class":44,"line":81},[940,944],{"type":17,"tag":42,"props":941,"children":942},{"style":49},[943],{"type":23,"value":73},{"type":17,"tag":42,"props":945,"children":946},{"style":61},[947],{"type":23,"value":91},{"type":17,"tag":42,"props":949,"children":950},{"class":44,"line":94},[951],{"type":17,"tag":42,"props":952,"children":953},{"style":61},[954],{"type":23,"value":100},{"type":17,"tag":42,"props":956,"children":957},{"class":44,"line":215},[958],{"type":17,"tag":42,"props":959,"children":960},{"emptyLinePlaceholder":12},[961],{"type":23,"value":714},{"type":17,"tag":42,"props":963,"children":964},{"class":44,"line":240},[965,969,973,977,981,985,989,993],{"type":17,"tag":42,"props":966,"children":967},{"style":55},[968],{"type":23,"value":730},{"type":17,"tag":42,"props":970,"children":971},{"style":61},[972],{"type":23,"value":735},{"type":17,"tag":42,"props":974,"children":975},{"style":49},[976],{"type":23,"value":740},{"type":17,"tag":42,"props":978,"children":979},{"style":61},[980],{"type":23,"value":745},{"type":17,"tag":42,"props":982,"children":983},{"style":155},[984],{"type":23,"value":750},{"type":17,"tag":42,"props":986,"children":987},{"style":61},[988],{"type":23,"value":755},{"type":17,"tag":42,"props":990,"children":991},{"style":155},[992],{"type":23,"value":760},{"type":17,"tag":42,"props":994,"children":995},{"style":61},[996],{"type":23,"value":765},{"type":17,"tag":42,"props":998,"children":999},{"class":44,"line":658},[1000],{"type":17,"tag":42,"props":1001,"children":1002},{"emptyLinePlaceholder":12},[1003],{"type":23,"value":714},{"type":17,"tag":42,"props":1005,"children":1006},{"class":44,"line":775},[1007],{"type":17,"tag":42,"props":1008,"children":1009},{"style":325},[1010],{"type":23,"value":1011},"// Access the x field of the point\n",{"type":17,"tag":42,"props":1013,"children":1014},{"class":473,"line":906},[1015,1020,1024,1028],{"type":17,"tag":42,"props":1016,"children":1017},{"style":49},[1018],{"type":23,"value":1019},"int",{"type":17,"tag":42,"props":1021,"children":1022},{"style":61},[1023],{"type":23,"value":175},{"type":17,"tag":42,"props":1025,"children":1026},{"style":49},[1027],{"type":23,"value":740},{"type":17,"tag":42,"props":1029,"children":1030},{"style":61},[1031],{"type":23,"value":1032}," point.x\n",{"type":17,"tag":102,"props":1034,"children":1036},{"id":1035},"nested-structs",[1037],{"type":23,"value":1038},"Nested structs",{"type":17,"tag":25,"props":1040,"children":1041},{},[1042],{"type":23,"value":1043},"Structs can be nested inside other structs. For example:",{"type":17,"tag":31,"props":1045,"children":1047},{"className":33,"code":1046,"filename":656,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1048],{"type":17,"tag":38,"props":1049,"children":1050},{"__ignoreMap":7},[1051,1066,1077,1088,1095,1102,1118,1131,1143,1150,1158,1180,1207,1234,1242,1250,1259],{"type":17,"tag":42,"props":1052,"children":1053},{"class":44,"line":45},[1054,1058,1062],{"type":17,"tag":42,"props":1055,"children":1056},{"style":49},[1057],{"type":23,"value":52},{"type":17,"tag":42,"props":1059,"children":1060},{"style":55},[1061],{"type":23,"value":58},{"type":17,"tag":42,"props":1063,"children":1064},{"style":61},[1065],{"type":23,"value":64},{"type":17,"tag":42,"props":1067,"children":1068},{"class":44,"line":67},[1069,1073],{"type":17,"tag":42,"props":1070,"children":1071},{"style":49},[1072],{"type":23,"value":73},{"type":17,"tag":42,"props":1074,"children":1075},{"style":61},[1076],{"type":23,"value":78},{"type":17,"tag":42,"props":1078,"children":1079},{"class":44,"line":81},[1080,1084],{"type":17,"tag":42,"props":1081,"children":1082},{"style":49},[1083],{"type":23,"value":73},{"type":17,"tag":42,"props":1085,"children":1086},{"style":61},[1087],{"type":23,"value":91},{"type":17,"tag":42,"props":1089,"children":1090},{"class":44,"line":94},[1091],{"type":17,"tag":42,"props":1092,"children":1093},{"style":61},[1094],{"type":23,"value":100},{"type":17,"tag":42,"props":1096,"children":1097},{"class":44,"line":215},[1098],{"type":17,"tag":42,"props":1099,"children":1100},{"emptyLinePlaceholder":12},[1101],{"type":23,"value":714},{"type":17,"tag":42,"props":1103,"children":1104},{"class":44,"line":240},[1105,1109,1114],{"type":17,"tag":42,"props":1106,"children":1107},{"style":49},[1108],{"type":23,"value":52},{"type":17,"tag":42,"props":1110,"children":1111},{"style":55},[1112],{"type":23,"value":1113}," Rectangle",{"type":17,"tag":42,"props":1115,"children":1116},{"style":61},[1117],{"type":23,"value":64},{"type":17,"tag":42,"props":1119,"children":1120},{"class":44,"line":658},[1121,1126],{"type":17,"tag":42,"props":1122,"children":1123},{"style":55},[1124],{"type":23,"value":1125},"    Point",{"type":17,"tag":42,"props":1127,"children":1128},{"style":61},[1129],{"type":23,"value":1130}," topLeft;\n",{"type":17,"tag":42,"props":1132,"children":1133},{"class":44,"line":775},[1134,1138],{"type":17,"tag":42,"props":1135,"children":1136},{"style":55},[1137],{"type":23,"value":1125},{"type":17,"tag":42,"props":1139,"children":1140},{"style":61},[1141],{"type":23,"value":1142}," bottomRight;\n",{"type":17,"tag":42,"props":1144,"children":1145},{"class":44,"line":906},[1146],{"type":17,"tag":42,"props":1147,"children":1148},{"style":61},[1149],{"type":23,"value":100},{"type":17,"tag":42,"props":1151,"children":1153},{"class":44,"line":1152},10,[1154],{"type":17,"tag":42,"props":1155,"children":1156},{"emptyLinePlaceholder":12},[1157],{"type":23,"value":714},{"type":17,"tag":42,"props":1159,"children":1161},{"class":44,"line":1160},11,[1162,1167,1172,1176],{"type":17,"tag":42,"props":1163,"children":1164},{"style":55},[1165],{"type":23,"value":1166},"Rectangle",{"type":17,"tag":42,"props":1168,"children":1169},{"style":61},[1170],{"type":23,"value":1171}," rectangle ",{"type":17,"tag":42,"props":1173,"children":1174},{"style":49},[1175],{"type":23,"value":740},{"type":17,"tag":42,"props":1177,"children":1178},{"style":61},[1179],{"type":23,"value":64},{"type":17,"tag":42,"props":1181,"children":1183},{"class":44,"line":1182},12,[1184,1189,1193,1198,1202],{"type":17,"tag":42,"props":1185,"children":1186},{"style":61},[1187],{"type":23,"value":1188},"    topLeft: { x: ",{"type":17,"tag":42,"props":1190,"children":1191},{"style":155},[1192],{"type":23,"value":750},{"type":17,"tag":42,"props":1194,"children":1195},{"style":61},[1196],{"type":23,"value":1197},", y: ",{"type":17,"tag":42,"props":1199,"children":1200},{"style":155},[1201],{"type":23,"value":760},{"type":17,"tag":42,"props":1203,"children":1204},{"style":61},[1205],{"type":23,"value":1206}," },\n",{"type":17,"tag":42,"props":1208,"children":1210},{"class":44,"line":1209},13,[1211,1216,1221,1225,1230],{"type":17,"tag":42,"props":1212,"children":1213},{"style":61},[1214],{"type":23,"value":1215},"    bottomRight: { x: ",{"type":17,"tag":42,"props":1217,"children":1218},{"style":155},[1219],{"type":23,"value":1220},"3",{"type":17,"tag":42,"props":1222,"children":1223},{"style":61},[1224],{"type":23,"value":1197},{"type":17,"tag":42,"props":1226,"children":1227},{"style":155},[1228],{"type":23,"value":1229},"4",{"type":17,"tag":42,"props":1231,"children":1232},{"style":61},[1233],{"type":23,"value":765},{"type":17,"tag":42,"props":1235,"children":1237},{"class":44,"line":1236},14,[1238],{"type":17,"tag":42,"props":1239,"children":1240},{"style":61},[1241],{"type":23,"value":100},{"type":17,"tag":42,"props":1243,"children":1245},{"class":44,"line":1244},15,[1246],{"type":17,"tag":42,"props":1247,"children":1248},{"emptyLinePlaceholder":12},[1249],{"type":23,"value":714},{"type":17,"tag":42,"props":1251,"children":1253},{"class":44,"line":1252},16,[1254],{"type":17,"tag":42,"props":1255,"children":1256},{"style":325},[1257],{"type":23,"value":1258},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":42,"props":1260,"children":1262},{"class":44,"line":1261},17,[1263,1267,1271,1275],{"type":17,"tag":42,"props":1264,"children":1265},{"style":49},[1266],{"type":23,"value":1019},{"type":17,"tag":42,"props":1268,"children":1269},{"style":61},[1270],{"type":23,"value":175},{"type":17,"tag":42,"props":1272,"children":1273},{"style":49},[1274],{"type":23,"value":740},{"type":17,"tag":42,"props":1276,"children":1277},{"style":61},[1278],{"type":23,"value":1279}," rectangle.topLeft.x\n",{"type":17,"tag":1281,"props":1282,"children":1283},"style",{},[1284],{"type":23,"value":1285},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":67,"depth":67,"links":1287},[1288,1291,1292,1293],{"id":104,"depth":67,"text":107,"children":1289},[1290],{"id":270,"depth":81,"text":273},{"id":630,"depth":67,"text":633},{"id":886,"depth":67,"text":889},{"id":1035,"depth":67,"text":1038},"markdown","content:docs:3.language-reference:1.structs.md","content","docs/3.language-reference/1.structs.md","md",[1300],{"title":1301,"_path":1302,"children":1303,"root":12},"Documentation","/docs",[1304,1305,1319,1331,1339],{"title":1301,"_path":1302},{"title":1306,"_path":1307,"children":1308,"sidebar":6},"Getting started","/docs/get-started",[1309,1312,1315,1318],{"title":1310,"_path":1311,"sidebar":12},"Downloads","/docs/get-started/downloads",{"title":1313,"_path":1314,"sidebar":12},"Emulator","/docs/get-started/emulator",{"title":1316,"_path":1317,"sidebar":12},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":1306,"_path":1307,"sidebar":6},{"title":1320,"_path":1321,"children":1322,"sidebar":6},"Language reference","/docs/language-reference",[1323,1324,1327,1330],{"title":8,"_path":4,"sidebar":12},{"title":1325,"_path":1326,"sidebar":12},"Function pointers","/docs/language-reference/function-pointer",{"title":1328,"_path":1329,"sidebar":12},"Stack allocations","/docs/language-reference/stack-allocations",{"title":1320,"_path":1321,"sidebar":6},{"title":1332,"_path":1333,"children":1334,"sidebar":6},"Perhipherals","/docs/peripherals",[1335,1338],{"title":1336,"_path":1337,"sidebar":12},"Screen","/docs/peripherals/screen",{"title":1332,"_path":1333,"sidebar":6},{"title":1340,"_path":1341,"children":1342,"sidebar":6},"Advanced topics","/docs/advanced-topics",[1343,1346,1349],{"title":1344,"_path":1345,"sidebar":12},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":1347,"_path":1348,"sidebar":12},"Optimizing","/docs/advanced-topics/optimizing",{"title":1340,"_path":1341,"sidebar":6},1702090721963]