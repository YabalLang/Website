[{"data":1,"prerenderedAt":1351},["Reactive",2],{"content-query-F8MIrzCjkh":3,"content-navigation-8C37fagqQL":1306},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":11,"body":13,"_type":1301,"_id":1302,"_source":1303,"_file":1304,"_extension":1305},"/docs/language-reference/structs","language-reference",false,"","Structs","Learn more about structs.",[5],{"sidebar":12},true,{"type":14,"children":15,"toc":1293},"root",[16,24,30,101,108,113,246,267,274,279,394,399,510,515,635,641,660,773,778,891,897,909,1040,1046,1051,1287],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"structs",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":31,"props":32,"children":36},"pre",{"className":33,"code":34,"language":35,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[37],{"type":17,"tag":38,"props":39,"children":40},"code",{"__ignoreMap":7},[41,65,79,92],{"type":17,"tag":42,"props":43,"children":46},"span",{"class":44,"line":45},"line",1,[47,53,59],{"type":17,"tag":42,"props":48,"children":50},{"style":49},"--shiki-default:#D73A49;--shiki-dark:#F97583",[51],{"type":23,"value":52},"struct",{"type":17,"tag":42,"props":54,"children":56},{"style":55},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[57],{"type":23,"value":58}," Point",{"type":17,"tag":42,"props":60,"children":62},{"style":61},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[63],{"type":23,"value":64}," {\n",{"type":17,"tag":42,"props":66,"children":68},{"class":44,"line":67},2,[69,74],{"type":17,"tag":42,"props":70,"children":71},{"style":49},[72],{"type":23,"value":73},"    int",{"type":17,"tag":42,"props":75,"children":76},{"style":61},[77],{"type":23,"value":78}," x;\n",{"type":17,"tag":42,"props":80,"children":82},{"class":44,"line":81},3,[83,87],{"type":17,"tag":42,"props":84,"children":85},{"style":49},[86],{"type":23,"value":73},{"type":17,"tag":42,"props":88,"children":89},{"style":61},[90],{"type":23,"value":91}," y;\n",{"type":17,"tag":42,"props":93,"children":95},{"class":44,"line":94},4,[96],{"type":17,"tag":42,"props":97,"children":98},{"style":61},[99],{"type":23,"value":100},"}\n",{"type":17,"tag":102,"props":103,"children":105},"h2",{"id":104},"bit-fields",[106],{"type":23,"value":107},"Bit-fields",{"type":17,"tag":25,"props":109,"children":110},{},[111],{"type":23,"value":112},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":31,"props":114,"children":116},{"className":33,"code":115,"language":35,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[117],{"type":17,"tag":38,"props":118,"children":119},{"__ignoreMap":7},[120,136,164,188,213,238],{"type":17,"tag":42,"props":121,"children":122},{"class":44,"line":45},[123,127,132],{"type":17,"tag":42,"props":124,"children":125},{"style":49},[126],{"type":23,"value":52},{"type":17,"tag":42,"props":128,"children":129},{"style":55},[130],{"type":23,"value":131}," MouseInput",{"type":17,"tag":42,"props":133,"children":134},{"style":61},[135],{"type":23,"value":64},{"type":17,"tag":42,"props":137,"children":138},{"class":44,"line":67},[139,143,148,153,159],{"type":17,"tag":42,"props":140,"children":141},{"style":49},[142],{"type":23,"value":73},{"type":17,"tag":42,"props":144,"children":145},{"style":61},[146],{"type":23,"value":147}," y ",{"type":17,"tag":42,"props":149,"children":150},{"style":49},[151],{"type":23,"value":152},":",{"type":17,"tag":42,"props":154,"children":156},{"style":155},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[157],{"type":23,"value":158}," 7",{"type":17,"tag":42,"props":160,"children":161},{"style":61},[162],{"type":23,"value":163},";\n",{"type":17,"tag":42,"props":165,"children":166},{"class":44,"line":81},[167,171,176,180,184],{"type":17,"tag":42,"props":168,"children":169},{"style":49},[170],{"type":23,"value":73},{"type":17,"tag":42,"props":172,"children":173},{"style":61},[174],{"type":23,"value":175}," x ",{"type":17,"tag":42,"props":177,"children":178},{"style":49},[179],{"type":23,"value":152},{"type":17,"tag":42,"props":181,"children":182},{"style":155},[183],{"type":23,"value":158},{"type":17,"tag":42,"props":185,"children":186},{"style":61},[187],{"type":23,"value":163},{"type":17,"tag":42,"props":189,"children":190},{"class":44,"line":94},[191,195,200,204,209],{"type":17,"tag":42,"props":192,"children":193},{"style":49},[194],{"type":23,"value":73},{"type":17,"tag":42,"props":196,"children":197},{"style":61},[198],{"type":23,"value":199}," left ",{"type":17,"tag":42,"props":201,"children":202},{"style":49},[203],{"type":23,"value":152},{"type":17,"tag":42,"props":205,"children":206},{"style":155},[207],{"type":23,"value":208}," 1",{"type":17,"tag":42,"props":210,"children":211},{"style":61},[212],{"type":23,"value":163},{"type":17,"tag":42,"props":214,"children":216},{"class":44,"line":215},5,[217,221,226,230,234],{"type":17,"tag":42,"props":218,"children":219},{"style":49},[220],{"type":23,"value":73},{"type":17,"tag":42,"props":222,"children":223},{"style":61},[224],{"type":23,"value":225}," right ",{"type":17,"tag":42,"props":227,"children":228},{"style":49},[229],{"type":23,"value":152},{"type":17,"tag":42,"props":231,"children":232},{"style":155},[233],{"type":23,"value":208},{"type":17,"tag":42,"props":235,"children":236},{"style":61},[237],{"type":23,"value":163},{"type":17,"tag":42,"props":239,"children":241},{"class":44,"line":240},6,[242],{"type":17,"tag":42,"props":243,"children":244},{"style":61},[245],{"type":23,"value":100},{"type":17,"tag":247,"props":248,"children":249},"warning",{},[250],{"type":17,"tag":25,"props":251,"children":252},{},[253,259,261,265],{"type":17,"tag":254,"props":255,"children":256},"strong",{},[257],{"type":23,"value":258},"Note:",{"type":23,"value":260}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":262,"props":263,"children":264},"br",{},[],{"type":23,"value":266},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":268,"props":269,"children":271},"h3",{"id":270},"bit-offsets",[272],{"type":23,"value":273},"Bit offsets",{"type":17,"tag":25,"props":275,"children":276},{},[277],{"type":23,"value":278},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":31,"props":280,"children":282},{"className":33,"code":281,"language":35,"meta":7,"style":7},"// Note: the following example will not compile\nstruct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[283],{"type":17,"tag":38,"props":284,"children":285},{"__ignoreMap":7},[286,295,311,337,362,387],{"type":17,"tag":42,"props":287,"children":288},{"class":44,"line":45},[289],{"type":17,"tag":42,"props":290,"children":292},{"style":291},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[293],{"type":23,"value":294},"// Note: the following example will not compile\n",{"type":17,"tag":42,"props":296,"children":297},{"class":44,"line":67},[298,302,307],{"type":17,"tag":42,"props":299,"children":300},{"style":49},[301],{"type":23,"value":52},{"type":17,"tag":42,"props":303,"children":304},{"style":55},[305],{"type":23,"value":306}," Example",{"type":17,"tag":42,"props":308,"children":309},{"style":61},[310],{"type":23,"value":64},{"type":17,"tag":42,"props":312,"children":313},{"class":44,"line":81},[314,318,323,327,332],{"type":17,"tag":42,"props":315,"children":316},{"style":49},[317],{"type":23,"value":73},{"type":17,"tag":42,"props":319,"children":320},{"style":61},[321],{"type":23,"value":322}," a ",{"type":17,"tag":42,"props":324,"children":325},{"style":49},[326],{"type":23,"value":152},{"type":17,"tag":42,"props":328,"children":329},{"style":155},[330],{"type":23,"value":331}," 8",{"type":17,"tag":42,"props":333,"children":334},{"style":291},[335],{"type":23,"value":336}," // Offset 0 with 8 bits\n",{"type":17,"tag":42,"props":338,"children":339},{"class":44,"line":94},[340,344,349,353,357],{"type":17,"tag":42,"props":341,"children":342},{"style":49},[343],{"type":23,"value":73},{"type":17,"tag":42,"props":345,"children":346},{"style":61},[347],{"type":23,"value":348}," b ",{"type":17,"tag":42,"props":350,"children":351},{"style":49},[352],{"type":23,"value":152},{"type":17,"tag":42,"props":354,"children":355},{"style":155},[356],{"type":23,"value":331},{"type":17,"tag":42,"props":358,"children":359},{"style":291},[360],{"type":23,"value":361}," // Offset 8 with 8 bits\n",{"type":17,"tag":42,"props":363,"children":364},{"class":44,"line":215},[365,369,374,378,382],{"type":17,"tag":42,"props":366,"children":367},{"style":49},[368],{"type":23,"value":73},{"type":17,"tag":42,"props":370,"children":371},{"style":61},[372],{"type":23,"value":373}," c ",{"type":17,"tag":42,"props":375,"children":376},{"style":49},[377],{"type":23,"value":152},{"type":17,"tag":42,"props":379,"children":380},{"style":155},[381],{"type":23,"value":331},{"type":17,"tag":42,"props":383,"children":384},{"style":291},[385],{"type":23,"value":386}," // Offset 16 with 8 bits\n",{"type":17,"tag":42,"props":388,"children":389},{"class":44,"line":240},[390],{"type":17,"tag":42,"props":391,"children":392},{"style":61},[393],{"type":23,"value":100},{"type":17,"tag":25,"props":395,"children":396},{},[397],{"type":23,"value":398},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":31,"props":400,"children":403},{"className":33,"code":401,"highlights":402,"language":35,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[215],[404],{"type":17,"tag":38,"props":405,"children":406},{"__ignoreMap":7},[407,414,430,454,478,503],{"type":17,"tag":42,"props":408,"children":409},{"class":44,"line":45},[410],{"type":17,"tag":42,"props":411,"children":412},{"style":291},[413],{"type":23,"value":294},{"type":17,"tag":42,"props":415,"children":416},{"class":44,"line":67},[417,421,426],{"type":17,"tag":42,"props":418,"children":419},{"style":49},[420],{"type":23,"value":52},{"type":17,"tag":42,"props":422,"children":423},{"style":55},[424],{"type":23,"value":425}," InvalidExample",{"type":17,"tag":42,"props":427,"children":428},{"style":61},[429],{"type":23,"value":64},{"type":17,"tag":42,"props":431,"children":432},{"class":44,"line":81},[433,437,441,445,449],{"type":17,"tag":42,"props":434,"children":435},{"style":49},[436],{"type":23,"value":73},{"type":17,"tag":42,"props":438,"children":439},{"style":61},[440],{"type":23,"value":322},{"type":17,"tag":42,"props":442,"children":443},{"style":49},[444],{"type":23,"value":152},{"type":17,"tag":42,"props":446,"children":447},{"style":155},[448],{"type":23,"value":158},{"type":17,"tag":42,"props":450,"children":451},{"style":291},[452],{"type":23,"value":453}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":42,"props":455,"children":456},{"class":44,"line":94},[457,461,465,469,473],{"type":17,"tag":42,"props":458,"children":459},{"style":49},[460],{"type":23,"value":73},{"type":17,"tag":42,"props":462,"children":463},{"style":61},[464],{"type":23,"value":348},{"type":17,"tag":42,"props":466,"children":467},{"style":49},[468],{"type":23,"value":152},{"type":17,"tag":42,"props":470,"children":471},{"style":155},[472],{"type":23,"value":158},{"type":17,"tag":42,"props":474,"children":475},{"style":291},[476],{"type":23,"value":477}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":42,"props":479,"children":481},{"class":480,"line":215},"line highlight",[482,486,490,494,498],{"type":17,"tag":42,"props":483,"children":484},{"style":49},[485],{"type":23,"value":73},{"type":17,"tag":42,"props":487,"children":488},{"style":61},[489],{"type":23,"value":373},{"type":17,"tag":42,"props":491,"children":492},{"style":49},[493],{"type":23,"value":152},{"type":17,"tag":42,"props":495,"children":496},{"style":155},[497],{"type":23,"value":158},{"type":17,"tag":42,"props":499,"children":500},{"style":291},[501],{"type":23,"value":502}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":42,"props":504,"children":505},{"class":44,"line":240},[506],{"type":17,"tag":42,"props":507,"children":508},{"style":61},[509],{"type":23,"value":100},{"type":17,"tag":25,"props":511,"children":512},{},[513],{"type":23,"value":514},"When a normal field is introduced, offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":31,"props":516,"children":519},{"className":33,"code":517,"highlights":518,"language":35,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[94],[520],{"type":17,"tag":38,"props":521,"children":522},{"__ignoreMap":7},[523,538,562,586,603,628],{"type":17,"tag":42,"props":524,"children":525},{"class":44,"line":45},[526,530,534],{"type":17,"tag":42,"props":527,"children":528},{"style":49},[529],{"type":23,"value":52},{"type":17,"tag":42,"props":531,"children":532},{"style":55},[533],{"type":23,"value":306},{"type":17,"tag":42,"props":535,"children":536},{"style":61},[537],{"type":23,"value":64},{"type":17,"tag":42,"props":539,"children":540},{"class":44,"line":67},[541,545,549,553,557],{"type":17,"tag":42,"props":542,"children":543},{"style":49},[544],{"type":23,"value":73},{"type":17,"tag":42,"props":546,"children":547},{"style":61},[548],{"type":23,"value":322},{"type":17,"tag":42,"props":550,"children":551},{"style":49},[552],{"type":23,"value":152},{"type":17,"tag":42,"props":554,"children":555},{"style":155},[556],{"type":23,"value":158},{"type":17,"tag":42,"props":558,"children":559},{"style":291},[560],{"type":23,"value":561},"   //          Offset 0,    7 bits\n",{"type":17,"tag":42,"props":563,"children":564},{"class":44,"line":81},[565,569,573,577,581],{"type":17,"tag":42,"props":566,"children":567},{"style":49},[568],{"type":23,"value":73},{"type":17,"tag":42,"props":570,"children":571},{"style":61},[572],{"type":23,"value":348},{"type":17,"tag":42,"props":574,"children":575},{"style":49},[576],{"type":23,"value":152},{"type":17,"tag":42,"props":578,"children":579},{"style":155},[580],{"type":23,"value":158},{"type":17,"tag":42,"props":582,"children":583},{"style":291},[584],{"type":23,"value":585},"   //          Offset 7,    7 bits\n",{"type":17,"tag":42,"props":587,"children":588},{"class":480,"line":94},[589,593,598],{"type":17,"tag":42,"props":590,"children":591},{"style":49},[592],{"type":23,"value":73},{"type":17,"tag":42,"props":594,"children":595},{"style":61},[596],{"type":23,"value":597}," c       ",{"type":17,"tag":42,"props":599,"children":600},{"style":291},[601],{"type":23,"value":602},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":42,"props":604,"children":605},{"class":44,"line":215},[606,610,615,619,623],{"type":17,"tag":42,"props":607,"children":608},{"style":49},[609],{"type":23,"value":73},{"type":17,"tag":42,"props":611,"children":612},{"style":61},[613],{"type":23,"value":614}," d ",{"type":17,"tag":42,"props":616,"children":617},{"style":49},[618],{"type":23,"value":152},{"type":17,"tag":42,"props":620,"children":621},{"style":155},[622],{"type":23,"value":158},{"type":17,"tag":42,"props":624,"children":625},{"style":291},[626],{"type":23,"value":627},"   //          Offset 32,   7 bits\n",{"type":17,"tag":42,"props":629,"children":630},{"class":44,"line":240},[631],{"type":17,"tag":42,"props":632,"children":633},{"style":61},[634],{"type":23,"value":100},{"type":17,"tag":102,"props":636,"children":638},{"id":637},"initializing-structs",[639],{"type":23,"value":640},"Initializing structs",{"type":17,"tag":25,"props":642,"children":643},{},[644,646,651,653,658],{"type":23,"value":645},"Structs can be initialized by using curly braces (",{"type":17,"tag":38,"props":647,"children":648},{"className":7},[649],{"type":23,"value":650},"{",{"type":23,"value":652}," and ",{"type":17,"tag":38,"props":654,"children":655},{"className":7},[656],{"type":23,"value":657},"}",{"type":23,"value":659},") to specify the values of the fields. For example:",{"type":17,"tag":31,"props":661,"children":666},{"className":33,"code":662,"filename":663,"highlights":664,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[665],7,[667],{"type":17,"tag":38,"props":668,"children":669},{"__ignoreMap":7},[670,685,696,707,714,722,730],{"type":17,"tag":42,"props":671,"children":672},{"class":44,"line":45},[673,677,681],{"type":17,"tag":42,"props":674,"children":675},{"style":49},[676],{"type":23,"value":52},{"type":17,"tag":42,"props":678,"children":679},{"style":55},[680],{"type":23,"value":58},{"type":17,"tag":42,"props":682,"children":683},{"style":61},[684],{"type":23,"value":64},{"type":17,"tag":42,"props":686,"children":687},{"class":44,"line":67},[688,692],{"type":17,"tag":42,"props":689,"children":690},{"style":49},[691],{"type":23,"value":73},{"type":17,"tag":42,"props":693,"children":694},{"style":61},[695],{"type":23,"value":78},{"type":17,"tag":42,"props":697,"children":698},{"class":44,"line":81},[699,703],{"type":17,"tag":42,"props":700,"children":701},{"style":49},[702],{"type":23,"value":73},{"type":17,"tag":42,"props":704,"children":705},{"style":61},[706],{"type":23,"value":91},{"type":17,"tag":42,"props":708,"children":709},{"class":44,"line":94},[710],{"type":17,"tag":42,"props":711,"children":712},{"style":61},[713],{"type":23,"value":100},{"type":17,"tag":42,"props":715,"children":716},{"class":44,"line":215},[717],{"type":17,"tag":42,"props":718,"children":719},{"emptyLinePlaceholder":12},[720],{"type":23,"value":721},"\n",{"type":17,"tag":42,"props":723,"children":724},{"class":44,"line":240},[725],{"type":17,"tag":42,"props":726,"children":727},{"style":291},[728],{"type":23,"value":729},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":42,"props":731,"children":732},{"class":480,"line":665},[733,738,743,748,753,758,763,768],{"type":17,"tag":42,"props":734,"children":735},{"style":55},[736],{"type":23,"value":737},"Point",{"type":17,"tag":42,"props":739,"children":740},{"style":61},[741],{"type":23,"value":742}," point ",{"type":17,"tag":42,"props":744,"children":745},{"style":49},[746],{"type":23,"value":747},"=",{"type":17,"tag":42,"props":749,"children":750},{"style":61},[751],{"type":23,"value":752}," { ",{"type":17,"tag":42,"props":754,"children":755},{"style":155},[756],{"type":23,"value":757},"1",{"type":17,"tag":42,"props":759,"children":760},{"style":61},[761],{"type":23,"value":762},", ",{"type":17,"tag":42,"props":764,"children":765},{"style":155},[766],{"type":23,"value":767},"2",{"type":17,"tag":42,"props":769,"children":770},{"style":61},[771],{"type":23,"value":772}," }\n",{"type":17,"tag":25,"props":774,"children":775},{},[776],{"type":23,"value":777},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":31,"props":779,"children":783},{"className":33,"code":780,"filename":663,"highlights":781,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[782],8,[784],{"type":17,"tag":38,"props":785,"children":786},{"__ignoreMap":7},[787,802,813,824,831,838,846,854],{"type":17,"tag":42,"props":788,"children":789},{"class":44,"line":45},[790,794,798],{"type":17,"tag":42,"props":791,"children":792},{"style":49},[793],{"type":23,"value":52},{"type":17,"tag":42,"props":795,"children":796},{"style":55},[797],{"type":23,"value":58},{"type":17,"tag":42,"props":799,"children":800},{"style":61},[801],{"type":23,"value":64},{"type":17,"tag":42,"props":803,"children":804},{"class":44,"line":67},[805,809],{"type":17,"tag":42,"props":806,"children":807},{"style":49},[808],{"type":23,"value":73},{"type":17,"tag":42,"props":810,"children":811},{"style":61},[812],{"type":23,"value":78},{"type":17,"tag":42,"props":814,"children":815},{"class":44,"line":81},[816,820],{"type":17,"tag":42,"props":817,"children":818},{"style":49},[819],{"type":23,"value":73},{"type":17,"tag":42,"props":821,"children":822},{"style":61},[823],{"type":23,"value":91},{"type":17,"tag":42,"props":825,"children":826},{"class":44,"line":94},[827],{"type":17,"tag":42,"props":828,"children":829},{"style":61},[830],{"type":23,"value":100},{"type":17,"tag":42,"props":832,"children":833},{"class":44,"line":215},[834],{"type":17,"tag":42,"props":835,"children":836},{"emptyLinePlaceholder":12},[837],{"type":23,"value":721},{"type":17,"tag":42,"props":839,"children":840},{"class":44,"line":240},[841],{"type":17,"tag":42,"props":842,"children":843},{"style":291},[844],{"type":23,"value":845},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":42,"props":847,"children":848},{"class":44,"line":665},[849],{"type":17,"tag":42,"props":850,"children":851},{"style":291},[852],{"type":23,"value":853},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":42,"props":855,"children":856},{"class":480,"line":782},[857,861,865,869,874,878,883,887],{"type":17,"tag":42,"props":858,"children":859},{"style":55},[860],{"type":23,"value":737},{"type":17,"tag":42,"props":862,"children":863},{"style":61},[864],{"type":23,"value":742},{"type":17,"tag":42,"props":866,"children":867},{"style":49},[868],{"type":23,"value":747},{"type":17,"tag":42,"props":870,"children":871},{"style":61},[872],{"type":23,"value":873}," { y: ",{"type":17,"tag":42,"props":875,"children":876},{"style":155},[877],{"type":23,"value":767},{"type":17,"tag":42,"props":879,"children":880},{"style":61},[881],{"type":23,"value":882},", x: ",{"type":17,"tag":42,"props":884,"children":885},{"style":155},[886],{"type":23,"value":757},{"type":17,"tag":42,"props":888,"children":889},{"style":61},[890],{"type":23,"value":772},{"type":17,"tag":102,"props":892,"children":894},{"id":893},"accessing-fields",[895],{"type":23,"value":896},"Accessing fields",{"type":17,"tag":25,"props":898,"children":899},{},[900,902,907],{"type":23,"value":901},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":38,"props":903,"children":904},{"className":7},[905],{"type":23,"value":906},".",{"type":23,"value":908},") operator. For example:",{"type":17,"tag":31,"props":910,"children":914},{"className":33,"code":911,"filename":663,"highlights":912,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[913],9,[915],{"type":17,"tag":38,"props":916,"children":917},{"__ignoreMap":7},[918,933,944,955,962,969,1004,1011,1019],{"type":17,"tag":42,"props":919,"children":920},{"class":44,"line":45},[921,925,929],{"type":17,"tag":42,"props":922,"children":923},{"style":49},[924],{"type":23,"value":52},{"type":17,"tag":42,"props":926,"children":927},{"style":55},[928],{"type":23,"value":58},{"type":17,"tag":42,"props":930,"children":931},{"style":61},[932],{"type":23,"value":64},{"type":17,"tag":42,"props":934,"children":935},{"class":44,"line":67},[936,940],{"type":17,"tag":42,"props":937,"children":938},{"style":49},[939],{"type":23,"value":73},{"type":17,"tag":42,"props":941,"children":942},{"style":61},[943],{"type":23,"value":78},{"type":17,"tag":42,"props":945,"children":946},{"class":44,"line":81},[947,951],{"type":17,"tag":42,"props":948,"children":949},{"style":49},[950],{"type":23,"value":73},{"type":17,"tag":42,"props":952,"children":953},{"style":61},[954],{"type":23,"value":91},{"type":17,"tag":42,"props":956,"children":957},{"class":44,"line":94},[958],{"type":17,"tag":42,"props":959,"children":960},{"style":61},[961],{"type":23,"value":100},{"type":17,"tag":42,"props":963,"children":964},{"class":44,"line":215},[965],{"type":17,"tag":42,"props":966,"children":967},{"emptyLinePlaceholder":12},[968],{"type":23,"value":721},{"type":17,"tag":42,"props":970,"children":971},{"class":44,"line":240},[972,976,980,984,988,992,996,1000],{"type":17,"tag":42,"props":973,"children":974},{"style":55},[975],{"type":23,"value":737},{"type":17,"tag":42,"props":977,"children":978},{"style":61},[979],{"type":23,"value":742},{"type":17,"tag":42,"props":981,"children":982},{"style":49},[983],{"type":23,"value":747},{"type":17,"tag":42,"props":985,"children":986},{"style":61},[987],{"type":23,"value":752},{"type":17,"tag":42,"props":989,"children":990},{"style":155},[991],{"type":23,"value":757},{"type":17,"tag":42,"props":993,"children":994},{"style":61},[995],{"type":23,"value":762},{"type":17,"tag":42,"props":997,"children":998},{"style":155},[999],{"type":23,"value":767},{"type":17,"tag":42,"props":1001,"children":1002},{"style":61},[1003],{"type":23,"value":772},{"type":17,"tag":42,"props":1005,"children":1006},{"class":44,"line":665},[1007],{"type":17,"tag":42,"props":1008,"children":1009},{"emptyLinePlaceholder":12},[1010],{"type":23,"value":721},{"type":17,"tag":42,"props":1012,"children":1013},{"class":44,"line":782},[1014],{"type":17,"tag":42,"props":1015,"children":1016},{"style":291},[1017],{"type":23,"value":1018},"// Access the x field of the point\n",{"type":17,"tag":42,"props":1020,"children":1021},{"class":480,"line":913},[1022,1027,1031,1035],{"type":17,"tag":42,"props":1023,"children":1024},{"style":49},[1025],{"type":23,"value":1026},"int",{"type":17,"tag":42,"props":1028,"children":1029},{"style":61},[1030],{"type":23,"value":175},{"type":17,"tag":42,"props":1032,"children":1033},{"style":49},[1034],{"type":23,"value":747},{"type":17,"tag":42,"props":1036,"children":1037},{"style":61},[1038],{"type":23,"value":1039}," point.x\n",{"type":17,"tag":102,"props":1041,"children":1043},{"id":1042},"nested-structs",[1044],{"type":23,"value":1045},"Nested structs",{"type":17,"tag":25,"props":1047,"children":1048},{},[1049],{"type":23,"value":1050},"Structs can be nested inside other structs. For example:",{"type":17,"tag":31,"props":1052,"children":1054},{"className":33,"code":1053,"filename":663,"language":35,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1055],{"type":17,"tag":38,"props":1056,"children":1057},{"__ignoreMap":7},[1058,1073,1084,1095,1102,1109,1125,1138,1150,1157,1165,1187,1214,1241,1249,1257,1266],{"type":17,"tag":42,"props":1059,"children":1060},{"class":44,"line":45},[1061,1065,1069],{"type":17,"tag":42,"props":1062,"children":1063},{"style":49},[1064],{"type":23,"value":52},{"type":17,"tag":42,"props":1066,"children":1067},{"style":55},[1068],{"type":23,"value":58},{"type":17,"tag":42,"props":1070,"children":1071},{"style":61},[1072],{"type":23,"value":64},{"type":17,"tag":42,"props":1074,"children":1075},{"class":44,"line":67},[1076,1080],{"type":17,"tag":42,"props":1077,"children":1078},{"style":49},[1079],{"type":23,"value":73},{"type":17,"tag":42,"props":1081,"children":1082},{"style":61},[1083],{"type":23,"value":78},{"type":17,"tag":42,"props":1085,"children":1086},{"class":44,"line":81},[1087,1091],{"type":17,"tag":42,"props":1088,"children":1089},{"style":49},[1090],{"type":23,"value":73},{"type":17,"tag":42,"props":1092,"children":1093},{"style":61},[1094],{"type":23,"value":91},{"type":17,"tag":42,"props":1096,"children":1097},{"class":44,"line":94},[1098],{"type":17,"tag":42,"props":1099,"children":1100},{"style":61},[1101],{"type":23,"value":100},{"type":17,"tag":42,"props":1103,"children":1104},{"class":44,"line":215},[1105],{"type":17,"tag":42,"props":1106,"children":1107},{"emptyLinePlaceholder":12},[1108],{"type":23,"value":721},{"type":17,"tag":42,"props":1110,"children":1111},{"class":44,"line":240},[1112,1116,1121],{"type":17,"tag":42,"props":1113,"children":1114},{"style":49},[1115],{"type":23,"value":52},{"type":17,"tag":42,"props":1117,"children":1118},{"style":55},[1119],{"type":23,"value":1120}," Rectangle",{"type":17,"tag":42,"props":1122,"children":1123},{"style":61},[1124],{"type":23,"value":64},{"type":17,"tag":42,"props":1126,"children":1127},{"class":44,"line":665},[1128,1133],{"type":17,"tag":42,"props":1129,"children":1130},{"style":55},[1131],{"type":23,"value":1132},"    Point",{"type":17,"tag":42,"props":1134,"children":1135},{"style":61},[1136],{"type":23,"value":1137}," topLeft;\n",{"type":17,"tag":42,"props":1139,"children":1140},{"class":44,"line":782},[1141,1145],{"type":17,"tag":42,"props":1142,"children":1143},{"style":55},[1144],{"type":23,"value":1132},{"type":17,"tag":42,"props":1146,"children":1147},{"style":61},[1148],{"type":23,"value":1149}," bottomRight;\n",{"type":17,"tag":42,"props":1151,"children":1152},{"class":44,"line":913},[1153],{"type":17,"tag":42,"props":1154,"children":1155},{"style":61},[1156],{"type":23,"value":100},{"type":17,"tag":42,"props":1158,"children":1160},{"class":44,"line":1159},10,[1161],{"type":17,"tag":42,"props":1162,"children":1163},{"emptyLinePlaceholder":12},[1164],{"type":23,"value":721},{"type":17,"tag":42,"props":1166,"children":1168},{"class":44,"line":1167},11,[1169,1174,1179,1183],{"type":17,"tag":42,"props":1170,"children":1171},{"style":55},[1172],{"type":23,"value":1173},"Rectangle",{"type":17,"tag":42,"props":1175,"children":1176},{"style":61},[1177],{"type":23,"value":1178}," rectangle ",{"type":17,"tag":42,"props":1180,"children":1181},{"style":49},[1182],{"type":23,"value":747},{"type":17,"tag":42,"props":1184,"children":1185},{"style":61},[1186],{"type":23,"value":64},{"type":17,"tag":42,"props":1188,"children":1190},{"class":44,"line":1189},12,[1191,1196,1200,1205,1209],{"type":17,"tag":42,"props":1192,"children":1193},{"style":61},[1194],{"type":23,"value":1195},"    topLeft: { x: ",{"type":17,"tag":42,"props":1197,"children":1198},{"style":155},[1199],{"type":23,"value":757},{"type":17,"tag":42,"props":1201,"children":1202},{"style":61},[1203],{"type":23,"value":1204},", y: ",{"type":17,"tag":42,"props":1206,"children":1207},{"style":155},[1208],{"type":23,"value":767},{"type":17,"tag":42,"props":1210,"children":1211},{"style":61},[1212],{"type":23,"value":1213}," },\n",{"type":17,"tag":42,"props":1215,"children":1217},{"class":44,"line":1216},13,[1218,1223,1228,1232,1237],{"type":17,"tag":42,"props":1219,"children":1220},{"style":61},[1221],{"type":23,"value":1222},"    bottomRight: { x: ",{"type":17,"tag":42,"props":1224,"children":1225},{"style":155},[1226],{"type":23,"value":1227},"3",{"type":17,"tag":42,"props":1229,"children":1230},{"style":61},[1231],{"type":23,"value":1204},{"type":17,"tag":42,"props":1233,"children":1234},{"style":155},[1235],{"type":23,"value":1236},"4",{"type":17,"tag":42,"props":1238,"children":1239},{"style":61},[1240],{"type":23,"value":772},{"type":17,"tag":42,"props":1242,"children":1244},{"class":44,"line":1243},14,[1245],{"type":17,"tag":42,"props":1246,"children":1247},{"style":61},[1248],{"type":23,"value":100},{"type":17,"tag":42,"props":1250,"children":1252},{"class":44,"line":1251},15,[1253],{"type":17,"tag":42,"props":1254,"children":1255},{"emptyLinePlaceholder":12},[1256],{"type":23,"value":721},{"type":17,"tag":42,"props":1258,"children":1260},{"class":44,"line":1259},16,[1261],{"type":17,"tag":42,"props":1262,"children":1263},{"style":291},[1264],{"type":23,"value":1265},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":42,"props":1267,"children":1269},{"class":44,"line":1268},17,[1270,1274,1278,1282],{"type":17,"tag":42,"props":1271,"children":1272},{"style":49},[1273],{"type":23,"value":1026},{"type":17,"tag":42,"props":1275,"children":1276},{"style":61},[1277],{"type":23,"value":175},{"type":17,"tag":42,"props":1279,"children":1280},{"style":49},[1281],{"type":23,"value":747},{"type":17,"tag":42,"props":1283,"children":1284},{"style":61},[1285],{"type":23,"value":1286}," rectangle.topLeft.x\n",{"type":17,"tag":1288,"props":1289,"children":1290},"style",{},[1291],{"type":23,"value":1292},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":67,"depth":67,"links":1294},[1295,1298,1299,1300],{"id":104,"depth":67,"text":107,"children":1296},[1297],{"id":270,"depth":81,"text":273},{"id":637,"depth":67,"text":640},{"id":893,"depth":67,"text":896},{"id":1042,"depth":67,"text":1045},"markdown","content:docs:3.language-reference:1.structs.md","content","docs/3.language-reference/1.structs.md","md",[1307],{"title":1308,"_path":1309,"children":1310,"root":12},"Documentation","/docs",[1311,1312,1326,1332,1343],{"title":1308,"_path":1309},{"title":1313,"_path":1314,"children":1315,"sidebar":6},"Getting started","/docs/get-started",[1316,1319,1322,1325],{"title":1317,"_path":1318,"sidebar":12},"Downloads","/docs/get-started/downloads",{"title":1320,"_path":1321,"sidebar":12},"Emulator","/docs/get-started/emulator",{"title":1323,"_path":1324,"sidebar":12},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":1313,"_path":1314,"sidebar":6},{"title":1327,"_path":1328,"children":1329,"sidebar":6},"Language reference","/docs/language-reference",[1330,1331],{"title":8,"_path":4,"sidebar":12},{"title":1327,"_path":1328,"sidebar":6},{"title":1333,"_path":1334,"children":1335,"sidebar":6},"Advanced topics","/docs/advanced-topics",[1336,1339,1342],{"title":1337,"_path":1338,"sidebar":12},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":1340,"_path":1341,"sidebar":12},"Optimizing","/docs/advanced-topics/optimizing",{"title":1333,"_path":1334,"sidebar":6},{"title":1344,"_path":1345,"children":1346,"sidebar":6},"Perhipherals","/docs/peripherals",[1347,1350],{"title":1348,"_path":1349,"sidebar":12},"Screen","/docs/peripherals/screen",{"title":1344,"_path":1345,"sidebar":6},1698334069566]