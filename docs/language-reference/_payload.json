[{"data":1,"prerenderedAt":1383},["Reactive",2],{"content-query-EYabfiwUqJ":3,"content-navigation-8C37fagqQL":42,"content-navigation-Lhv2WviZJC":88,"content-query-x47RLZfWto":95},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":37,"_id":38,"_source":39,"_file":40,"_extension":41},"/docs/language-reference","docs",false,"","Language reference","All the details about the language.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":34},"root",[16,24,30],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"language-reference",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This section contains all the details about the Yabal language.",{"type":17,"tag":31,"props":32,"children":33},"related",{":tags":20},[],{"title":7,"searchDepth":35,"depth":35,"links":36},2,[],"markdown","content:docs:3.language-reference:index.md","content","docs/3.language-reference/index.md","md",[43],{"title":44,"_path":45,"children":46,"root":55},"Documentation","/docs",[47,48,63,69,80],{"title":44,"_path":45},{"title":49,"_path":50,"children":51,"sidebar":6},"Getting started","/docs/get-started",[52,56,59,62],{"title":53,"_path":54,"sidebar":55},"Downloads","/docs/get-started/downloads",true,{"title":57,"_path":58,"sidebar":55},"Emulator","/docs/get-started/emulator",{"title":60,"_path":61,"sidebar":55},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":49,"_path":50,"sidebar":6},{"title":8,"_path":4,"children":64,"sidebar":6},[65,68],{"title":66,"_path":67,"sidebar":55},"Structs","/docs/language-reference/structs",{"title":8,"_path":4,"sidebar":6},{"title":70,"_path":71,"children":72,"sidebar":6},"Advanced topics","/docs/advanced-topics",[73,76,79],{"title":74,"_path":75,"sidebar":55},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":77,"_path":78,"sidebar":55},"Optimizing","/docs/advanced-topics/optimizing",{"title":70,"_path":71,"sidebar":6},{"title":81,"_path":82,"children":83,"sidebar":6},"Perhipherals","/docs/peripherals",[84,87],{"title":85,"_path":86,"sidebar":55},"Screen","/docs/peripherals/screen",{"title":81,"_path":82,"sidebar":6},[89],{"title":44,"_path":45,"children":90,"root":55},[91],{"title":92,"_path":4,"children":93},"Language Reference",[94],{"title":66,"_path":67,"sidebar":55},{"_path":67,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":66,"description":96,"tags":97,"navigation":98,"body":99,"_type":37,"_id":1381,"_source":39,"_file":1382,"_extension":41},"Learn more about structs.",[20],{"sidebar":55},{"type":14,"children":100,"toc":1373},[101,106,111,181,188,193,326,347,354,359,474,479,590,595,715,721,740,853,858,971,977,989,1120,1126,1131,1367],{"type":17,"tag":18,"props":102,"children":104},{"id":103},"structs",[105],{"type":23,"value":66},{"type":17,"tag":25,"props":107,"children":108},{},[109],{"type":23,"value":110},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":112,"props":113,"children":117},"pre",{"className":114,"code":115,"language":116,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[118],{"type":17,"tag":119,"props":120,"children":121},"code",{"__ignoreMap":7},[122,146,159,172],{"type":17,"tag":123,"props":124,"children":127},"span",{"class":125,"line":126},"line",1,[128,134,140],{"type":17,"tag":123,"props":129,"children":131},{"style":130},"--shiki-default:#D73A49;--shiki-dark:#F97583",[132],{"type":23,"value":133},"struct",{"type":17,"tag":123,"props":135,"children":137},{"style":136},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[138],{"type":23,"value":139}," Point",{"type":17,"tag":123,"props":141,"children":143},{"style":142},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[144],{"type":23,"value":145}," {\n",{"type":17,"tag":123,"props":147,"children":148},{"class":125,"line":35},[149,154],{"type":17,"tag":123,"props":150,"children":151},{"style":130},[152],{"type":23,"value":153},"    int",{"type":17,"tag":123,"props":155,"children":156},{"style":142},[157],{"type":23,"value":158}," x;\n",{"type":17,"tag":123,"props":160,"children":162},{"class":125,"line":161},3,[163,167],{"type":17,"tag":123,"props":164,"children":165},{"style":130},[166],{"type":23,"value":153},{"type":17,"tag":123,"props":168,"children":169},{"style":142},[170],{"type":23,"value":171}," y;\n",{"type":17,"tag":123,"props":173,"children":175},{"class":125,"line":174},4,[176],{"type":17,"tag":123,"props":177,"children":178},{"style":142},[179],{"type":23,"value":180},"}\n",{"type":17,"tag":182,"props":183,"children":185},"h2",{"id":184},"bit-fields",[186],{"type":23,"value":187},"Bit-fields",{"type":17,"tag":25,"props":189,"children":190},{},[191],{"type":23,"value":192},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":112,"props":194,"children":196},{"className":114,"code":195,"language":116,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[197],{"type":17,"tag":119,"props":198,"children":199},{"__ignoreMap":7},[200,216,244,268,293,318],{"type":17,"tag":123,"props":201,"children":202},{"class":125,"line":126},[203,207,212],{"type":17,"tag":123,"props":204,"children":205},{"style":130},[206],{"type":23,"value":133},{"type":17,"tag":123,"props":208,"children":209},{"style":136},[210],{"type":23,"value":211}," MouseInput",{"type":17,"tag":123,"props":213,"children":214},{"style":142},[215],{"type":23,"value":145},{"type":17,"tag":123,"props":217,"children":218},{"class":125,"line":35},[219,223,228,233,239],{"type":17,"tag":123,"props":220,"children":221},{"style":130},[222],{"type":23,"value":153},{"type":17,"tag":123,"props":224,"children":225},{"style":142},[226],{"type":23,"value":227}," y ",{"type":17,"tag":123,"props":229,"children":230},{"style":130},[231],{"type":23,"value":232},":",{"type":17,"tag":123,"props":234,"children":236},{"style":235},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[237],{"type":23,"value":238}," 7",{"type":17,"tag":123,"props":240,"children":241},{"style":142},[242],{"type":23,"value":243},";\n",{"type":17,"tag":123,"props":245,"children":246},{"class":125,"line":161},[247,251,256,260,264],{"type":17,"tag":123,"props":248,"children":249},{"style":130},[250],{"type":23,"value":153},{"type":17,"tag":123,"props":252,"children":253},{"style":142},[254],{"type":23,"value":255}," x ",{"type":17,"tag":123,"props":257,"children":258},{"style":130},[259],{"type":23,"value":232},{"type":17,"tag":123,"props":261,"children":262},{"style":235},[263],{"type":23,"value":238},{"type":17,"tag":123,"props":265,"children":266},{"style":142},[267],{"type":23,"value":243},{"type":17,"tag":123,"props":269,"children":270},{"class":125,"line":174},[271,275,280,284,289],{"type":17,"tag":123,"props":272,"children":273},{"style":130},[274],{"type":23,"value":153},{"type":17,"tag":123,"props":276,"children":277},{"style":142},[278],{"type":23,"value":279}," left ",{"type":17,"tag":123,"props":281,"children":282},{"style":130},[283],{"type":23,"value":232},{"type":17,"tag":123,"props":285,"children":286},{"style":235},[287],{"type":23,"value":288}," 1",{"type":17,"tag":123,"props":290,"children":291},{"style":142},[292],{"type":23,"value":243},{"type":17,"tag":123,"props":294,"children":296},{"class":125,"line":295},5,[297,301,306,310,314],{"type":17,"tag":123,"props":298,"children":299},{"style":130},[300],{"type":23,"value":153},{"type":17,"tag":123,"props":302,"children":303},{"style":142},[304],{"type":23,"value":305}," right ",{"type":17,"tag":123,"props":307,"children":308},{"style":130},[309],{"type":23,"value":232},{"type":17,"tag":123,"props":311,"children":312},{"style":235},[313],{"type":23,"value":288},{"type":17,"tag":123,"props":315,"children":316},{"style":142},[317],{"type":23,"value":243},{"type":17,"tag":123,"props":319,"children":321},{"class":125,"line":320},6,[322],{"type":17,"tag":123,"props":323,"children":324},{"style":142},[325],{"type":23,"value":180},{"type":17,"tag":327,"props":328,"children":329},"warning",{},[330],{"type":17,"tag":25,"props":331,"children":332},{},[333,339,341,345],{"type":17,"tag":334,"props":335,"children":336},"strong",{},[337],{"type":23,"value":338},"Note:",{"type":23,"value":340}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":342,"props":343,"children":344},"br",{},[],{"type":23,"value":346},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":348,"props":349,"children":351},"h3",{"id":350},"bit-offsets",[352],{"type":23,"value":353},"Bit offsets",{"type":17,"tag":25,"props":355,"children":356},{},[357],{"type":23,"value":358},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":112,"props":360,"children":362},{"className":114,"code":361,"language":116,"meta":7,"style":7},"// Note: the following example will not compile\nstruct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[363],{"type":17,"tag":119,"props":364,"children":365},{"__ignoreMap":7},[366,375,391,417,442,467],{"type":17,"tag":123,"props":367,"children":368},{"class":125,"line":126},[369],{"type":17,"tag":123,"props":370,"children":372},{"style":371},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[373],{"type":23,"value":374},"// Note: the following example will not compile\n",{"type":17,"tag":123,"props":376,"children":377},{"class":125,"line":35},[378,382,387],{"type":17,"tag":123,"props":379,"children":380},{"style":130},[381],{"type":23,"value":133},{"type":17,"tag":123,"props":383,"children":384},{"style":136},[385],{"type":23,"value":386}," Example",{"type":17,"tag":123,"props":388,"children":389},{"style":142},[390],{"type":23,"value":145},{"type":17,"tag":123,"props":392,"children":393},{"class":125,"line":161},[394,398,403,407,412],{"type":17,"tag":123,"props":395,"children":396},{"style":130},[397],{"type":23,"value":153},{"type":17,"tag":123,"props":399,"children":400},{"style":142},[401],{"type":23,"value":402}," a ",{"type":17,"tag":123,"props":404,"children":405},{"style":130},[406],{"type":23,"value":232},{"type":17,"tag":123,"props":408,"children":409},{"style":235},[410],{"type":23,"value":411}," 8",{"type":17,"tag":123,"props":413,"children":414},{"style":371},[415],{"type":23,"value":416}," // Offset 0 with 8 bits\n",{"type":17,"tag":123,"props":418,"children":419},{"class":125,"line":174},[420,424,429,433,437],{"type":17,"tag":123,"props":421,"children":422},{"style":130},[423],{"type":23,"value":153},{"type":17,"tag":123,"props":425,"children":426},{"style":142},[427],{"type":23,"value":428}," b ",{"type":17,"tag":123,"props":430,"children":431},{"style":130},[432],{"type":23,"value":232},{"type":17,"tag":123,"props":434,"children":435},{"style":235},[436],{"type":23,"value":411},{"type":17,"tag":123,"props":438,"children":439},{"style":371},[440],{"type":23,"value":441}," // Offset 8 with 8 bits\n",{"type":17,"tag":123,"props":443,"children":444},{"class":125,"line":295},[445,449,454,458,462],{"type":17,"tag":123,"props":446,"children":447},{"style":130},[448],{"type":23,"value":153},{"type":17,"tag":123,"props":450,"children":451},{"style":142},[452],{"type":23,"value":453}," c ",{"type":17,"tag":123,"props":455,"children":456},{"style":130},[457],{"type":23,"value":232},{"type":17,"tag":123,"props":459,"children":460},{"style":235},[461],{"type":23,"value":411},{"type":17,"tag":123,"props":463,"children":464},{"style":371},[465],{"type":23,"value":466}," // Offset 16 with 8 bits\n",{"type":17,"tag":123,"props":468,"children":469},{"class":125,"line":320},[470],{"type":17,"tag":123,"props":471,"children":472},{"style":142},[473],{"type":23,"value":180},{"type":17,"tag":25,"props":475,"children":476},{},[477],{"type":23,"value":478},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":112,"props":480,"children":483},{"className":114,"code":481,"highlights":482,"language":116,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[295],[484],{"type":17,"tag":119,"props":485,"children":486},{"__ignoreMap":7},[487,494,510,534,558,583],{"type":17,"tag":123,"props":488,"children":489},{"class":125,"line":126},[490],{"type":17,"tag":123,"props":491,"children":492},{"style":371},[493],{"type":23,"value":374},{"type":17,"tag":123,"props":495,"children":496},{"class":125,"line":35},[497,501,506],{"type":17,"tag":123,"props":498,"children":499},{"style":130},[500],{"type":23,"value":133},{"type":17,"tag":123,"props":502,"children":503},{"style":136},[504],{"type":23,"value":505}," InvalidExample",{"type":17,"tag":123,"props":507,"children":508},{"style":142},[509],{"type":23,"value":145},{"type":17,"tag":123,"props":511,"children":512},{"class":125,"line":161},[513,517,521,525,529],{"type":17,"tag":123,"props":514,"children":515},{"style":130},[516],{"type":23,"value":153},{"type":17,"tag":123,"props":518,"children":519},{"style":142},[520],{"type":23,"value":402},{"type":17,"tag":123,"props":522,"children":523},{"style":130},[524],{"type":23,"value":232},{"type":17,"tag":123,"props":526,"children":527},{"style":235},[528],{"type":23,"value":238},{"type":17,"tag":123,"props":530,"children":531},{"style":371},[532],{"type":23,"value":533}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":123,"props":535,"children":536},{"class":125,"line":174},[537,541,545,549,553],{"type":17,"tag":123,"props":538,"children":539},{"style":130},[540],{"type":23,"value":153},{"type":17,"tag":123,"props":542,"children":543},{"style":142},[544],{"type":23,"value":428},{"type":17,"tag":123,"props":546,"children":547},{"style":130},[548],{"type":23,"value":232},{"type":17,"tag":123,"props":550,"children":551},{"style":235},[552],{"type":23,"value":238},{"type":17,"tag":123,"props":554,"children":555},{"style":371},[556],{"type":23,"value":557}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":123,"props":559,"children":561},{"class":560,"line":295},"line highlight",[562,566,570,574,578],{"type":17,"tag":123,"props":563,"children":564},{"style":130},[565],{"type":23,"value":153},{"type":17,"tag":123,"props":567,"children":568},{"style":142},[569],{"type":23,"value":453},{"type":17,"tag":123,"props":571,"children":572},{"style":130},[573],{"type":23,"value":232},{"type":17,"tag":123,"props":575,"children":576},{"style":235},[577],{"type":23,"value":238},{"type":17,"tag":123,"props":579,"children":580},{"style":371},[581],{"type":23,"value":582}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":123,"props":584,"children":585},{"class":125,"line":320},[586],{"type":17,"tag":123,"props":587,"children":588},{"style":142},[589],{"type":23,"value":180},{"type":17,"tag":25,"props":591,"children":592},{},[593],{"type":23,"value":594},"When a normal field is introduced, offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":112,"props":596,"children":599},{"className":114,"code":597,"highlights":598,"language":116,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[174],[600],{"type":17,"tag":119,"props":601,"children":602},{"__ignoreMap":7},[603,618,642,666,683,708],{"type":17,"tag":123,"props":604,"children":605},{"class":125,"line":126},[606,610,614],{"type":17,"tag":123,"props":607,"children":608},{"style":130},[609],{"type":23,"value":133},{"type":17,"tag":123,"props":611,"children":612},{"style":136},[613],{"type":23,"value":386},{"type":17,"tag":123,"props":615,"children":616},{"style":142},[617],{"type":23,"value":145},{"type":17,"tag":123,"props":619,"children":620},{"class":125,"line":35},[621,625,629,633,637],{"type":17,"tag":123,"props":622,"children":623},{"style":130},[624],{"type":23,"value":153},{"type":17,"tag":123,"props":626,"children":627},{"style":142},[628],{"type":23,"value":402},{"type":17,"tag":123,"props":630,"children":631},{"style":130},[632],{"type":23,"value":232},{"type":17,"tag":123,"props":634,"children":635},{"style":235},[636],{"type":23,"value":238},{"type":17,"tag":123,"props":638,"children":639},{"style":371},[640],{"type":23,"value":641},"   //          Offset 0,    7 bits\n",{"type":17,"tag":123,"props":643,"children":644},{"class":125,"line":161},[645,649,653,657,661],{"type":17,"tag":123,"props":646,"children":647},{"style":130},[648],{"type":23,"value":153},{"type":17,"tag":123,"props":650,"children":651},{"style":142},[652],{"type":23,"value":428},{"type":17,"tag":123,"props":654,"children":655},{"style":130},[656],{"type":23,"value":232},{"type":17,"tag":123,"props":658,"children":659},{"style":235},[660],{"type":23,"value":238},{"type":17,"tag":123,"props":662,"children":663},{"style":371},[664],{"type":23,"value":665},"   //          Offset 7,    7 bits\n",{"type":17,"tag":123,"props":667,"children":668},{"class":560,"line":174},[669,673,678],{"type":17,"tag":123,"props":670,"children":671},{"style":130},[672],{"type":23,"value":153},{"type":17,"tag":123,"props":674,"children":675},{"style":142},[676],{"type":23,"value":677}," c       ",{"type":17,"tag":123,"props":679,"children":680},{"style":371},[681],{"type":23,"value":682},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":123,"props":684,"children":685},{"class":125,"line":295},[686,690,695,699,703],{"type":17,"tag":123,"props":687,"children":688},{"style":130},[689],{"type":23,"value":153},{"type":17,"tag":123,"props":691,"children":692},{"style":142},[693],{"type":23,"value":694}," d ",{"type":17,"tag":123,"props":696,"children":697},{"style":130},[698],{"type":23,"value":232},{"type":17,"tag":123,"props":700,"children":701},{"style":235},[702],{"type":23,"value":238},{"type":17,"tag":123,"props":704,"children":705},{"style":371},[706],{"type":23,"value":707},"   //          Offset 32,   7 bits\n",{"type":17,"tag":123,"props":709,"children":710},{"class":125,"line":320},[711],{"type":17,"tag":123,"props":712,"children":713},{"style":142},[714],{"type":23,"value":180},{"type":17,"tag":182,"props":716,"children":718},{"id":717},"initializing-structs",[719],{"type":23,"value":720},"Initializing structs",{"type":17,"tag":25,"props":722,"children":723},{},[724,726,731,733,738],{"type":23,"value":725},"Structs can be initialized by using curly braces (",{"type":17,"tag":119,"props":727,"children":728},{"className":7},[729],{"type":23,"value":730},"{",{"type":23,"value":732}," and ",{"type":17,"tag":119,"props":734,"children":735},{"className":7},[736],{"type":23,"value":737},"}",{"type":23,"value":739},") to specify the values of the fields. For example:",{"type":17,"tag":112,"props":741,"children":746},{"className":114,"code":742,"filename":743,"highlights":744,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[745],7,[747],{"type":17,"tag":119,"props":748,"children":749},{"__ignoreMap":7},[750,765,776,787,794,802,810],{"type":17,"tag":123,"props":751,"children":752},{"class":125,"line":126},[753,757,761],{"type":17,"tag":123,"props":754,"children":755},{"style":130},[756],{"type":23,"value":133},{"type":17,"tag":123,"props":758,"children":759},{"style":136},[760],{"type":23,"value":139},{"type":17,"tag":123,"props":762,"children":763},{"style":142},[764],{"type":23,"value":145},{"type":17,"tag":123,"props":766,"children":767},{"class":125,"line":35},[768,772],{"type":17,"tag":123,"props":769,"children":770},{"style":130},[771],{"type":23,"value":153},{"type":17,"tag":123,"props":773,"children":774},{"style":142},[775],{"type":23,"value":158},{"type":17,"tag":123,"props":777,"children":778},{"class":125,"line":161},[779,783],{"type":17,"tag":123,"props":780,"children":781},{"style":130},[782],{"type":23,"value":153},{"type":17,"tag":123,"props":784,"children":785},{"style":142},[786],{"type":23,"value":171},{"type":17,"tag":123,"props":788,"children":789},{"class":125,"line":174},[790],{"type":17,"tag":123,"props":791,"children":792},{"style":142},[793],{"type":23,"value":180},{"type":17,"tag":123,"props":795,"children":796},{"class":125,"line":295},[797],{"type":17,"tag":123,"props":798,"children":799},{"emptyLinePlaceholder":55},[800],{"type":23,"value":801},"\n",{"type":17,"tag":123,"props":803,"children":804},{"class":125,"line":320},[805],{"type":17,"tag":123,"props":806,"children":807},{"style":371},[808],{"type":23,"value":809},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":123,"props":811,"children":812},{"class":560,"line":745},[813,818,823,828,833,838,843,848],{"type":17,"tag":123,"props":814,"children":815},{"style":136},[816],{"type":23,"value":817},"Point",{"type":17,"tag":123,"props":819,"children":820},{"style":142},[821],{"type":23,"value":822}," point ",{"type":17,"tag":123,"props":824,"children":825},{"style":130},[826],{"type":23,"value":827},"=",{"type":17,"tag":123,"props":829,"children":830},{"style":142},[831],{"type":23,"value":832}," { ",{"type":17,"tag":123,"props":834,"children":835},{"style":235},[836],{"type":23,"value":837},"1",{"type":17,"tag":123,"props":839,"children":840},{"style":142},[841],{"type":23,"value":842},", ",{"type":17,"tag":123,"props":844,"children":845},{"style":235},[846],{"type":23,"value":847},"2",{"type":17,"tag":123,"props":849,"children":850},{"style":142},[851],{"type":23,"value":852}," }\n",{"type":17,"tag":25,"props":854,"children":855},{},[856],{"type":23,"value":857},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":112,"props":859,"children":863},{"className":114,"code":860,"filename":743,"highlights":861,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[862],8,[864],{"type":17,"tag":119,"props":865,"children":866},{"__ignoreMap":7},[867,882,893,904,911,918,926,934],{"type":17,"tag":123,"props":868,"children":869},{"class":125,"line":126},[870,874,878],{"type":17,"tag":123,"props":871,"children":872},{"style":130},[873],{"type":23,"value":133},{"type":17,"tag":123,"props":875,"children":876},{"style":136},[877],{"type":23,"value":139},{"type":17,"tag":123,"props":879,"children":880},{"style":142},[881],{"type":23,"value":145},{"type":17,"tag":123,"props":883,"children":884},{"class":125,"line":35},[885,889],{"type":17,"tag":123,"props":886,"children":887},{"style":130},[888],{"type":23,"value":153},{"type":17,"tag":123,"props":890,"children":891},{"style":142},[892],{"type":23,"value":158},{"type":17,"tag":123,"props":894,"children":895},{"class":125,"line":161},[896,900],{"type":17,"tag":123,"props":897,"children":898},{"style":130},[899],{"type":23,"value":153},{"type":17,"tag":123,"props":901,"children":902},{"style":142},[903],{"type":23,"value":171},{"type":17,"tag":123,"props":905,"children":906},{"class":125,"line":174},[907],{"type":17,"tag":123,"props":908,"children":909},{"style":142},[910],{"type":23,"value":180},{"type":17,"tag":123,"props":912,"children":913},{"class":125,"line":295},[914],{"type":17,"tag":123,"props":915,"children":916},{"emptyLinePlaceholder":55},[917],{"type":23,"value":801},{"type":17,"tag":123,"props":919,"children":920},{"class":125,"line":320},[921],{"type":17,"tag":123,"props":922,"children":923},{"style":371},[924],{"type":23,"value":925},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":123,"props":927,"children":928},{"class":125,"line":745},[929],{"type":17,"tag":123,"props":930,"children":931},{"style":371},[932],{"type":23,"value":933},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":123,"props":935,"children":936},{"class":560,"line":862},[937,941,945,949,954,958,963,967],{"type":17,"tag":123,"props":938,"children":939},{"style":136},[940],{"type":23,"value":817},{"type":17,"tag":123,"props":942,"children":943},{"style":142},[944],{"type":23,"value":822},{"type":17,"tag":123,"props":946,"children":947},{"style":130},[948],{"type":23,"value":827},{"type":17,"tag":123,"props":950,"children":951},{"style":142},[952],{"type":23,"value":953}," { y: ",{"type":17,"tag":123,"props":955,"children":956},{"style":235},[957],{"type":23,"value":847},{"type":17,"tag":123,"props":959,"children":960},{"style":142},[961],{"type":23,"value":962},", x: ",{"type":17,"tag":123,"props":964,"children":965},{"style":235},[966],{"type":23,"value":837},{"type":17,"tag":123,"props":968,"children":969},{"style":142},[970],{"type":23,"value":852},{"type":17,"tag":182,"props":972,"children":974},{"id":973},"accessing-fields",[975],{"type":23,"value":976},"Accessing fields",{"type":17,"tag":25,"props":978,"children":979},{},[980,982,987],{"type":23,"value":981},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":119,"props":983,"children":984},{"className":7},[985],{"type":23,"value":986},".",{"type":23,"value":988},") operator. For example:",{"type":17,"tag":112,"props":990,"children":994},{"className":114,"code":991,"filename":743,"highlights":992,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[993],9,[995],{"type":17,"tag":119,"props":996,"children":997},{"__ignoreMap":7},[998,1013,1024,1035,1042,1049,1084,1091,1099],{"type":17,"tag":123,"props":999,"children":1000},{"class":125,"line":126},[1001,1005,1009],{"type":17,"tag":123,"props":1002,"children":1003},{"style":130},[1004],{"type":23,"value":133},{"type":17,"tag":123,"props":1006,"children":1007},{"style":136},[1008],{"type":23,"value":139},{"type":17,"tag":123,"props":1010,"children":1011},{"style":142},[1012],{"type":23,"value":145},{"type":17,"tag":123,"props":1014,"children":1015},{"class":125,"line":35},[1016,1020],{"type":17,"tag":123,"props":1017,"children":1018},{"style":130},[1019],{"type":23,"value":153},{"type":17,"tag":123,"props":1021,"children":1022},{"style":142},[1023],{"type":23,"value":158},{"type":17,"tag":123,"props":1025,"children":1026},{"class":125,"line":161},[1027,1031],{"type":17,"tag":123,"props":1028,"children":1029},{"style":130},[1030],{"type":23,"value":153},{"type":17,"tag":123,"props":1032,"children":1033},{"style":142},[1034],{"type":23,"value":171},{"type":17,"tag":123,"props":1036,"children":1037},{"class":125,"line":174},[1038],{"type":17,"tag":123,"props":1039,"children":1040},{"style":142},[1041],{"type":23,"value":180},{"type":17,"tag":123,"props":1043,"children":1044},{"class":125,"line":295},[1045],{"type":17,"tag":123,"props":1046,"children":1047},{"emptyLinePlaceholder":55},[1048],{"type":23,"value":801},{"type":17,"tag":123,"props":1050,"children":1051},{"class":125,"line":320},[1052,1056,1060,1064,1068,1072,1076,1080],{"type":17,"tag":123,"props":1053,"children":1054},{"style":136},[1055],{"type":23,"value":817},{"type":17,"tag":123,"props":1057,"children":1058},{"style":142},[1059],{"type":23,"value":822},{"type":17,"tag":123,"props":1061,"children":1062},{"style":130},[1063],{"type":23,"value":827},{"type":17,"tag":123,"props":1065,"children":1066},{"style":142},[1067],{"type":23,"value":832},{"type":17,"tag":123,"props":1069,"children":1070},{"style":235},[1071],{"type":23,"value":837},{"type":17,"tag":123,"props":1073,"children":1074},{"style":142},[1075],{"type":23,"value":842},{"type":17,"tag":123,"props":1077,"children":1078},{"style":235},[1079],{"type":23,"value":847},{"type":17,"tag":123,"props":1081,"children":1082},{"style":142},[1083],{"type":23,"value":852},{"type":17,"tag":123,"props":1085,"children":1086},{"class":125,"line":745},[1087],{"type":17,"tag":123,"props":1088,"children":1089},{"emptyLinePlaceholder":55},[1090],{"type":23,"value":801},{"type":17,"tag":123,"props":1092,"children":1093},{"class":125,"line":862},[1094],{"type":17,"tag":123,"props":1095,"children":1096},{"style":371},[1097],{"type":23,"value":1098},"// Access the x field of the point\n",{"type":17,"tag":123,"props":1100,"children":1101},{"class":560,"line":993},[1102,1107,1111,1115],{"type":17,"tag":123,"props":1103,"children":1104},{"style":130},[1105],{"type":23,"value":1106},"int",{"type":17,"tag":123,"props":1108,"children":1109},{"style":142},[1110],{"type":23,"value":255},{"type":17,"tag":123,"props":1112,"children":1113},{"style":130},[1114],{"type":23,"value":827},{"type":17,"tag":123,"props":1116,"children":1117},{"style":142},[1118],{"type":23,"value":1119}," point.x\n",{"type":17,"tag":182,"props":1121,"children":1123},{"id":1122},"nested-structs",[1124],{"type":23,"value":1125},"Nested structs",{"type":17,"tag":25,"props":1127,"children":1128},{},[1129],{"type":23,"value":1130},"Structs can be nested inside other structs. For example:",{"type":17,"tag":112,"props":1132,"children":1134},{"className":114,"code":1133,"filename":743,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1135],{"type":17,"tag":119,"props":1136,"children":1137},{"__ignoreMap":7},[1138,1153,1164,1175,1182,1189,1205,1218,1230,1237,1245,1267,1294,1321,1329,1337,1346],{"type":17,"tag":123,"props":1139,"children":1140},{"class":125,"line":126},[1141,1145,1149],{"type":17,"tag":123,"props":1142,"children":1143},{"style":130},[1144],{"type":23,"value":133},{"type":17,"tag":123,"props":1146,"children":1147},{"style":136},[1148],{"type":23,"value":139},{"type":17,"tag":123,"props":1150,"children":1151},{"style":142},[1152],{"type":23,"value":145},{"type":17,"tag":123,"props":1154,"children":1155},{"class":125,"line":35},[1156,1160],{"type":17,"tag":123,"props":1157,"children":1158},{"style":130},[1159],{"type":23,"value":153},{"type":17,"tag":123,"props":1161,"children":1162},{"style":142},[1163],{"type":23,"value":158},{"type":17,"tag":123,"props":1165,"children":1166},{"class":125,"line":161},[1167,1171],{"type":17,"tag":123,"props":1168,"children":1169},{"style":130},[1170],{"type":23,"value":153},{"type":17,"tag":123,"props":1172,"children":1173},{"style":142},[1174],{"type":23,"value":171},{"type":17,"tag":123,"props":1176,"children":1177},{"class":125,"line":174},[1178],{"type":17,"tag":123,"props":1179,"children":1180},{"style":142},[1181],{"type":23,"value":180},{"type":17,"tag":123,"props":1183,"children":1184},{"class":125,"line":295},[1185],{"type":17,"tag":123,"props":1186,"children":1187},{"emptyLinePlaceholder":55},[1188],{"type":23,"value":801},{"type":17,"tag":123,"props":1190,"children":1191},{"class":125,"line":320},[1192,1196,1201],{"type":17,"tag":123,"props":1193,"children":1194},{"style":130},[1195],{"type":23,"value":133},{"type":17,"tag":123,"props":1197,"children":1198},{"style":136},[1199],{"type":23,"value":1200}," Rectangle",{"type":17,"tag":123,"props":1202,"children":1203},{"style":142},[1204],{"type":23,"value":145},{"type":17,"tag":123,"props":1206,"children":1207},{"class":125,"line":745},[1208,1213],{"type":17,"tag":123,"props":1209,"children":1210},{"style":136},[1211],{"type":23,"value":1212},"    Point",{"type":17,"tag":123,"props":1214,"children":1215},{"style":142},[1216],{"type":23,"value":1217}," topLeft;\n",{"type":17,"tag":123,"props":1219,"children":1220},{"class":125,"line":862},[1221,1225],{"type":17,"tag":123,"props":1222,"children":1223},{"style":136},[1224],{"type":23,"value":1212},{"type":17,"tag":123,"props":1226,"children":1227},{"style":142},[1228],{"type":23,"value":1229}," bottomRight;\n",{"type":17,"tag":123,"props":1231,"children":1232},{"class":125,"line":993},[1233],{"type":17,"tag":123,"props":1234,"children":1235},{"style":142},[1236],{"type":23,"value":180},{"type":17,"tag":123,"props":1238,"children":1240},{"class":125,"line":1239},10,[1241],{"type":17,"tag":123,"props":1242,"children":1243},{"emptyLinePlaceholder":55},[1244],{"type":23,"value":801},{"type":17,"tag":123,"props":1246,"children":1248},{"class":125,"line":1247},11,[1249,1254,1259,1263],{"type":17,"tag":123,"props":1250,"children":1251},{"style":136},[1252],{"type":23,"value":1253},"Rectangle",{"type":17,"tag":123,"props":1255,"children":1256},{"style":142},[1257],{"type":23,"value":1258}," rectangle ",{"type":17,"tag":123,"props":1260,"children":1261},{"style":130},[1262],{"type":23,"value":827},{"type":17,"tag":123,"props":1264,"children":1265},{"style":142},[1266],{"type":23,"value":145},{"type":17,"tag":123,"props":1268,"children":1270},{"class":125,"line":1269},12,[1271,1276,1280,1285,1289],{"type":17,"tag":123,"props":1272,"children":1273},{"style":142},[1274],{"type":23,"value":1275},"    topLeft: { x: ",{"type":17,"tag":123,"props":1277,"children":1278},{"style":235},[1279],{"type":23,"value":837},{"type":17,"tag":123,"props":1281,"children":1282},{"style":142},[1283],{"type":23,"value":1284},", y: ",{"type":17,"tag":123,"props":1286,"children":1287},{"style":235},[1288],{"type":23,"value":847},{"type":17,"tag":123,"props":1290,"children":1291},{"style":142},[1292],{"type":23,"value":1293}," },\n",{"type":17,"tag":123,"props":1295,"children":1297},{"class":125,"line":1296},13,[1298,1303,1308,1312,1317],{"type":17,"tag":123,"props":1299,"children":1300},{"style":142},[1301],{"type":23,"value":1302},"    bottomRight: { x: ",{"type":17,"tag":123,"props":1304,"children":1305},{"style":235},[1306],{"type":23,"value":1307},"3",{"type":17,"tag":123,"props":1309,"children":1310},{"style":142},[1311],{"type":23,"value":1284},{"type":17,"tag":123,"props":1313,"children":1314},{"style":235},[1315],{"type":23,"value":1316},"4",{"type":17,"tag":123,"props":1318,"children":1319},{"style":142},[1320],{"type":23,"value":852},{"type":17,"tag":123,"props":1322,"children":1324},{"class":125,"line":1323},14,[1325],{"type":17,"tag":123,"props":1326,"children":1327},{"style":142},[1328],{"type":23,"value":180},{"type":17,"tag":123,"props":1330,"children":1332},{"class":125,"line":1331},15,[1333],{"type":17,"tag":123,"props":1334,"children":1335},{"emptyLinePlaceholder":55},[1336],{"type":23,"value":801},{"type":17,"tag":123,"props":1338,"children":1340},{"class":125,"line":1339},16,[1341],{"type":17,"tag":123,"props":1342,"children":1343},{"style":371},[1344],{"type":23,"value":1345},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":123,"props":1347,"children":1349},{"class":125,"line":1348},17,[1350,1354,1358,1362],{"type":17,"tag":123,"props":1351,"children":1352},{"style":130},[1353],{"type":23,"value":1106},{"type":17,"tag":123,"props":1355,"children":1356},{"style":142},[1357],{"type":23,"value":255},{"type":17,"tag":123,"props":1359,"children":1360},{"style":130},[1361],{"type":23,"value":827},{"type":17,"tag":123,"props":1363,"children":1364},{"style":142},[1365],{"type":23,"value":1366}," rectangle.topLeft.x\n",{"type":17,"tag":1368,"props":1369,"children":1370},"style",{},[1371],{"type":23,"value":1372},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":35,"depth":35,"links":1374},[1375,1378,1379,1380],{"id":184,"depth":35,"text":187,"children":1376},[1377],{"id":350,"depth":161,"text":353},{"id":717,"depth":35,"text":720},{"id":973,"depth":35,"text":976},{"id":1122,"depth":35,"text":1125},"content:docs:3.language-reference:1.structs.md","docs/3.language-reference/1.structs.md",1698334069564]