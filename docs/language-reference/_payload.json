[{"data":1,"prerenderedAt":1376},["Reactive",2],{"content-query-EYabfiwUqJ":3,"content-navigation-8C37fagqQL":42,"content-navigation-Lhv2WviZJC":88,"content-query-x47RLZfWto":95},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":37,"_id":38,"_source":39,"_file":40,"_extension":41},"/docs/language-reference","docs",false,"","Language reference","All the details about the language.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":34},"root",[16,24,30],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"language-reference",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This section contains all the details about the Yabal language.",{"type":17,"tag":31,"props":32,"children":33},"related",{":tags":20},[],{"title":7,"searchDepth":35,"depth":35,"links":36},2,[],"markdown","content:docs:3.language-reference:index.md","content","docs/3.language-reference/index.md","md",[43],{"title":44,"_path":45,"children":46,"root":55},"Documentation","/docs",[47,48,63,69,77],{"title":44,"_path":45},{"title":49,"_path":50,"children":51,"sidebar":6},"Getting started","/docs/get-started",[52,56,59,62],{"title":53,"_path":54,"sidebar":55},"Downloads","/docs/get-started/downloads",true,{"title":57,"_path":58,"sidebar":55},"Emulator","/docs/get-started/emulator",{"title":60,"_path":61,"sidebar":55},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":49,"_path":50,"sidebar":6},{"title":8,"_path":4,"children":64,"sidebar":6},[65,68],{"title":66,"_path":67,"sidebar":55},"Structs","/docs/language-reference/structs",{"title":8,"_path":4,"sidebar":6},{"title":70,"_path":71,"children":72,"sidebar":6},"Perhipherals","/docs/peripherals",[73,76],{"title":74,"_path":75,"sidebar":55},"Screen","/docs/peripherals/screen",{"title":70,"_path":71,"sidebar":6},{"title":78,"_path":79,"children":80,"sidebar":6},"Advanced topics","/docs/advanced-topics",[81,84,87],{"title":82,"_path":83,"sidebar":55},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":85,"_path":86,"sidebar":55},"Optimizing","/docs/advanced-topics/optimizing",{"title":78,"_path":79,"sidebar":6},[89],{"title":44,"_path":45,"children":90,"root":55},[91],{"title":92,"_path":4,"children":93},"Language Reference",[94],{"title":66,"_path":67,"sidebar":55},{"_path":67,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":66,"description":96,"tags":97,"navigation":98,"body":99,"_type":37,"_id":1374,"_source":39,"_file":1375,"_extension":41},"Learn more about structs.",[20],{"sidebar":55},{"type":14,"children":100,"toc":1366},[101,106,111,181,188,193,326,347,354,359,466,471,583,588,708,714,733,846,851,964,970,982,1113,1119,1124,1360],{"type":17,"tag":18,"props":102,"children":104},{"id":103},"structs",[105],{"type":23,"value":66},{"type":17,"tag":25,"props":107,"children":108},{},[109],{"type":23,"value":110},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":112,"props":113,"children":117},"pre",{"className":114,"code":115,"language":116,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[118],{"type":17,"tag":119,"props":120,"children":121},"code",{"__ignoreMap":7},[122,146,159,172],{"type":17,"tag":123,"props":124,"children":127},"span",{"class":125,"line":126},"line",1,[128,134,140],{"type":17,"tag":123,"props":129,"children":131},{"style":130},"--shiki-default:#D73A49;--shiki-dark:#F97583",[132],{"type":23,"value":133},"struct",{"type":17,"tag":123,"props":135,"children":137},{"style":136},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[138],{"type":23,"value":139}," Point",{"type":17,"tag":123,"props":141,"children":143},{"style":142},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[144],{"type":23,"value":145}," {\n",{"type":17,"tag":123,"props":147,"children":148},{"class":125,"line":35},[149,154],{"type":17,"tag":123,"props":150,"children":151},{"style":130},[152],{"type":23,"value":153},"    int",{"type":17,"tag":123,"props":155,"children":156},{"style":142},[157],{"type":23,"value":158}," x;\n",{"type":17,"tag":123,"props":160,"children":162},{"class":125,"line":161},3,[163,167],{"type":17,"tag":123,"props":164,"children":165},{"style":130},[166],{"type":23,"value":153},{"type":17,"tag":123,"props":168,"children":169},{"style":142},[170],{"type":23,"value":171}," y;\n",{"type":17,"tag":123,"props":173,"children":175},{"class":125,"line":174},4,[176],{"type":17,"tag":123,"props":177,"children":178},{"style":142},[179],{"type":23,"value":180},"}\n",{"type":17,"tag":182,"props":183,"children":185},"h2",{"id":184},"bit-fields",[186],{"type":23,"value":187},"Bit-fields",{"type":17,"tag":25,"props":189,"children":190},{},[191],{"type":23,"value":192},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":112,"props":194,"children":196},{"className":114,"code":195,"language":116,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[197],{"type":17,"tag":119,"props":198,"children":199},{"__ignoreMap":7},[200,216,244,268,293,318],{"type":17,"tag":123,"props":201,"children":202},{"class":125,"line":126},[203,207,212],{"type":17,"tag":123,"props":204,"children":205},{"style":130},[206],{"type":23,"value":133},{"type":17,"tag":123,"props":208,"children":209},{"style":136},[210],{"type":23,"value":211}," MouseInput",{"type":17,"tag":123,"props":213,"children":214},{"style":142},[215],{"type":23,"value":145},{"type":17,"tag":123,"props":217,"children":218},{"class":125,"line":35},[219,223,228,233,239],{"type":17,"tag":123,"props":220,"children":221},{"style":130},[222],{"type":23,"value":153},{"type":17,"tag":123,"props":224,"children":225},{"style":142},[226],{"type":23,"value":227}," y ",{"type":17,"tag":123,"props":229,"children":230},{"style":130},[231],{"type":23,"value":232},":",{"type":17,"tag":123,"props":234,"children":236},{"style":235},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[237],{"type":23,"value":238}," 7",{"type":17,"tag":123,"props":240,"children":241},{"style":142},[242],{"type":23,"value":243},";\n",{"type":17,"tag":123,"props":245,"children":246},{"class":125,"line":161},[247,251,256,260,264],{"type":17,"tag":123,"props":248,"children":249},{"style":130},[250],{"type":23,"value":153},{"type":17,"tag":123,"props":252,"children":253},{"style":142},[254],{"type":23,"value":255}," x ",{"type":17,"tag":123,"props":257,"children":258},{"style":130},[259],{"type":23,"value":232},{"type":17,"tag":123,"props":261,"children":262},{"style":235},[263],{"type":23,"value":238},{"type":17,"tag":123,"props":265,"children":266},{"style":142},[267],{"type":23,"value":243},{"type":17,"tag":123,"props":269,"children":270},{"class":125,"line":174},[271,275,280,284,289],{"type":17,"tag":123,"props":272,"children":273},{"style":130},[274],{"type":23,"value":153},{"type":17,"tag":123,"props":276,"children":277},{"style":142},[278],{"type":23,"value":279}," left ",{"type":17,"tag":123,"props":281,"children":282},{"style":130},[283],{"type":23,"value":232},{"type":17,"tag":123,"props":285,"children":286},{"style":235},[287],{"type":23,"value":288}," 1",{"type":17,"tag":123,"props":290,"children":291},{"style":142},[292],{"type":23,"value":243},{"type":17,"tag":123,"props":294,"children":296},{"class":125,"line":295},5,[297,301,306,310,314],{"type":17,"tag":123,"props":298,"children":299},{"style":130},[300],{"type":23,"value":153},{"type":17,"tag":123,"props":302,"children":303},{"style":142},[304],{"type":23,"value":305}," right ",{"type":17,"tag":123,"props":307,"children":308},{"style":130},[309],{"type":23,"value":232},{"type":17,"tag":123,"props":311,"children":312},{"style":235},[313],{"type":23,"value":288},{"type":17,"tag":123,"props":315,"children":316},{"style":142},[317],{"type":23,"value":243},{"type":17,"tag":123,"props":319,"children":321},{"class":125,"line":320},6,[322],{"type":17,"tag":123,"props":323,"children":324},{"style":142},[325],{"type":23,"value":180},{"type":17,"tag":327,"props":328,"children":329},"warning",{},[330],{"type":17,"tag":25,"props":331,"children":332},{},[333,339,341,345],{"type":17,"tag":334,"props":335,"children":336},"strong",{},[337],{"type":23,"value":338},"Note:",{"type":23,"value":340}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":342,"props":343,"children":344},"br",{},[],{"type":23,"value":346},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":348,"props":349,"children":351},"h3",{"id":350},"bit-offsets",[352],{"type":23,"value":353},"Bit offsets",{"type":17,"tag":25,"props":355,"children":356},{},[357],{"type":23,"value":358},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":112,"props":360,"children":362},{"className":114,"code":361,"language":116,"meta":7,"style":7},"struct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[363],{"type":17,"tag":119,"props":364,"children":365},{"__ignoreMap":7},[366,382,409,434,459],{"type":17,"tag":123,"props":367,"children":368},{"class":125,"line":126},[369,373,378],{"type":17,"tag":123,"props":370,"children":371},{"style":130},[372],{"type":23,"value":133},{"type":17,"tag":123,"props":374,"children":375},{"style":136},[376],{"type":23,"value":377}," Example",{"type":17,"tag":123,"props":379,"children":380},{"style":142},[381],{"type":23,"value":145},{"type":17,"tag":123,"props":383,"children":384},{"class":125,"line":35},[385,389,394,398,403],{"type":17,"tag":123,"props":386,"children":387},{"style":130},[388],{"type":23,"value":153},{"type":17,"tag":123,"props":390,"children":391},{"style":142},[392],{"type":23,"value":393}," a ",{"type":17,"tag":123,"props":395,"children":396},{"style":130},[397],{"type":23,"value":232},{"type":17,"tag":123,"props":399,"children":400},{"style":235},[401],{"type":23,"value":402}," 8",{"type":17,"tag":123,"props":404,"children":406},{"style":405},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[407],{"type":23,"value":408}," // Offset 0 with 8 bits\n",{"type":17,"tag":123,"props":410,"children":411},{"class":125,"line":161},[412,416,421,425,429],{"type":17,"tag":123,"props":413,"children":414},{"style":130},[415],{"type":23,"value":153},{"type":17,"tag":123,"props":417,"children":418},{"style":142},[419],{"type":23,"value":420}," b ",{"type":17,"tag":123,"props":422,"children":423},{"style":130},[424],{"type":23,"value":232},{"type":17,"tag":123,"props":426,"children":427},{"style":235},[428],{"type":23,"value":402},{"type":17,"tag":123,"props":430,"children":431},{"style":405},[432],{"type":23,"value":433}," // Offset 8 with 8 bits\n",{"type":17,"tag":123,"props":435,"children":436},{"class":125,"line":174},[437,441,446,450,454],{"type":17,"tag":123,"props":438,"children":439},{"style":130},[440],{"type":23,"value":153},{"type":17,"tag":123,"props":442,"children":443},{"style":142},[444],{"type":23,"value":445}," c ",{"type":17,"tag":123,"props":447,"children":448},{"style":130},[449],{"type":23,"value":232},{"type":17,"tag":123,"props":451,"children":452},{"style":235},[453],{"type":23,"value":402},{"type":17,"tag":123,"props":455,"children":456},{"style":405},[457],{"type":23,"value":458}," // Offset 16 with 8 bits\n",{"type":17,"tag":123,"props":460,"children":461},{"class":125,"line":295},[462],{"type":17,"tag":123,"props":463,"children":464},{"style":142},[465],{"type":23,"value":180},{"type":17,"tag":25,"props":467,"children":468},{},[469],{"type":23,"value":470},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":112,"props":472,"children":475},{"className":114,"code":473,"highlights":474,"language":116,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[295],[476],{"type":17,"tag":119,"props":477,"children":478},{"__ignoreMap":7},[479,487,503,527,551,576],{"type":17,"tag":123,"props":480,"children":481},{"class":125,"line":126},[482],{"type":17,"tag":123,"props":483,"children":484},{"style":405},[485],{"type":23,"value":486},"// Note: the following example will not compile\n",{"type":17,"tag":123,"props":488,"children":489},{"class":125,"line":35},[490,494,499],{"type":17,"tag":123,"props":491,"children":492},{"style":130},[493],{"type":23,"value":133},{"type":17,"tag":123,"props":495,"children":496},{"style":136},[497],{"type":23,"value":498}," InvalidExample",{"type":17,"tag":123,"props":500,"children":501},{"style":142},[502],{"type":23,"value":145},{"type":17,"tag":123,"props":504,"children":505},{"class":125,"line":161},[506,510,514,518,522],{"type":17,"tag":123,"props":507,"children":508},{"style":130},[509],{"type":23,"value":153},{"type":17,"tag":123,"props":511,"children":512},{"style":142},[513],{"type":23,"value":393},{"type":17,"tag":123,"props":515,"children":516},{"style":130},[517],{"type":23,"value":232},{"type":17,"tag":123,"props":519,"children":520},{"style":235},[521],{"type":23,"value":238},{"type":17,"tag":123,"props":523,"children":524},{"style":405},[525],{"type":23,"value":526}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":123,"props":528,"children":529},{"class":125,"line":174},[530,534,538,542,546],{"type":17,"tag":123,"props":531,"children":532},{"style":130},[533],{"type":23,"value":153},{"type":17,"tag":123,"props":535,"children":536},{"style":142},[537],{"type":23,"value":420},{"type":17,"tag":123,"props":539,"children":540},{"style":130},[541],{"type":23,"value":232},{"type":17,"tag":123,"props":543,"children":544},{"style":235},[545],{"type":23,"value":238},{"type":17,"tag":123,"props":547,"children":548},{"style":405},[549],{"type":23,"value":550}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":123,"props":552,"children":554},{"class":553,"line":295},"line highlight",[555,559,563,567,571],{"type":17,"tag":123,"props":556,"children":557},{"style":130},[558],{"type":23,"value":153},{"type":17,"tag":123,"props":560,"children":561},{"style":142},[562],{"type":23,"value":445},{"type":17,"tag":123,"props":564,"children":565},{"style":130},[566],{"type":23,"value":232},{"type":17,"tag":123,"props":568,"children":569},{"style":235},[570],{"type":23,"value":238},{"type":17,"tag":123,"props":572,"children":573},{"style":405},[574],{"type":23,"value":575}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":123,"props":577,"children":578},{"class":125,"line":320},[579],{"type":17,"tag":123,"props":580,"children":581},{"style":142},[582],{"type":23,"value":180},{"type":17,"tag":25,"props":584,"children":585},{},[586],{"type":23,"value":587},"When a normal field is introduced, the offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":112,"props":589,"children":592},{"className":114,"code":590,"highlights":591,"language":116,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[174],[593],{"type":17,"tag":119,"props":594,"children":595},{"__ignoreMap":7},[596,611,635,659,676,701],{"type":17,"tag":123,"props":597,"children":598},{"class":125,"line":126},[599,603,607],{"type":17,"tag":123,"props":600,"children":601},{"style":130},[602],{"type":23,"value":133},{"type":17,"tag":123,"props":604,"children":605},{"style":136},[606],{"type":23,"value":377},{"type":17,"tag":123,"props":608,"children":609},{"style":142},[610],{"type":23,"value":145},{"type":17,"tag":123,"props":612,"children":613},{"class":125,"line":35},[614,618,622,626,630],{"type":17,"tag":123,"props":615,"children":616},{"style":130},[617],{"type":23,"value":153},{"type":17,"tag":123,"props":619,"children":620},{"style":142},[621],{"type":23,"value":393},{"type":17,"tag":123,"props":623,"children":624},{"style":130},[625],{"type":23,"value":232},{"type":17,"tag":123,"props":627,"children":628},{"style":235},[629],{"type":23,"value":238},{"type":17,"tag":123,"props":631,"children":632},{"style":405},[633],{"type":23,"value":634},"   //          Offset 0,    7 bits\n",{"type":17,"tag":123,"props":636,"children":637},{"class":125,"line":161},[638,642,646,650,654],{"type":17,"tag":123,"props":639,"children":640},{"style":130},[641],{"type":23,"value":153},{"type":17,"tag":123,"props":643,"children":644},{"style":142},[645],{"type":23,"value":420},{"type":17,"tag":123,"props":647,"children":648},{"style":130},[649],{"type":23,"value":232},{"type":17,"tag":123,"props":651,"children":652},{"style":235},[653],{"type":23,"value":238},{"type":17,"tag":123,"props":655,"children":656},{"style":405},[657],{"type":23,"value":658},"   //          Offset 7,    7 bits\n",{"type":17,"tag":123,"props":660,"children":661},{"class":553,"line":174},[662,666,671],{"type":17,"tag":123,"props":663,"children":664},{"style":130},[665],{"type":23,"value":153},{"type":17,"tag":123,"props":667,"children":668},{"style":142},[669],{"type":23,"value":670}," c       ",{"type":17,"tag":123,"props":672,"children":673},{"style":405},[674],{"type":23,"value":675},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":123,"props":677,"children":678},{"class":125,"line":295},[679,683,688,692,696],{"type":17,"tag":123,"props":680,"children":681},{"style":130},[682],{"type":23,"value":153},{"type":17,"tag":123,"props":684,"children":685},{"style":142},[686],{"type":23,"value":687}," d ",{"type":17,"tag":123,"props":689,"children":690},{"style":130},[691],{"type":23,"value":232},{"type":17,"tag":123,"props":693,"children":694},{"style":235},[695],{"type":23,"value":238},{"type":17,"tag":123,"props":697,"children":698},{"style":405},[699],{"type":23,"value":700},"   //          Offset 32,   7 bits\n",{"type":17,"tag":123,"props":702,"children":703},{"class":125,"line":320},[704],{"type":17,"tag":123,"props":705,"children":706},{"style":142},[707],{"type":23,"value":180},{"type":17,"tag":182,"props":709,"children":711},{"id":710},"initializing-structs",[712],{"type":23,"value":713},"Initializing structs",{"type":17,"tag":25,"props":715,"children":716},{},[717,719,724,726,731],{"type":23,"value":718},"Structs can be initialized by using curly braces (",{"type":17,"tag":119,"props":720,"children":721},{"className":7},[722],{"type":23,"value":723},"{",{"type":23,"value":725}," and ",{"type":17,"tag":119,"props":727,"children":728},{"className":7},[729],{"type":23,"value":730},"}",{"type":23,"value":732},") to specify the values of the fields. For example:",{"type":17,"tag":112,"props":734,"children":739},{"className":114,"code":735,"filename":736,"highlights":737,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[738],7,[740],{"type":17,"tag":119,"props":741,"children":742},{"__ignoreMap":7},[743,758,769,780,787,795,803],{"type":17,"tag":123,"props":744,"children":745},{"class":125,"line":126},[746,750,754],{"type":17,"tag":123,"props":747,"children":748},{"style":130},[749],{"type":23,"value":133},{"type":17,"tag":123,"props":751,"children":752},{"style":136},[753],{"type":23,"value":139},{"type":17,"tag":123,"props":755,"children":756},{"style":142},[757],{"type":23,"value":145},{"type":17,"tag":123,"props":759,"children":760},{"class":125,"line":35},[761,765],{"type":17,"tag":123,"props":762,"children":763},{"style":130},[764],{"type":23,"value":153},{"type":17,"tag":123,"props":766,"children":767},{"style":142},[768],{"type":23,"value":158},{"type":17,"tag":123,"props":770,"children":771},{"class":125,"line":161},[772,776],{"type":17,"tag":123,"props":773,"children":774},{"style":130},[775],{"type":23,"value":153},{"type":17,"tag":123,"props":777,"children":778},{"style":142},[779],{"type":23,"value":171},{"type":17,"tag":123,"props":781,"children":782},{"class":125,"line":174},[783],{"type":17,"tag":123,"props":784,"children":785},{"style":142},[786],{"type":23,"value":180},{"type":17,"tag":123,"props":788,"children":789},{"class":125,"line":295},[790],{"type":17,"tag":123,"props":791,"children":792},{"emptyLinePlaceholder":55},[793],{"type":23,"value":794},"\n",{"type":17,"tag":123,"props":796,"children":797},{"class":125,"line":320},[798],{"type":17,"tag":123,"props":799,"children":800},{"style":405},[801],{"type":23,"value":802},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":123,"props":804,"children":805},{"class":553,"line":738},[806,811,816,821,826,831,836,841],{"type":17,"tag":123,"props":807,"children":808},{"style":136},[809],{"type":23,"value":810},"Point",{"type":17,"tag":123,"props":812,"children":813},{"style":142},[814],{"type":23,"value":815}," point ",{"type":17,"tag":123,"props":817,"children":818},{"style":130},[819],{"type":23,"value":820},"=",{"type":17,"tag":123,"props":822,"children":823},{"style":142},[824],{"type":23,"value":825}," { ",{"type":17,"tag":123,"props":827,"children":828},{"style":235},[829],{"type":23,"value":830},"1",{"type":17,"tag":123,"props":832,"children":833},{"style":142},[834],{"type":23,"value":835},", ",{"type":17,"tag":123,"props":837,"children":838},{"style":235},[839],{"type":23,"value":840},"2",{"type":17,"tag":123,"props":842,"children":843},{"style":142},[844],{"type":23,"value":845}," }\n",{"type":17,"tag":25,"props":847,"children":848},{},[849],{"type":23,"value":850},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":112,"props":852,"children":856},{"className":114,"code":853,"filename":736,"highlights":854,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[855],8,[857],{"type":17,"tag":119,"props":858,"children":859},{"__ignoreMap":7},[860,875,886,897,904,911,919,927],{"type":17,"tag":123,"props":861,"children":862},{"class":125,"line":126},[863,867,871],{"type":17,"tag":123,"props":864,"children":865},{"style":130},[866],{"type":23,"value":133},{"type":17,"tag":123,"props":868,"children":869},{"style":136},[870],{"type":23,"value":139},{"type":17,"tag":123,"props":872,"children":873},{"style":142},[874],{"type":23,"value":145},{"type":17,"tag":123,"props":876,"children":877},{"class":125,"line":35},[878,882],{"type":17,"tag":123,"props":879,"children":880},{"style":130},[881],{"type":23,"value":153},{"type":17,"tag":123,"props":883,"children":884},{"style":142},[885],{"type":23,"value":158},{"type":17,"tag":123,"props":887,"children":888},{"class":125,"line":161},[889,893],{"type":17,"tag":123,"props":890,"children":891},{"style":130},[892],{"type":23,"value":153},{"type":17,"tag":123,"props":894,"children":895},{"style":142},[896],{"type":23,"value":171},{"type":17,"tag":123,"props":898,"children":899},{"class":125,"line":174},[900],{"type":17,"tag":123,"props":901,"children":902},{"style":142},[903],{"type":23,"value":180},{"type":17,"tag":123,"props":905,"children":906},{"class":125,"line":295},[907],{"type":17,"tag":123,"props":908,"children":909},{"emptyLinePlaceholder":55},[910],{"type":23,"value":794},{"type":17,"tag":123,"props":912,"children":913},{"class":125,"line":320},[914],{"type":17,"tag":123,"props":915,"children":916},{"style":405},[917],{"type":23,"value":918},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":123,"props":920,"children":921},{"class":125,"line":738},[922],{"type":17,"tag":123,"props":923,"children":924},{"style":405},[925],{"type":23,"value":926},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":123,"props":928,"children":929},{"class":553,"line":855},[930,934,938,942,947,951,956,960],{"type":17,"tag":123,"props":931,"children":932},{"style":136},[933],{"type":23,"value":810},{"type":17,"tag":123,"props":935,"children":936},{"style":142},[937],{"type":23,"value":815},{"type":17,"tag":123,"props":939,"children":940},{"style":130},[941],{"type":23,"value":820},{"type":17,"tag":123,"props":943,"children":944},{"style":142},[945],{"type":23,"value":946}," { y: ",{"type":17,"tag":123,"props":948,"children":949},{"style":235},[950],{"type":23,"value":840},{"type":17,"tag":123,"props":952,"children":953},{"style":142},[954],{"type":23,"value":955},", x: ",{"type":17,"tag":123,"props":957,"children":958},{"style":235},[959],{"type":23,"value":830},{"type":17,"tag":123,"props":961,"children":962},{"style":142},[963],{"type":23,"value":845},{"type":17,"tag":182,"props":965,"children":967},{"id":966},"accessing-fields",[968],{"type":23,"value":969},"Accessing fields",{"type":17,"tag":25,"props":971,"children":972},{},[973,975,980],{"type":23,"value":974},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":119,"props":976,"children":977},{"className":7},[978],{"type":23,"value":979},".",{"type":23,"value":981},") operator. For example:",{"type":17,"tag":112,"props":983,"children":987},{"className":114,"code":984,"filename":736,"highlights":985,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[986],9,[988],{"type":17,"tag":119,"props":989,"children":990},{"__ignoreMap":7},[991,1006,1017,1028,1035,1042,1077,1084,1092],{"type":17,"tag":123,"props":992,"children":993},{"class":125,"line":126},[994,998,1002],{"type":17,"tag":123,"props":995,"children":996},{"style":130},[997],{"type":23,"value":133},{"type":17,"tag":123,"props":999,"children":1000},{"style":136},[1001],{"type":23,"value":139},{"type":17,"tag":123,"props":1003,"children":1004},{"style":142},[1005],{"type":23,"value":145},{"type":17,"tag":123,"props":1007,"children":1008},{"class":125,"line":35},[1009,1013],{"type":17,"tag":123,"props":1010,"children":1011},{"style":130},[1012],{"type":23,"value":153},{"type":17,"tag":123,"props":1014,"children":1015},{"style":142},[1016],{"type":23,"value":158},{"type":17,"tag":123,"props":1018,"children":1019},{"class":125,"line":161},[1020,1024],{"type":17,"tag":123,"props":1021,"children":1022},{"style":130},[1023],{"type":23,"value":153},{"type":17,"tag":123,"props":1025,"children":1026},{"style":142},[1027],{"type":23,"value":171},{"type":17,"tag":123,"props":1029,"children":1030},{"class":125,"line":174},[1031],{"type":17,"tag":123,"props":1032,"children":1033},{"style":142},[1034],{"type":23,"value":180},{"type":17,"tag":123,"props":1036,"children":1037},{"class":125,"line":295},[1038],{"type":17,"tag":123,"props":1039,"children":1040},{"emptyLinePlaceholder":55},[1041],{"type":23,"value":794},{"type":17,"tag":123,"props":1043,"children":1044},{"class":125,"line":320},[1045,1049,1053,1057,1061,1065,1069,1073],{"type":17,"tag":123,"props":1046,"children":1047},{"style":136},[1048],{"type":23,"value":810},{"type":17,"tag":123,"props":1050,"children":1051},{"style":142},[1052],{"type":23,"value":815},{"type":17,"tag":123,"props":1054,"children":1055},{"style":130},[1056],{"type":23,"value":820},{"type":17,"tag":123,"props":1058,"children":1059},{"style":142},[1060],{"type":23,"value":825},{"type":17,"tag":123,"props":1062,"children":1063},{"style":235},[1064],{"type":23,"value":830},{"type":17,"tag":123,"props":1066,"children":1067},{"style":142},[1068],{"type":23,"value":835},{"type":17,"tag":123,"props":1070,"children":1071},{"style":235},[1072],{"type":23,"value":840},{"type":17,"tag":123,"props":1074,"children":1075},{"style":142},[1076],{"type":23,"value":845},{"type":17,"tag":123,"props":1078,"children":1079},{"class":125,"line":738},[1080],{"type":17,"tag":123,"props":1081,"children":1082},{"emptyLinePlaceholder":55},[1083],{"type":23,"value":794},{"type":17,"tag":123,"props":1085,"children":1086},{"class":125,"line":855},[1087],{"type":17,"tag":123,"props":1088,"children":1089},{"style":405},[1090],{"type":23,"value":1091},"// Access the x field of the point\n",{"type":17,"tag":123,"props":1093,"children":1094},{"class":553,"line":986},[1095,1100,1104,1108],{"type":17,"tag":123,"props":1096,"children":1097},{"style":130},[1098],{"type":23,"value":1099},"int",{"type":17,"tag":123,"props":1101,"children":1102},{"style":142},[1103],{"type":23,"value":255},{"type":17,"tag":123,"props":1105,"children":1106},{"style":130},[1107],{"type":23,"value":820},{"type":17,"tag":123,"props":1109,"children":1110},{"style":142},[1111],{"type":23,"value":1112}," point.x\n",{"type":17,"tag":182,"props":1114,"children":1116},{"id":1115},"nested-structs",[1117],{"type":23,"value":1118},"Nested structs",{"type":17,"tag":25,"props":1120,"children":1121},{},[1122],{"type":23,"value":1123},"Structs can be nested inside other structs. For example:",{"type":17,"tag":112,"props":1125,"children":1127},{"className":114,"code":1126,"filename":736,"language":116,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1128],{"type":17,"tag":119,"props":1129,"children":1130},{"__ignoreMap":7},[1131,1146,1157,1168,1175,1182,1198,1211,1223,1230,1238,1260,1287,1314,1322,1330,1339],{"type":17,"tag":123,"props":1132,"children":1133},{"class":125,"line":126},[1134,1138,1142],{"type":17,"tag":123,"props":1135,"children":1136},{"style":130},[1137],{"type":23,"value":133},{"type":17,"tag":123,"props":1139,"children":1140},{"style":136},[1141],{"type":23,"value":139},{"type":17,"tag":123,"props":1143,"children":1144},{"style":142},[1145],{"type":23,"value":145},{"type":17,"tag":123,"props":1147,"children":1148},{"class":125,"line":35},[1149,1153],{"type":17,"tag":123,"props":1150,"children":1151},{"style":130},[1152],{"type":23,"value":153},{"type":17,"tag":123,"props":1154,"children":1155},{"style":142},[1156],{"type":23,"value":158},{"type":17,"tag":123,"props":1158,"children":1159},{"class":125,"line":161},[1160,1164],{"type":17,"tag":123,"props":1161,"children":1162},{"style":130},[1163],{"type":23,"value":153},{"type":17,"tag":123,"props":1165,"children":1166},{"style":142},[1167],{"type":23,"value":171},{"type":17,"tag":123,"props":1169,"children":1170},{"class":125,"line":174},[1171],{"type":17,"tag":123,"props":1172,"children":1173},{"style":142},[1174],{"type":23,"value":180},{"type":17,"tag":123,"props":1176,"children":1177},{"class":125,"line":295},[1178],{"type":17,"tag":123,"props":1179,"children":1180},{"emptyLinePlaceholder":55},[1181],{"type":23,"value":794},{"type":17,"tag":123,"props":1183,"children":1184},{"class":125,"line":320},[1185,1189,1194],{"type":17,"tag":123,"props":1186,"children":1187},{"style":130},[1188],{"type":23,"value":133},{"type":17,"tag":123,"props":1190,"children":1191},{"style":136},[1192],{"type":23,"value":1193}," Rectangle",{"type":17,"tag":123,"props":1195,"children":1196},{"style":142},[1197],{"type":23,"value":145},{"type":17,"tag":123,"props":1199,"children":1200},{"class":125,"line":738},[1201,1206],{"type":17,"tag":123,"props":1202,"children":1203},{"style":136},[1204],{"type":23,"value":1205},"    Point",{"type":17,"tag":123,"props":1207,"children":1208},{"style":142},[1209],{"type":23,"value":1210}," topLeft;\n",{"type":17,"tag":123,"props":1212,"children":1213},{"class":125,"line":855},[1214,1218],{"type":17,"tag":123,"props":1215,"children":1216},{"style":136},[1217],{"type":23,"value":1205},{"type":17,"tag":123,"props":1219,"children":1220},{"style":142},[1221],{"type":23,"value":1222}," bottomRight;\n",{"type":17,"tag":123,"props":1224,"children":1225},{"class":125,"line":986},[1226],{"type":17,"tag":123,"props":1227,"children":1228},{"style":142},[1229],{"type":23,"value":180},{"type":17,"tag":123,"props":1231,"children":1233},{"class":125,"line":1232},10,[1234],{"type":17,"tag":123,"props":1235,"children":1236},{"emptyLinePlaceholder":55},[1237],{"type":23,"value":794},{"type":17,"tag":123,"props":1239,"children":1241},{"class":125,"line":1240},11,[1242,1247,1252,1256],{"type":17,"tag":123,"props":1243,"children":1244},{"style":136},[1245],{"type":23,"value":1246},"Rectangle",{"type":17,"tag":123,"props":1248,"children":1249},{"style":142},[1250],{"type":23,"value":1251}," rectangle ",{"type":17,"tag":123,"props":1253,"children":1254},{"style":130},[1255],{"type":23,"value":820},{"type":17,"tag":123,"props":1257,"children":1258},{"style":142},[1259],{"type":23,"value":145},{"type":17,"tag":123,"props":1261,"children":1263},{"class":125,"line":1262},12,[1264,1269,1273,1278,1282],{"type":17,"tag":123,"props":1265,"children":1266},{"style":142},[1267],{"type":23,"value":1268},"    topLeft: { x: ",{"type":17,"tag":123,"props":1270,"children":1271},{"style":235},[1272],{"type":23,"value":830},{"type":17,"tag":123,"props":1274,"children":1275},{"style":142},[1276],{"type":23,"value":1277},", y: ",{"type":17,"tag":123,"props":1279,"children":1280},{"style":235},[1281],{"type":23,"value":840},{"type":17,"tag":123,"props":1283,"children":1284},{"style":142},[1285],{"type":23,"value":1286}," },\n",{"type":17,"tag":123,"props":1288,"children":1290},{"class":125,"line":1289},13,[1291,1296,1301,1305,1310],{"type":17,"tag":123,"props":1292,"children":1293},{"style":142},[1294],{"type":23,"value":1295},"    bottomRight: { x: ",{"type":17,"tag":123,"props":1297,"children":1298},{"style":235},[1299],{"type":23,"value":1300},"3",{"type":17,"tag":123,"props":1302,"children":1303},{"style":142},[1304],{"type":23,"value":1277},{"type":17,"tag":123,"props":1306,"children":1307},{"style":235},[1308],{"type":23,"value":1309},"4",{"type":17,"tag":123,"props":1311,"children":1312},{"style":142},[1313],{"type":23,"value":845},{"type":17,"tag":123,"props":1315,"children":1317},{"class":125,"line":1316},14,[1318],{"type":17,"tag":123,"props":1319,"children":1320},{"style":142},[1321],{"type":23,"value":180},{"type":17,"tag":123,"props":1323,"children":1325},{"class":125,"line":1324},15,[1326],{"type":17,"tag":123,"props":1327,"children":1328},{"emptyLinePlaceholder":55},[1329],{"type":23,"value":794},{"type":17,"tag":123,"props":1331,"children":1333},{"class":125,"line":1332},16,[1334],{"type":17,"tag":123,"props":1335,"children":1336},{"style":405},[1337],{"type":23,"value":1338},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":123,"props":1340,"children":1342},{"class":125,"line":1341},17,[1343,1347,1351,1355],{"type":17,"tag":123,"props":1344,"children":1345},{"style":130},[1346],{"type":23,"value":1099},{"type":17,"tag":123,"props":1348,"children":1349},{"style":142},[1350],{"type":23,"value":255},{"type":17,"tag":123,"props":1352,"children":1353},{"style":130},[1354],{"type":23,"value":820},{"type":17,"tag":123,"props":1356,"children":1357},{"style":142},[1358],{"type":23,"value":1359}," rectangle.topLeft.x\n",{"type":17,"tag":1361,"props":1362,"children":1363},"style",{},[1364],{"type":23,"value":1365},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":35,"depth":35,"links":1367},[1368,1371,1372,1373],{"id":184,"depth":35,"text":187,"children":1369},[1370],{"id":350,"depth":161,"text":353},{"id":710,"depth":35,"text":713},{"id":966,"depth":35,"text":969},{"id":1115,"depth":35,"text":1118},"content:docs:3.language-reference:1.structs.md","docs/3.language-reference/1.structs.md",1698346814460]