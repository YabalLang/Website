[{"data":1,"prerenderedAt":3123},["Reactive",2],{"content-query-EYabfiwUqJ":3,"content-navigation-8C37fagqQL":42,"content-navigation-Lhv2WviZJC":94,"content-query-x47RLZfWto":103,"content-query-5fE3YeJItF":1384,"content-query-PDtwmMvGbW":1976},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":37,"_id":38,"_source":39,"_file":40,"_extension":41},"/docs/language-reference","docs",false,"","Language reference","All the details about the language.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":34},"root",[16,24,30],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"language-reference",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This section contains all the details about the Yabal language.",{"type":17,"tag":31,"props":32,"children":33},"related",{":tags":20},[],{"title":7,"searchDepth":35,"depth":35,"links":36},2,[],"markdown","content:docs:3.language-reference:index.md","content","docs/3.language-reference/index.md","md",[43],{"title":44,"_path":45,"children":46,"root":55},"Documentation","/docs",[47,48,63,75,83],{"title":44,"_path":45},{"title":49,"_path":50,"children":51,"sidebar":6},"Getting started","/docs/get-started",[52,56,59,62],{"title":53,"_path":54,"sidebar":55},"Downloads","/docs/get-started/downloads",true,{"title":57,"_path":58,"sidebar":55},"Emulator","/docs/get-started/emulator",{"title":60,"_path":61,"sidebar":55},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":49,"_path":50,"sidebar":6},{"title":8,"_path":4,"children":64,"sidebar":6},[65,68,71,74],{"title":66,"_path":67,"sidebar":55},"Structs","/docs/language-reference/structs",{"title":69,"_path":70,"sidebar":55},"Function pointers","/docs/language-reference/function-pointer",{"title":72,"_path":73,"sidebar":55},"Stack allocations","/docs/language-reference/stack-allocations",{"title":8,"_path":4,"sidebar":6},{"title":76,"_path":77,"children":78,"sidebar":6},"Perhipherals","/docs/peripherals",[79,82],{"title":80,"_path":81,"sidebar":55},"Screen","/docs/peripherals/screen",{"title":76,"_path":77,"sidebar":6},{"title":84,"_path":85,"children":86,"sidebar":6},"Advanced topics","/docs/advanced-topics",[87,90,93],{"title":88,"_path":89,"sidebar":55},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":91,"_path":92,"sidebar":55},"Optimizing","/docs/advanced-topics/optimizing",{"title":84,"_path":85,"sidebar":6},[95],{"title":44,"_path":45,"children":96,"root":55},[97],{"title":98,"_path":4,"children":99},"Language Reference",[100,101,102],{"title":66,"_path":67,"sidebar":55},{"title":69,"_path":70,"sidebar":55},{"title":72,"_path":73,"sidebar":55},{"_path":67,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":66,"description":104,"tags":105,"navigation":106,"body":107,"_type":37,"_id":1382,"_source":39,"_file":1383,"_extension":41},"Learn more about structs.",[20],{"sidebar":55},{"type":14,"children":108,"toc":1374},[109,114,119,189,196,201,334,355,362,367,474,479,591,596,716,722,741,854,859,972,978,990,1121,1127,1132,1368],{"type":17,"tag":18,"props":110,"children":112},{"id":111},"structs",[113],{"type":23,"value":66},{"type":17,"tag":25,"props":115,"children":116},{},[117],{"type":23,"value":118},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":120,"props":121,"children":125},"pre",{"className":122,"code":123,"language":124,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[126],{"type":17,"tag":127,"props":128,"children":129},"code",{"__ignoreMap":7},[130,154,167,180],{"type":17,"tag":131,"props":132,"children":135},"span",{"class":133,"line":134},"line",1,[136,142,148],{"type":17,"tag":131,"props":137,"children":139},{"style":138},"--shiki-default:#D73A49;--shiki-dark:#F97583",[140],{"type":23,"value":141},"struct",{"type":17,"tag":131,"props":143,"children":145},{"style":144},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[146],{"type":23,"value":147}," Point",{"type":17,"tag":131,"props":149,"children":151},{"style":150},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[152],{"type":23,"value":153}," {\n",{"type":17,"tag":131,"props":155,"children":156},{"class":133,"line":35},[157,162],{"type":17,"tag":131,"props":158,"children":159},{"style":138},[160],{"type":23,"value":161},"    int",{"type":17,"tag":131,"props":163,"children":164},{"style":150},[165],{"type":23,"value":166}," x;\n",{"type":17,"tag":131,"props":168,"children":170},{"class":133,"line":169},3,[171,175],{"type":17,"tag":131,"props":172,"children":173},{"style":138},[174],{"type":23,"value":161},{"type":17,"tag":131,"props":176,"children":177},{"style":150},[178],{"type":23,"value":179}," y;\n",{"type":17,"tag":131,"props":181,"children":183},{"class":133,"line":182},4,[184],{"type":17,"tag":131,"props":185,"children":186},{"style":150},[187],{"type":23,"value":188},"}\n",{"type":17,"tag":190,"props":191,"children":193},"h2",{"id":192},"bit-fields",[194],{"type":23,"value":195},"Bit-fields",{"type":17,"tag":25,"props":197,"children":198},{},[199],{"type":23,"value":200},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":120,"props":202,"children":204},{"className":122,"code":203,"language":124,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[205],{"type":17,"tag":127,"props":206,"children":207},{"__ignoreMap":7},[208,224,252,276,301,326],{"type":17,"tag":131,"props":209,"children":210},{"class":133,"line":134},[211,215,220],{"type":17,"tag":131,"props":212,"children":213},{"style":138},[214],{"type":23,"value":141},{"type":17,"tag":131,"props":216,"children":217},{"style":144},[218],{"type":23,"value":219}," MouseInput",{"type":17,"tag":131,"props":221,"children":222},{"style":150},[223],{"type":23,"value":153},{"type":17,"tag":131,"props":225,"children":226},{"class":133,"line":35},[227,231,236,241,247],{"type":17,"tag":131,"props":228,"children":229},{"style":138},[230],{"type":23,"value":161},{"type":17,"tag":131,"props":232,"children":233},{"style":150},[234],{"type":23,"value":235}," y ",{"type":17,"tag":131,"props":237,"children":238},{"style":138},[239],{"type":23,"value":240},":",{"type":17,"tag":131,"props":242,"children":244},{"style":243},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[245],{"type":23,"value":246}," 7",{"type":17,"tag":131,"props":248,"children":249},{"style":150},[250],{"type":23,"value":251},";\n",{"type":17,"tag":131,"props":253,"children":254},{"class":133,"line":169},[255,259,264,268,272],{"type":17,"tag":131,"props":256,"children":257},{"style":138},[258],{"type":23,"value":161},{"type":17,"tag":131,"props":260,"children":261},{"style":150},[262],{"type":23,"value":263}," x ",{"type":17,"tag":131,"props":265,"children":266},{"style":138},[267],{"type":23,"value":240},{"type":17,"tag":131,"props":269,"children":270},{"style":243},[271],{"type":23,"value":246},{"type":17,"tag":131,"props":273,"children":274},{"style":150},[275],{"type":23,"value":251},{"type":17,"tag":131,"props":277,"children":278},{"class":133,"line":182},[279,283,288,292,297],{"type":17,"tag":131,"props":280,"children":281},{"style":138},[282],{"type":23,"value":161},{"type":17,"tag":131,"props":284,"children":285},{"style":150},[286],{"type":23,"value":287}," left ",{"type":17,"tag":131,"props":289,"children":290},{"style":138},[291],{"type":23,"value":240},{"type":17,"tag":131,"props":293,"children":294},{"style":243},[295],{"type":23,"value":296}," 1",{"type":17,"tag":131,"props":298,"children":299},{"style":150},[300],{"type":23,"value":251},{"type":17,"tag":131,"props":302,"children":304},{"class":133,"line":303},5,[305,309,314,318,322],{"type":17,"tag":131,"props":306,"children":307},{"style":138},[308],{"type":23,"value":161},{"type":17,"tag":131,"props":310,"children":311},{"style":150},[312],{"type":23,"value":313}," right ",{"type":17,"tag":131,"props":315,"children":316},{"style":138},[317],{"type":23,"value":240},{"type":17,"tag":131,"props":319,"children":320},{"style":243},[321],{"type":23,"value":296},{"type":17,"tag":131,"props":323,"children":324},{"style":150},[325],{"type":23,"value":251},{"type":17,"tag":131,"props":327,"children":329},{"class":133,"line":328},6,[330],{"type":17,"tag":131,"props":331,"children":332},{"style":150},[333],{"type":23,"value":188},{"type":17,"tag":335,"props":336,"children":337},"warning",{},[338],{"type":17,"tag":25,"props":339,"children":340},{},[341,347,349,353],{"type":17,"tag":342,"props":343,"children":344},"strong",{},[345],{"type":23,"value":346},"Note:",{"type":23,"value":348}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":350,"props":351,"children":352},"br",{},[],{"type":23,"value":354},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":356,"props":357,"children":359},"h3",{"id":358},"bit-offsets",[360],{"type":23,"value":361},"Bit offsets",{"type":17,"tag":25,"props":363,"children":364},{},[365],{"type":23,"value":366},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":120,"props":368,"children":370},{"className":122,"code":369,"language":124,"meta":7,"style":7},"struct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[371],{"type":17,"tag":127,"props":372,"children":373},{"__ignoreMap":7},[374,390,417,442,467],{"type":17,"tag":131,"props":375,"children":376},{"class":133,"line":134},[377,381,386],{"type":17,"tag":131,"props":378,"children":379},{"style":138},[380],{"type":23,"value":141},{"type":17,"tag":131,"props":382,"children":383},{"style":144},[384],{"type":23,"value":385}," Example",{"type":17,"tag":131,"props":387,"children":388},{"style":150},[389],{"type":23,"value":153},{"type":17,"tag":131,"props":391,"children":392},{"class":133,"line":35},[393,397,402,406,411],{"type":17,"tag":131,"props":394,"children":395},{"style":138},[396],{"type":23,"value":161},{"type":17,"tag":131,"props":398,"children":399},{"style":150},[400],{"type":23,"value":401}," a ",{"type":17,"tag":131,"props":403,"children":404},{"style":138},[405],{"type":23,"value":240},{"type":17,"tag":131,"props":407,"children":408},{"style":243},[409],{"type":23,"value":410}," 8",{"type":17,"tag":131,"props":412,"children":414},{"style":413},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[415],{"type":23,"value":416}," // Offset 0 with 8 bits\n",{"type":17,"tag":131,"props":418,"children":419},{"class":133,"line":169},[420,424,429,433,437],{"type":17,"tag":131,"props":421,"children":422},{"style":138},[423],{"type":23,"value":161},{"type":17,"tag":131,"props":425,"children":426},{"style":150},[427],{"type":23,"value":428}," b ",{"type":17,"tag":131,"props":430,"children":431},{"style":138},[432],{"type":23,"value":240},{"type":17,"tag":131,"props":434,"children":435},{"style":243},[436],{"type":23,"value":410},{"type":17,"tag":131,"props":438,"children":439},{"style":413},[440],{"type":23,"value":441}," // Offset 8 with 8 bits\n",{"type":17,"tag":131,"props":443,"children":444},{"class":133,"line":182},[445,449,454,458,462],{"type":17,"tag":131,"props":446,"children":447},{"style":138},[448],{"type":23,"value":161},{"type":17,"tag":131,"props":450,"children":451},{"style":150},[452],{"type":23,"value":453}," c ",{"type":17,"tag":131,"props":455,"children":456},{"style":138},[457],{"type":23,"value":240},{"type":17,"tag":131,"props":459,"children":460},{"style":243},[461],{"type":23,"value":410},{"type":17,"tag":131,"props":463,"children":464},{"style":413},[465],{"type":23,"value":466}," // Offset 16 with 8 bits\n",{"type":17,"tag":131,"props":468,"children":469},{"class":133,"line":303},[470],{"type":17,"tag":131,"props":471,"children":472},{"style":150},[473],{"type":23,"value":188},{"type":17,"tag":25,"props":475,"children":476},{},[477],{"type":23,"value":478},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":120,"props":480,"children":483},{"className":122,"code":481,"highlights":482,"language":124,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[303],[484],{"type":17,"tag":127,"props":485,"children":486},{"__ignoreMap":7},[487,495,511,535,559,584],{"type":17,"tag":131,"props":488,"children":489},{"class":133,"line":134},[490],{"type":17,"tag":131,"props":491,"children":492},{"style":413},[493],{"type":23,"value":494},"// Note: the following example will not compile\n",{"type":17,"tag":131,"props":496,"children":497},{"class":133,"line":35},[498,502,507],{"type":17,"tag":131,"props":499,"children":500},{"style":138},[501],{"type":23,"value":141},{"type":17,"tag":131,"props":503,"children":504},{"style":144},[505],{"type":23,"value":506}," InvalidExample",{"type":17,"tag":131,"props":508,"children":509},{"style":150},[510],{"type":23,"value":153},{"type":17,"tag":131,"props":512,"children":513},{"class":133,"line":169},[514,518,522,526,530],{"type":17,"tag":131,"props":515,"children":516},{"style":138},[517],{"type":23,"value":161},{"type":17,"tag":131,"props":519,"children":520},{"style":150},[521],{"type":23,"value":401},{"type":17,"tag":131,"props":523,"children":524},{"style":138},[525],{"type":23,"value":240},{"type":17,"tag":131,"props":527,"children":528},{"style":243},[529],{"type":23,"value":246},{"type":17,"tag":131,"props":531,"children":532},{"style":413},[533],{"type":23,"value":534}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":131,"props":536,"children":537},{"class":133,"line":182},[538,542,546,550,554],{"type":17,"tag":131,"props":539,"children":540},{"style":138},[541],{"type":23,"value":161},{"type":17,"tag":131,"props":543,"children":544},{"style":150},[545],{"type":23,"value":428},{"type":17,"tag":131,"props":547,"children":548},{"style":138},[549],{"type":23,"value":240},{"type":17,"tag":131,"props":551,"children":552},{"style":243},[553],{"type":23,"value":246},{"type":17,"tag":131,"props":555,"children":556},{"style":413},[557],{"type":23,"value":558}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":131,"props":560,"children":562},{"class":561,"line":303},"line highlight",[563,567,571,575,579],{"type":17,"tag":131,"props":564,"children":565},{"style":138},[566],{"type":23,"value":161},{"type":17,"tag":131,"props":568,"children":569},{"style":150},[570],{"type":23,"value":453},{"type":17,"tag":131,"props":572,"children":573},{"style":138},[574],{"type":23,"value":240},{"type":17,"tag":131,"props":576,"children":577},{"style":243},[578],{"type":23,"value":246},{"type":17,"tag":131,"props":580,"children":581},{"style":413},[582],{"type":23,"value":583}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":131,"props":585,"children":586},{"class":133,"line":328},[587],{"type":17,"tag":131,"props":588,"children":589},{"style":150},[590],{"type":23,"value":188},{"type":17,"tag":25,"props":592,"children":593},{},[594],{"type":23,"value":595},"When a normal field is introduced, the offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":120,"props":597,"children":600},{"className":122,"code":598,"highlights":599,"language":124,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[182],[601],{"type":17,"tag":127,"props":602,"children":603},{"__ignoreMap":7},[604,619,643,667,684,709],{"type":17,"tag":131,"props":605,"children":606},{"class":133,"line":134},[607,611,615],{"type":17,"tag":131,"props":608,"children":609},{"style":138},[610],{"type":23,"value":141},{"type":17,"tag":131,"props":612,"children":613},{"style":144},[614],{"type":23,"value":385},{"type":17,"tag":131,"props":616,"children":617},{"style":150},[618],{"type":23,"value":153},{"type":17,"tag":131,"props":620,"children":621},{"class":133,"line":35},[622,626,630,634,638],{"type":17,"tag":131,"props":623,"children":624},{"style":138},[625],{"type":23,"value":161},{"type":17,"tag":131,"props":627,"children":628},{"style":150},[629],{"type":23,"value":401},{"type":17,"tag":131,"props":631,"children":632},{"style":138},[633],{"type":23,"value":240},{"type":17,"tag":131,"props":635,"children":636},{"style":243},[637],{"type":23,"value":246},{"type":17,"tag":131,"props":639,"children":640},{"style":413},[641],{"type":23,"value":642},"   //          Offset 0,    7 bits\n",{"type":17,"tag":131,"props":644,"children":645},{"class":133,"line":169},[646,650,654,658,662],{"type":17,"tag":131,"props":647,"children":648},{"style":138},[649],{"type":23,"value":161},{"type":17,"tag":131,"props":651,"children":652},{"style":150},[653],{"type":23,"value":428},{"type":17,"tag":131,"props":655,"children":656},{"style":138},[657],{"type":23,"value":240},{"type":17,"tag":131,"props":659,"children":660},{"style":243},[661],{"type":23,"value":246},{"type":17,"tag":131,"props":663,"children":664},{"style":413},[665],{"type":23,"value":666},"   //          Offset 7,    7 bits\n",{"type":17,"tag":131,"props":668,"children":669},{"class":561,"line":182},[670,674,679],{"type":17,"tag":131,"props":671,"children":672},{"style":138},[673],{"type":23,"value":161},{"type":17,"tag":131,"props":675,"children":676},{"style":150},[677],{"type":23,"value":678}," c       ",{"type":17,"tag":131,"props":680,"children":681},{"style":413},[682],{"type":23,"value":683},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":131,"props":685,"children":686},{"class":133,"line":303},[687,691,696,700,704],{"type":17,"tag":131,"props":688,"children":689},{"style":138},[690],{"type":23,"value":161},{"type":17,"tag":131,"props":692,"children":693},{"style":150},[694],{"type":23,"value":695}," d ",{"type":17,"tag":131,"props":697,"children":698},{"style":138},[699],{"type":23,"value":240},{"type":17,"tag":131,"props":701,"children":702},{"style":243},[703],{"type":23,"value":246},{"type":17,"tag":131,"props":705,"children":706},{"style":413},[707],{"type":23,"value":708},"   //          Offset 32,   7 bits\n",{"type":17,"tag":131,"props":710,"children":711},{"class":133,"line":328},[712],{"type":17,"tag":131,"props":713,"children":714},{"style":150},[715],{"type":23,"value":188},{"type":17,"tag":190,"props":717,"children":719},{"id":718},"initializing-structs",[720],{"type":23,"value":721},"Initializing structs",{"type":17,"tag":25,"props":723,"children":724},{},[725,727,732,734,739],{"type":23,"value":726},"Structs can be initialized by using curly braces (",{"type":17,"tag":127,"props":728,"children":729},{"className":7},[730],{"type":23,"value":731},"{",{"type":23,"value":733}," and ",{"type":17,"tag":127,"props":735,"children":736},{"className":7},[737],{"type":23,"value":738},"}",{"type":23,"value":740},") to specify the values of the fields. For example:",{"type":17,"tag":120,"props":742,"children":747},{"className":122,"code":743,"filename":744,"highlights":745,"language":124,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[746],7,[748],{"type":17,"tag":127,"props":749,"children":750},{"__ignoreMap":7},[751,766,777,788,795,803,811],{"type":17,"tag":131,"props":752,"children":753},{"class":133,"line":134},[754,758,762],{"type":17,"tag":131,"props":755,"children":756},{"style":138},[757],{"type":23,"value":141},{"type":17,"tag":131,"props":759,"children":760},{"style":144},[761],{"type":23,"value":147},{"type":17,"tag":131,"props":763,"children":764},{"style":150},[765],{"type":23,"value":153},{"type":17,"tag":131,"props":767,"children":768},{"class":133,"line":35},[769,773],{"type":17,"tag":131,"props":770,"children":771},{"style":138},[772],{"type":23,"value":161},{"type":17,"tag":131,"props":774,"children":775},{"style":150},[776],{"type":23,"value":166},{"type":17,"tag":131,"props":778,"children":779},{"class":133,"line":169},[780,784],{"type":17,"tag":131,"props":781,"children":782},{"style":138},[783],{"type":23,"value":161},{"type":17,"tag":131,"props":785,"children":786},{"style":150},[787],{"type":23,"value":179},{"type":17,"tag":131,"props":789,"children":790},{"class":133,"line":182},[791],{"type":17,"tag":131,"props":792,"children":793},{"style":150},[794],{"type":23,"value":188},{"type":17,"tag":131,"props":796,"children":797},{"class":133,"line":303},[798],{"type":17,"tag":131,"props":799,"children":800},{"emptyLinePlaceholder":55},[801],{"type":23,"value":802},"\n",{"type":17,"tag":131,"props":804,"children":805},{"class":133,"line":328},[806],{"type":17,"tag":131,"props":807,"children":808},{"style":413},[809],{"type":23,"value":810},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":131,"props":812,"children":813},{"class":561,"line":746},[814,819,824,829,834,839,844,849],{"type":17,"tag":131,"props":815,"children":816},{"style":144},[817],{"type":23,"value":818},"Point",{"type":17,"tag":131,"props":820,"children":821},{"style":150},[822],{"type":23,"value":823}," point ",{"type":17,"tag":131,"props":825,"children":826},{"style":138},[827],{"type":23,"value":828},"=",{"type":17,"tag":131,"props":830,"children":831},{"style":150},[832],{"type":23,"value":833}," { ",{"type":17,"tag":131,"props":835,"children":836},{"style":243},[837],{"type":23,"value":838},"1",{"type":17,"tag":131,"props":840,"children":841},{"style":150},[842],{"type":23,"value":843},", ",{"type":17,"tag":131,"props":845,"children":846},{"style":243},[847],{"type":23,"value":848},"2",{"type":17,"tag":131,"props":850,"children":851},{"style":150},[852],{"type":23,"value":853}," }\n",{"type":17,"tag":25,"props":855,"children":856},{},[857],{"type":23,"value":858},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":120,"props":860,"children":864},{"className":122,"code":861,"filename":744,"highlights":862,"language":124,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[863],8,[865],{"type":17,"tag":127,"props":866,"children":867},{"__ignoreMap":7},[868,883,894,905,912,919,927,935],{"type":17,"tag":131,"props":869,"children":870},{"class":133,"line":134},[871,875,879],{"type":17,"tag":131,"props":872,"children":873},{"style":138},[874],{"type":23,"value":141},{"type":17,"tag":131,"props":876,"children":877},{"style":144},[878],{"type":23,"value":147},{"type":17,"tag":131,"props":880,"children":881},{"style":150},[882],{"type":23,"value":153},{"type":17,"tag":131,"props":884,"children":885},{"class":133,"line":35},[886,890],{"type":17,"tag":131,"props":887,"children":888},{"style":138},[889],{"type":23,"value":161},{"type":17,"tag":131,"props":891,"children":892},{"style":150},[893],{"type":23,"value":166},{"type":17,"tag":131,"props":895,"children":896},{"class":133,"line":169},[897,901],{"type":17,"tag":131,"props":898,"children":899},{"style":138},[900],{"type":23,"value":161},{"type":17,"tag":131,"props":902,"children":903},{"style":150},[904],{"type":23,"value":179},{"type":17,"tag":131,"props":906,"children":907},{"class":133,"line":182},[908],{"type":17,"tag":131,"props":909,"children":910},{"style":150},[911],{"type":23,"value":188},{"type":17,"tag":131,"props":913,"children":914},{"class":133,"line":303},[915],{"type":17,"tag":131,"props":916,"children":917},{"emptyLinePlaceholder":55},[918],{"type":23,"value":802},{"type":17,"tag":131,"props":920,"children":921},{"class":133,"line":328},[922],{"type":17,"tag":131,"props":923,"children":924},{"style":413},[925],{"type":23,"value":926},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":131,"props":928,"children":929},{"class":133,"line":746},[930],{"type":17,"tag":131,"props":931,"children":932},{"style":413},[933],{"type":23,"value":934},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":131,"props":936,"children":937},{"class":561,"line":863},[938,942,946,950,955,959,964,968],{"type":17,"tag":131,"props":939,"children":940},{"style":144},[941],{"type":23,"value":818},{"type":17,"tag":131,"props":943,"children":944},{"style":150},[945],{"type":23,"value":823},{"type":17,"tag":131,"props":947,"children":948},{"style":138},[949],{"type":23,"value":828},{"type":17,"tag":131,"props":951,"children":952},{"style":150},[953],{"type":23,"value":954}," { y: ",{"type":17,"tag":131,"props":956,"children":957},{"style":243},[958],{"type":23,"value":848},{"type":17,"tag":131,"props":960,"children":961},{"style":150},[962],{"type":23,"value":963},", x: ",{"type":17,"tag":131,"props":965,"children":966},{"style":243},[967],{"type":23,"value":838},{"type":17,"tag":131,"props":969,"children":970},{"style":150},[971],{"type":23,"value":853},{"type":17,"tag":190,"props":973,"children":975},{"id":974},"accessing-fields",[976],{"type":23,"value":977},"Accessing fields",{"type":17,"tag":25,"props":979,"children":980},{},[981,983,988],{"type":23,"value":982},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":127,"props":984,"children":985},{"className":7},[986],{"type":23,"value":987},".",{"type":23,"value":989},") operator. For example:",{"type":17,"tag":120,"props":991,"children":995},{"className":122,"code":992,"filename":744,"highlights":993,"language":124,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[994],9,[996],{"type":17,"tag":127,"props":997,"children":998},{"__ignoreMap":7},[999,1014,1025,1036,1043,1050,1085,1092,1100],{"type":17,"tag":131,"props":1000,"children":1001},{"class":133,"line":134},[1002,1006,1010],{"type":17,"tag":131,"props":1003,"children":1004},{"style":138},[1005],{"type":23,"value":141},{"type":17,"tag":131,"props":1007,"children":1008},{"style":144},[1009],{"type":23,"value":147},{"type":17,"tag":131,"props":1011,"children":1012},{"style":150},[1013],{"type":23,"value":153},{"type":17,"tag":131,"props":1015,"children":1016},{"class":133,"line":35},[1017,1021],{"type":17,"tag":131,"props":1018,"children":1019},{"style":138},[1020],{"type":23,"value":161},{"type":17,"tag":131,"props":1022,"children":1023},{"style":150},[1024],{"type":23,"value":166},{"type":17,"tag":131,"props":1026,"children":1027},{"class":133,"line":169},[1028,1032],{"type":17,"tag":131,"props":1029,"children":1030},{"style":138},[1031],{"type":23,"value":161},{"type":17,"tag":131,"props":1033,"children":1034},{"style":150},[1035],{"type":23,"value":179},{"type":17,"tag":131,"props":1037,"children":1038},{"class":133,"line":182},[1039],{"type":17,"tag":131,"props":1040,"children":1041},{"style":150},[1042],{"type":23,"value":188},{"type":17,"tag":131,"props":1044,"children":1045},{"class":133,"line":303},[1046],{"type":17,"tag":131,"props":1047,"children":1048},{"emptyLinePlaceholder":55},[1049],{"type":23,"value":802},{"type":17,"tag":131,"props":1051,"children":1052},{"class":133,"line":328},[1053,1057,1061,1065,1069,1073,1077,1081],{"type":17,"tag":131,"props":1054,"children":1055},{"style":144},[1056],{"type":23,"value":818},{"type":17,"tag":131,"props":1058,"children":1059},{"style":150},[1060],{"type":23,"value":823},{"type":17,"tag":131,"props":1062,"children":1063},{"style":138},[1064],{"type":23,"value":828},{"type":17,"tag":131,"props":1066,"children":1067},{"style":150},[1068],{"type":23,"value":833},{"type":17,"tag":131,"props":1070,"children":1071},{"style":243},[1072],{"type":23,"value":838},{"type":17,"tag":131,"props":1074,"children":1075},{"style":150},[1076],{"type":23,"value":843},{"type":17,"tag":131,"props":1078,"children":1079},{"style":243},[1080],{"type":23,"value":848},{"type":17,"tag":131,"props":1082,"children":1083},{"style":150},[1084],{"type":23,"value":853},{"type":17,"tag":131,"props":1086,"children":1087},{"class":133,"line":746},[1088],{"type":17,"tag":131,"props":1089,"children":1090},{"emptyLinePlaceholder":55},[1091],{"type":23,"value":802},{"type":17,"tag":131,"props":1093,"children":1094},{"class":133,"line":863},[1095],{"type":17,"tag":131,"props":1096,"children":1097},{"style":413},[1098],{"type":23,"value":1099},"// Access the x field of the point\n",{"type":17,"tag":131,"props":1101,"children":1102},{"class":561,"line":994},[1103,1108,1112,1116],{"type":17,"tag":131,"props":1104,"children":1105},{"style":138},[1106],{"type":23,"value":1107},"int",{"type":17,"tag":131,"props":1109,"children":1110},{"style":150},[1111],{"type":23,"value":263},{"type":17,"tag":131,"props":1113,"children":1114},{"style":138},[1115],{"type":23,"value":828},{"type":17,"tag":131,"props":1117,"children":1118},{"style":150},[1119],{"type":23,"value":1120}," point.x\n",{"type":17,"tag":190,"props":1122,"children":1124},{"id":1123},"nested-structs",[1125],{"type":23,"value":1126},"Nested structs",{"type":17,"tag":25,"props":1128,"children":1129},{},[1130],{"type":23,"value":1131},"Structs can be nested inside other structs. For example:",{"type":17,"tag":120,"props":1133,"children":1135},{"className":122,"code":1134,"filename":744,"language":124,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1136],{"type":17,"tag":127,"props":1137,"children":1138},{"__ignoreMap":7},[1139,1154,1165,1176,1183,1190,1206,1219,1231,1238,1246,1268,1295,1322,1330,1338,1347],{"type":17,"tag":131,"props":1140,"children":1141},{"class":133,"line":134},[1142,1146,1150],{"type":17,"tag":131,"props":1143,"children":1144},{"style":138},[1145],{"type":23,"value":141},{"type":17,"tag":131,"props":1147,"children":1148},{"style":144},[1149],{"type":23,"value":147},{"type":17,"tag":131,"props":1151,"children":1152},{"style":150},[1153],{"type":23,"value":153},{"type":17,"tag":131,"props":1155,"children":1156},{"class":133,"line":35},[1157,1161],{"type":17,"tag":131,"props":1158,"children":1159},{"style":138},[1160],{"type":23,"value":161},{"type":17,"tag":131,"props":1162,"children":1163},{"style":150},[1164],{"type":23,"value":166},{"type":17,"tag":131,"props":1166,"children":1167},{"class":133,"line":169},[1168,1172],{"type":17,"tag":131,"props":1169,"children":1170},{"style":138},[1171],{"type":23,"value":161},{"type":17,"tag":131,"props":1173,"children":1174},{"style":150},[1175],{"type":23,"value":179},{"type":17,"tag":131,"props":1177,"children":1178},{"class":133,"line":182},[1179],{"type":17,"tag":131,"props":1180,"children":1181},{"style":150},[1182],{"type":23,"value":188},{"type":17,"tag":131,"props":1184,"children":1185},{"class":133,"line":303},[1186],{"type":17,"tag":131,"props":1187,"children":1188},{"emptyLinePlaceholder":55},[1189],{"type":23,"value":802},{"type":17,"tag":131,"props":1191,"children":1192},{"class":133,"line":328},[1193,1197,1202],{"type":17,"tag":131,"props":1194,"children":1195},{"style":138},[1196],{"type":23,"value":141},{"type":17,"tag":131,"props":1198,"children":1199},{"style":144},[1200],{"type":23,"value":1201}," Rectangle",{"type":17,"tag":131,"props":1203,"children":1204},{"style":150},[1205],{"type":23,"value":153},{"type":17,"tag":131,"props":1207,"children":1208},{"class":133,"line":746},[1209,1214],{"type":17,"tag":131,"props":1210,"children":1211},{"style":144},[1212],{"type":23,"value":1213},"    Point",{"type":17,"tag":131,"props":1215,"children":1216},{"style":150},[1217],{"type":23,"value":1218}," topLeft;\n",{"type":17,"tag":131,"props":1220,"children":1221},{"class":133,"line":863},[1222,1226],{"type":17,"tag":131,"props":1223,"children":1224},{"style":144},[1225],{"type":23,"value":1213},{"type":17,"tag":131,"props":1227,"children":1228},{"style":150},[1229],{"type":23,"value":1230}," bottomRight;\n",{"type":17,"tag":131,"props":1232,"children":1233},{"class":133,"line":994},[1234],{"type":17,"tag":131,"props":1235,"children":1236},{"style":150},[1237],{"type":23,"value":188},{"type":17,"tag":131,"props":1239,"children":1241},{"class":133,"line":1240},10,[1242],{"type":17,"tag":131,"props":1243,"children":1244},{"emptyLinePlaceholder":55},[1245],{"type":23,"value":802},{"type":17,"tag":131,"props":1247,"children":1249},{"class":133,"line":1248},11,[1250,1255,1260,1264],{"type":17,"tag":131,"props":1251,"children":1252},{"style":144},[1253],{"type":23,"value":1254},"Rectangle",{"type":17,"tag":131,"props":1256,"children":1257},{"style":150},[1258],{"type":23,"value":1259}," rectangle ",{"type":17,"tag":131,"props":1261,"children":1262},{"style":138},[1263],{"type":23,"value":828},{"type":17,"tag":131,"props":1265,"children":1266},{"style":150},[1267],{"type":23,"value":153},{"type":17,"tag":131,"props":1269,"children":1271},{"class":133,"line":1270},12,[1272,1277,1281,1286,1290],{"type":17,"tag":131,"props":1273,"children":1274},{"style":150},[1275],{"type":23,"value":1276},"    topLeft: { x: ",{"type":17,"tag":131,"props":1278,"children":1279},{"style":243},[1280],{"type":23,"value":838},{"type":17,"tag":131,"props":1282,"children":1283},{"style":150},[1284],{"type":23,"value":1285},", y: ",{"type":17,"tag":131,"props":1287,"children":1288},{"style":243},[1289],{"type":23,"value":848},{"type":17,"tag":131,"props":1291,"children":1292},{"style":150},[1293],{"type":23,"value":1294}," },\n",{"type":17,"tag":131,"props":1296,"children":1298},{"class":133,"line":1297},13,[1299,1304,1309,1313,1318],{"type":17,"tag":131,"props":1300,"children":1301},{"style":150},[1302],{"type":23,"value":1303},"    bottomRight: { x: ",{"type":17,"tag":131,"props":1305,"children":1306},{"style":243},[1307],{"type":23,"value":1308},"3",{"type":17,"tag":131,"props":1310,"children":1311},{"style":150},[1312],{"type":23,"value":1285},{"type":17,"tag":131,"props":1314,"children":1315},{"style":243},[1316],{"type":23,"value":1317},"4",{"type":17,"tag":131,"props":1319,"children":1320},{"style":150},[1321],{"type":23,"value":853},{"type":17,"tag":131,"props":1323,"children":1325},{"class":133,"line":1324},14,[1326],{"type":17,"tag":131,"props":1327,"children":1328},{"style":150},[1329],{"type":23,"value":188},{"type":17,"tag":131,"props":1331,"children":1333},{"class":133,"line":1332},15,[1334],{"type":17,"tag":131,"props":1335,"children":1336},{"emptyLinePlaceholder":55},[1337],{"type":23,"value":802},{"type":17,"tag":131,"props":1339,"children":1341},{"class":133,"line":1340},16,[1342],{"type":17,"tag":131,"props":1343,"children":1344},{"style":413},[1345],{"type":23,"value":1346},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":131,"props":1348,"children":1350},{"class":133,"line":1349},17,[1351,1355,1359,1363],{"type":17,"tag":131,"props":1352,"children":1353},{"style":138},[1354],{"type":23,"value":1107},{"type":17,"tag":131,"props":1356,"children":1357},{"style":150},[1358],{"type":23,"value":263},{"type":17,"tag":131,"props":1360,"children":1361},{"style":138},[1362],{"type":23,"value":828},{"type":17,"tag":131,"props":1364,"children":1365},{"style":150},[1366],{"type":23,"value":1367}," rectangle.topLeft.x\n",{"type":17,"tag":1369,"props":1370,"children":1371},"style",{},[1372],{"type":23,"value":1373},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":35,"depth":35,"links":1375},[1376,1379,1380,1381],{"id":192,"depth":35,"text":195,"children":1377},[1378],{"id":358,"depth":169,"text":361},{"id":718,"depth":35,"text":721},{"id":974,"depth":35,"text":977},{"id":1123,"depth":35,"text":1126},"content:docs:3.language-reference:1.structs.md","docs/3.language-reference/1.structs.md",{"_path":73,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":72,"description":1385,"tags":1386,"navigation":1387,"body":1388,"_type":37,"_id":1974,"_source":39,"_file":1975,"_extension":41},"Learn more about stack allocations.",[20],{"sidebar":55},{"type":14,"children":1389,"toc":1969},[1390,1395,1400,1405,1410,1416,1428,1476,1482,1487,1608,1614,1619,1965],{"type":17,"tag":18,"props":1391,"children":1393},{"id":1392},"stack-allocations",[1394],{"type":23,"value":72},{"type":17,"tag":25,"props":1396,"children":1397},{},[1398],{"type":23,"value":1399},"Stack allocations are used to allocate memory on the stack. They are useful for storing temporary values that are only needed for a short period of time.",{"type":17,"tag":25,"props":1401,"children":1402},{},[1403],{"type":23,"value":1404},"The stack allocations start at address 61294 and end at address 65535. The stack grows upwards, so the first stack allocation is at address 61294 and the last stack allocation is at address 65535.",{"type":17,"tag":25,"props":1406,"children":1407},{},[1408],{"type":23,"value":1409},"When a function is called, the current stack pointer is stored. When the function returns, the stack pointer is reset to the stored value. This means that stack allocations are only valid within the function they are declared in.",{"type":17,"tag":190,"props":1411,"children":1413},{"id":1412},"declaring-a-stack-allocation",[1414],{"type":23,"value":1415},"Declaring a stack allocation",{"type":17,"tag":25,"props":1417,"children":1418},{},[1419,1421,1426],{"type":23,"value":1420},"A stack allocation is declared using the ",{"type":17,"tag":127,"props":1422,"children":1423},{"className":7},[1424],{"type":23,"value":1425},"stackalloc",{"type":23,"value":1427}," keyword, followed by the type of the allocation and the name of the allocation:",{"type":17,"tag":120,"props":1429,"children":1431},{"className":122,"code":1430,"language":124,"meta":7,"style":7},"int[] numbers = stackalloc int[10]\n",[1432],{"type":17,"tag":127,"props":1433,"children":1434},{"__ignoreMap":7},[1435],{"type":17,"tag":131,"props":1436,"children":1437},{"class":133,"line":134},[1438,1442,1447,1451,1456,1461,1466,1471],{"type":17,"tag":131,"props":1439,"children":1440},{"style":138},[1441],{"type":23,"value":1107},{"type":17,"tag":131,"props":1443,"children":1444},{"style":150},[1445],{"type":23,"value":1446},"[] numbers ",{"type":17,"tag":131,"props":1448,"children":1449},{"style":138},[1450],{"type":23,"value":828},{"type":17,"tag":131,"props":1452,"children":1453},{"style":138},[1454],{"type":23,"value":1455}," stackalloc",{"type":17,"tag":131,"props":1457,"children":1458},{"style":138},[1459],{"type":23,"value":1460}," int",{"type":17,"tag":131,"props":1462,"children":1463},{"style":150},[1464],{"type":23,"value":1465},"[",{"type":17,"tag":131,"props":1467,"children":1468},{"style":243},[1469],{"type":23,"value":1470},"10",{"type":17,"tag":131,"props":1472,"children":1473},{"style":150},[1474],{"type":23,"value":1475},"]\n",{"type":17,"tag":190,"props":1477,"children":1479},{"id":1478},"assigning-a-stack-allocation",[1480],{"type":23,"value":1481},"Assigning a stack allocation",{"type":17,"tag":25,"props":1483,"children":1484},{},[1485],{"type":23,"value":1486},"Since stack allocations are pointers, they can be used like any other pointer:",{"type":17,"tag":120,"props":1488,"children":1490},{"className":122,"code":1489,"filename":744,"language":124,"meta":7,"style":7},"int[] numbers = stackalloc int[10]\n\nnumbers[0] = 1 // Set the first element of the array to 1\n\nint result = numbers[0] // Get the first element of the array\n",[1491],{"type":17,"tag":127,"props":1492,"children":1493},{"__ignoreMap":7},[1494,1529,1536,1567,1574],{"type":17,"tag":131,"props":1495,"children":1496},{"class":133,"line":134},[1497,1501,1505,1509,1513,1517,1521,1525],{"type":17,"tag":131,"props":1498,"children":1499},{"style":138},[1500],{"type":23,"value":1107},{"type":17,"tag":131,"props":1502,"children":1503},{"style":150},[1504],{"type":23,"value":1446},{"type":17,"tag":131,"props":1506,"children":1507},{"style":138},[1508],{"type":23,"value":828},{"type":17,"tag":131,"props":1510,"children":1511},{"style":138},[1512],{"type":23,"value":1455},{"type":17,"tag":131,"props":1514,"children":1515},{"style":138},[1516],{"type":23,"value":1460},{"type":17,"tag":131,"props":1518,"children":1519},{"style":150},[1520],{"type":23,"value":1465},{"type":17,"tag":131,"props":1522,"children":1523},{"style":243},[1524],{"type":23,"value":1470},{"type":17,"tag":131,"props":1526,"children":1527},{"style":150},[1528],{"type":23,"value":1475},{"type":17,"tag":131,"props":1530,"children":1531},{"class":133,"line":35},[1532],{"type":17,"tag":131,"props":1533,"children":1534},{"emptyLinePlaceholder":55},[1535],{"type":23,"value":802},{"type":17,"tag":131,"props":1537,"children":1538},{"class":133,"line":169},[1539,1544,1549,1554,1558,1562],{"type":17,"tag":131,"props":1540,"children":1541},{"style":150},[1542],{"type":23,"value":1543},"numbers[",{"type":17,"tag":131,"props":1545,"children":1546},{"style":243},[1547],{"type":23,"value":1548},"0",{"type":17,"tag":131,"props":1550,"children":1551},{"style":150},[1552],{"type":23,"value":1553},"] ",{"type":17,"tag":131,"props":1555,"children":1556},{"style":138},[1557],{"type":23,"value":828},{"type":17,"tag":131,"props":1559,"children":1560},{"style":243},[1561],{"type":23,"value":296},{"type":17,"tag":131,"props":1563,"children":1564},{"style":413},[1565],{"type":23,"value":1566}," // Set the first element of the array to 1\n",{"type":17,"tag":131,"props":1568,"children":1569},{"class":133,"line":182},[1570],{"type":17,"tag":131,"props":1571,"children":1572},{"emptyLinePlaceholder":55},[1573],{"type":23,"value":802},{"type":17,"tag":131,"props":1575,"children":1576},{"class":133,"line":303},[1577,1581,1586,1590,1595,1599,1603],{"type":17,"tag":131,"props":1578,"children":1579},{"style":138},[1580],{"type":23,"value":1107},{"type":17,"tag":131,"props":1582,"children":1583},{"style":150},[1584],{"type":23,"value":1585}," result ",{"type":17,"tag":131,"props":1587,"children":1588},{"style":138},[1589],{"type":23,"value":828},{"type":17,"tag":131,"props":1591,"children":1592},{"style":150},[1593],{"type":23,"value":1594}," numbers[",{"type":17,"tag":131,"props":1596,"children":1597},{"style":243},[1598],{"type":23,"value":1548},{"type":17,"tag":131,"props":1600,"children":1601},{"style":150},[1602],{"type":23,"value":1553},{"type":17,"tag":131,"props":1604,"children":1605},{"style":413},[1606],{"type":23,"value":1607},"// Get the first element of the array\n",{"type":17,"tag":190,"props":1609,"children":1611},{"id":1610},"example",[1612],{"type":23,"value":1613},"Example",{"type":17,"tag":25,"props":1615,"children":1616},{},[1617],{"type":23,"value":1618},"The following shows an example of the stack allocations growing upwards:",{"type":17,"tag":120,"props":1620,"children":1622},{"className":122,"code":1621,"filename":744,"language":124,"meta":7,"style":7},"int allocate() {\n    // Allocate 10 integers on the stack\n    int[] numbers = stackalloc int[10]\n\n    // Return the address of the stack allocation\n    return get_address(numbers)\n}\n\n// The following call will return address 61294\nallocate()\n\nvoid allocate_call() {\n    // The following call will return address 61294\n    allocate()\n\n    // Because the stack is reset after a function returns,\n    // the following call allocation will also return address 61294\n    int[] numbers = stackalloc int[10]\n\n    // The following call will return address 61304\n    // because we allocated 10 integers in this function\n    allocate()\n}\n\nallocate_call()\n\n// Utility function to get the address of a stack allocation\ninline int get_address(int[] pointer) => asm { AIN @pointer }\n",[1623],{"type":17,"tag":127,"props":1624,"children":1625},{"__ignoreMap":7},[1626,1638,1646,1681,1688,1696,1709,1716,1723,1731,1739,1746,1759,1767,1775,1782,1790,1798,1834,1842,1851,1860,1868,1876,1884,1893,1901,1910],{"type":17,"tag":131,"props":1627,"children":1628},{"class":133,"line":134},[1629,1633],{"type":17,"tag":131,"props":1630,"children":1631},{"style":138},[1632],{"type":23,"value":1107},{"type":17,"tag":131,"props":1634,"children":1635},{"style":150},[1636],{"type":23,"value":1637}," allocate() {\n",{"type":17,"tag":131,"props":1639,"children":1640},{"class":133,"line":35},[1641],{"type":17,"tag":131,"props":1642,"children":1643},{"style":413},[1644],{"type":23,"value":1645},"    // Allocate 10 integers on the stack\n",{"type":17,"tag":131,"props":1647,"children":1648},{"class":133,"line":169},[1649,1653,1657,1661,1665,1669,1673,1677],{"type":17,"tag":131,"props":1650,"children":1651},{"style":138},[1652],{"type":23,"value":161},{"type":17,"tag":131,"props":1654,"children":1655},{"style":150},[1656],{"type":23,"value":1446},{"type":17,"tag":131,"props":1658,"children":1659},{"style":138},[1660],{"type":23,"value":828},{"type":17,"tag":131,"props":1662,"children":1663},{"style":138},[1664],{"type":23,"value":1455},{"type":17,"tag":131,"props":1666,"children":1667},{"style":138},[1668],{"type":23,"value":1460},{"type":17,"tag":131,"props":1670,"children":1671},{"style":150},[1672],{"type":23,"value":1465},{"type":17,"tag":131,"props":1674,"children":1675},{"style":243},[1676],{"type":23,"value":1470},{"type":17,"tag":131,"props":1678,"children":1679},{"style":150},[1680],{"type":23,"value":1475},{"type":17,"tag":131,"props":1682,"children":1683},{"class":133,"line":182},[1684],{"type":17,"tag":131,"props":1685,"children":1686},{"emptyLinePlaceholder":55},[1687],{"type":23,"value":802},{"type":17,"tag":131,"props":1689,"children":1690},{"class":133,"line":303},[1691],{"type":17,"tag":131,"props":1692,"children":1693},{"style":413},[1694],{"type":23,"value":1695},"    // Return the address of the stack allocation\n",{"type":17,"tag":131,"props":1697,"children":1698},{"class":133,"line":328},[1699,1704],{"type":17,"tag":131,"props":1700,"children":1701},{"style":138},[1702],{"type":23,"value":1703},"    return",{"type":17,"tag":131,"props":1705,"children":1706},{"style":150},[1707],{"type":23,"value":1708}," get_address(numbers)\n",{"type":17,"tag":131,"props":1710,"children":1711},{"class":133,"line":746},[1712],{"type":17,"tag":131,"props":1713,"children":1714},{"style":150},[1715],{"type":23,"value":188},{"type":17,"tag":131,"props":1717,"children":1718},{"class":133,"line":863},[1719],{"type":17,"tag":131,"props":1720,"children":1721},{"emptyLinePlaceholder":55},[1722],{"type":23,"value":802},{"type":17,"tag":131,"props":1724,"children":1725},{"class":133,"line":994},[1726],{"type":17,"tag":131,"props":1727,"children":1728},{"style":413},[1729],{"type":23,"value":1730},"// The following call will return address 61294\n",{"type":17,"tag":131,"props":1732,"children":1733},{"class":133,"line":1240},[1734],{"type":17,"tag":131,"props":1735,"children":1736},{"style":150},[1737],{"type":23,"value":1738},"allocate()\n",{"type":17,"tag":131,"props":1740,"children":1741},{"class":133,"line":1248},[1742],{"type":17,"tag":131,"props":1743,"children":1744},{"emptyLinePlaceholder":55},[1745],{"type":23,"value":802},{"type":17,"tag":131,"props":1747,"children":1748},{"class":133,"line":1270},[1749,1754],{"type":17,"tag":131,"props":1750,"children":1751},{"style":138},[1752],{"type":23,"value":1753},"void",{"type":17,"tag":131,"props":1755,"children":1756},{"style":150},[1757],{"type":23,"value":1758}," allocate_call() {\n",{"type":17,"tag":131,"props":1760,"children":1761},{"class":133,"line":1297},[1762],{"type":17,"tag":131,"props":1763,"children":1764},{"style":413},[1765],{"type":23,"value":1766},"    // The following call will return address 61294\n",{"type":17,"tag":131,"props":1768,"children":1769},{"class":133,"line":1324},[1770],{"type":17,"tag":131,"props":1771,"children":1772},{"style":150},[1773],{"type":23,"value":1774},"    allocate()\n",{"type":17,"tag":131,"props":1776,"children":1777},{"class":133,"line":1332},[1778],{"type":17,"tag":131,"props":1779,"children":1780},{"emptyLinePlaceholder":55},[1781],{"type":23,"value":802},{"type":17,"tag":131,"props":1783,"children":1784},{"class":133,"line":1340},[1785],{"type":17,"tag":131,"props":1786,"children":1787},{"style":413},[1788],{"type":23,"value":1789},"    // Because the stack is reset after a function returns,\n",{"type":17,"tag":131,"props":1791,"children":1792},{"class":133,"line":1349},[1793],{"type":17,"tag":131,"props":1794,"children":1795},{"style":413},[1796],{"type":23,"value":1797},"    // the following call allocation will also return address 61294\n",{"type":17,"tag":131,"props":1799,"children":1801},{"class":133,"line":1800},18,[1802,1806,1810,1814,1818,1822,1826,1830],{"type":17,"tag":131,"props":1803,"children":1804},{"style":138},[1805],{"type":23,"value":161},{"type":17,"tag":131,"props":1807,"children":1808},{"style":150},[1809],{"type":23,"value":1446},{"type":17,"tag":131,"props":1811,"children":1812},{"style":138},[1813],{"type":23,"value":828},{"type":17,"tag":131,"props":1815,"children":1816},{"style":138},[1817],{"type":23,"value":1455},{"type":17,"tag":131,"props":1819,"children":1820},{"style":138},[1821],{"type":23,"value":1460},{"type":17,"tag":131,"props":1823,"children":1824},{"style":150},[1825],{"type":23,"value":1465},{"type":17,"tag":131,"props":1827,"children":1828},{"style":243},[1829],{"type":23,"value":1470},{"type":17,"tag":131,"props":1831,"children":1832},{"style":150},[1833],{"type":23,"value":1475},{"type":17,"tag":131,"props":1835,"children":1837},{"class":133,"line":1836},19,[1838],{"type":17,"tag":131,"props":1839,"children":1840},{"emptyLinePlaceholder":55},[1841],{"type":23,"value":802},{"type":17,"tag":131,"props":1843,"children":1845},{"class":133,"line":1844},20,[1846],{"type":17,"tag":131,"props":1847,"children":1848},{"style":413},[1849],{"type":23,"value":1850},"    // The following call will return address 61304\n",{"type":17,"tag":131,"props":1852,"children":1854},{"class":133,"line":1853},21,[1855],{"type":17,"tag":131,"props":1856,"children":1857},{"style":413},[1858],{"type":23,"value":1859},"    // because we allocated 10 integers in this function\n",{"type":17,"tag":131,"props":1861,"children":1863},{"class":133,"line":1862},22,[1864],{"type":17,"tag":131,"props":1865,"children":1866},{"style":150},[1867],{"type":23,"value":1774},{"type":17,"tag":131,"props":1869,"children":1871},{"class":133,"line":1870},23,[1872],{"type":17,"tag":131,"props":1873,"children":1874},{"style":150},[1875],{"type":23,"value":188},{"type":17,"tag":131,"props":1877,"children":1879},{"class":133,"line":1878},24,[1880],{"type":17,"tag":131,"props":1881,"children":1882},{"emptyLinePlaceholder":55},[1883],{"type":23,"value":802},{"type":17,"tag":131,"props":1885,"children":1887},{"class":133,"line":1886},25,[1888],{"type":17,"tag":131,"props":1889,"children":1890},{"style":150},[1891],{"type":23,"value":1892},"allocate_call()\n",{"type":17,"tag":131,"props":1894,"children":1896},{"class":133,"line":1895},26,[1897],{"type":17,"tag":131,"props":1898,"children":1899},{"emptyLinePlaceholder":55},[1900],{"type":23,"value":802},{"type":17,"tag":131,"props":1902,"children":1904},{"class":133,"line":1903},27,[1905],{"type":17,"tag":131,"props":1906,"children":1907},{"style":413},[1908],{"type":23,"value":1909},"// Utility function to get the address of a stack allocation\n",{"type":17,"tag":131,"props":1911,"children":1913},{"class":133,"line":1912},28,[1914,1919,1923,1928,1932,1937,1941,1946,1951,1955,1960],{"type":17,"tag":131,"props":1915,"children":1916},{"style":138},[1917],{"type":23,"value":1918},"inline",{"type":17,"tag":131,"props":1920,"children":1921},{"style":138},[1922],{"type":23,"value":1460},{"type":17,"tag":131,"props":1924,"children":1925},{"style":150},[1926],{"type":23,"value":1927}," get_address(",{"type":17,"tag":131,"props":1929,"children":1930},{"style":138},[1931],{"type":23,"value":1107},{"type":17,"tag":131,"props":1933,"children":1934},{"style":150},[1935],{"type":23,"value":1936},"[] pointer) ",{"type":17,"tag":131,"props":1938,"children":1939},{"style":138},[1940],{"type":23,"value":828},{"type":17,"tag":131,"props":1942,"children":1943},{"style":150},[1944],{"type":23,"value":1945},"> ",{"type":17,"tag":131,"props":1947,"children":1948},{"style":138},[1949],{"type":23,"value":1950},"asm",{"type":17,"tag":131,"props":1952,"children":1953},{"style":150},[1954],{"type":23,"value":833},{"type":17,"tag":131,"props":1956,"children":1957},{"style":138},[1958],{"type":23,"value":1959},"AIN",{"type":17,"tag":131,"props":1961,"children":1962},{"style":150},[1963],{"type":23,"value":1964}," @pointer }\n",{"type":17,"tag":1369,"props":1966,"children":1967},{},[1968],{"type":23,"value":1373},{"title":7,"searchDepth":35,"depth":35,"links":1970},[1971,1972,1973],{"id":1412,"depth":35,"text":1415},{"id":1478,"depth":35,"text":1481},{"id":1610,"depth":35,"text":1613},"content:docs:3.language-reference:3.stack-allocations.md","docs/3.language-reference/3.stack-allocations.md",{"_path":70,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":69,"description":1977,"tags":1978,"navigation":1979,"body":1980,"_type":37,"_id":3121,"_source":39,"_file":3122,"_extension":41},"Learn more about function pointers.",[20],{"sidebar":55},{"type":14,"children":1981,"toc":3115},[1982,1987,1992,1998,2023,2098,2108,2135,2141,2153,2239,2245,2256,2274,2433,2444,2556,2560,2565,3111],{"type":17,"tag":18,"props":1983,"children":1985},{"id":1984},"function-pointers",[1986],{"type":23,"value":69},{"type":17,"tag":25,"props":1988,"children":1989},{},[1990],{"type":23,"value":1991},"A function pointer is a pointer that points to a function. Function pointers are useful for passing functions as arguments to other functions, or for storing functions in a variable.",{"type":17,"tag":190,"props":1993,"children":1995},{"id":1994},"declaring-a-function-pointer",[1996],{"type":23,"value":1997},"Declaring a function pointer",{"type":17,"tag":25,"props":1999,"children":2000},{},[2001,2003,2008,2010,2015,2017,2022],{"type":23,"value":2002},"A function pointer is declared using the ",{"type":17,"tag":127,"props":2004,"children":2005},{"className":7},[2006],{"type":23,"value":2007},"func",{"type":23,"value":2009}," keyword, followed by ",{"type":17,"tag":127,"props":2011,"children":2012},{"className":7},[2013],{"type":23,"value":2014},"\u003C",{"type":23,"value":2016},", the types of the parameters separated by a comma, the return type of the function and ",{"type":17,"tag":127,"props":2018,"children":2019},{"className":7},[2020],{"type":23,"value":2021},">",{"type":23,"value":240},{"type":17,"tag":120,"props":2024,"children":2026},{"className":122,"code":2025,"language":124,"meta":7,"style":7},"func\u003Cint, int, int> add\n//   ^^^  ^^^  ^^^\n//    |    |    Return type\n//    |    Second parameter\n//    First parameter\n",[2027],{"type":17,"tag":127,"props":2028,"children":2029},{"__ignoreMap":7},[2030,2066,2074,2082,2090],{"type":17,"tag":131,"props":2031,"children":2032},{"class":133,"line":134},[2033,2037,2041,2045,2049,2053,2057,2061],{"type":17,"tag":131,"props":2034,"children":2035},{"style":138},[2036],{"type":23,"value":2007},{"type":17,"tag":131,"props":2038,"children":2039},{"style":150},[2040],{"type":23,"value":2014},{"type":17,"tag":131,"props":2042,"children":2043},{"style":138},[2044],{"type":23,"value":1107},{"type":17,"tag":131,"props":2046,"children":2047},{"style":150},[2048],{"type":23,"value":843},{"type":17,"tag":131,"props":2050,"children":2051},{"style":138},[2052],{"type":23,"value":1107},{"type":17,"tag":131,"props":2054,"children":2055},{"style":150},[2056],{"type":23,"value":843},{"type":17,"tag":131,"props":2058,"children":2059},{"style":138},[2060],{"type":23,"value":1107},{"type":17,"tag":131,"props":2062,"children":2063},{"style":150},[2064],{"type":23,"value":2065},"> add\n",{"type":17,"tag":131,"props":2067,"children":2068},{"class":133,"line":35},[2069],{"type":17,"tag":131,"props":2070,"children":2071},{"style":413},[2072],{"type":23,"value":2073},"//   ^^^  ^^^  ^^^\n",{"type":17,"tag":131,"props":2075,"children":2076},{"class":133,"line":169},[2077],{"type":17,"tag":131,"props":2078,"children":2079},{"style":413},[2080],{"type":23,"value":2081},"//    |    |    Return type\n",{"type":17,"tag":131,"props":2083,"children":2084},{"class":133,"line":182},[2085],{"type":17,"tag":131,"props":2086,"children":2087},{"style":413},[2088],{"type":23,"value":2089},"//    |    Second parameter\n",{"type":17,"tag":131,"props":2091,"children":2092},{"class":133,"line":303},[2093],{"type":17,"tag":131,"props":2094,"children":2095},{"style":413},[2096],{"type":23,"value":2097},"//    First parameter\n",{"type":17,"tag":25,"props":2099,"children":2100},{},[2101,2103,2107],{"type":23,"value":2102},"The function pointer should always have a return type, even if the function it points to does not return a value. If the function does not return a value, the return type should be ",{"type":17,"tag":127,"props":2104,"children":2105},{"className":7},[2106],{"type":23,"value":1753},{"type":23,"value":240},{"type":17,"tag":120,"props":2109,"children":2111},{"className":122,"code":2110,"language":124,"meta":7,"style":7},"func\u003Cvoid> callback\n",[2112],{"type":17,"tag":127,"props":2113,"children":2114},{"__ignoreMap":7},[2115],{"type":17,"tag":131,"props":2116,"children":2117},{"class":133,"line":134},[2118,2122,2126,2130],{"type":17,"tag":131,"props":2119,"children":2120},{"style":138},[2121],{"type":23,"value":2007},{"type":17,"tag":131,"props":2123,"children":2124},{"style":150},[2125],{"type":23,"value":2014},{"type":17,"tag":131,"props":2127,"children":2128},{"style":138},[2129],{"type":23,"value":1753},{"type":17,"tag":131,"props":2131,"children":2132},{"style":150},[2133],{"type":23,"value":2134},"> callback\n",{"type":17,"tag":190,"props":2136,"children":2138},{"id":2137},"calling-a-function-pointer",[2139],{"type":23,"value":2140},"Calling a function pointer",{"type":17,"tag":25,"props":2142,"children":2143},{},[2144,2146,2151],{"type":23,"value":2145},"A function pointer is called using the ",{"type":17,"tag":127,"props":2147,"children":2148},{"className":7},[2149],{"type":23,"value":2150},"()",{"type":23,"value":2152}," operator, followed by the arguments of the function:",{"type":17,"tag":120,"props":2154,"children":2156},{"className":122,"code":2155,"language":124,"meta":7,"style":7},"func\u003Cint, int, int> add\n\nint result = add(1, 2)\n",[2157],{"type":17,"tag":127,"props":2158,"children":2159},{"__ignoreMap":7},[2160,2195,2202],{"type":17,"tag":131,"props":2161,"children":2162},{"class":133,"line":134},[2163,2167,2171,2175,2179,2183,2187,2191],{"type":17,"tag":131,"props":2164,"children":2165},{"style":138},[2166],{"type":23,"value":2007},{"type":17,"tag":131,"props":2168,"children":2169},{"style":150},[2170],{"type":23,"value":2014},{"type":17,"tag":131,"props":2172,"children":2173},{"style":138},[2174],{"type":23,"value":1107},{"type":17,"tag":131,"props":2176,"children":2177},{"style":150},[2178],{"type":23,"value":843},{"type":17,"tag":131,"props":2180,"children":2181},{"style":138},[2182],{"type":23,"value":1107},{"type":17,"tag":131,"props":2184,"children":2185},{"style":150},[2186],{"type":23,"value":843},{"type":17,"tag":131,"props":2188,"children":2189},{"style":138},[2190],{"type":23,"value":1107},{"type":17,"tag":131,"props":2192,"children":2193},{"style":150},[2194],{"type":23,"value":2065},{"type":17,"tag":131,"props":2196,"children":2197},{"class":133,"line":35},[2198],{"type":17,"tag":131,"props":2199,"children":2200},{"emptyLinePlaceholder":55},[2201],{"type":23,"value":802},{"type":17,"tag":131,"props":2203,"children":2204},{"class":133,"line":169},[2205,2209,2213,2217,2222,2226,2230,2234],{"type":17,"tag":131,"props":2206,"children":2207},{"style":138},[2208],{"type":23,"value":1107},{"type":17,"tag":131,"props":2210,"children":2211},{"style":150},[2212],{"type":23,"value":1585},{"type":17,"tag":131,"props":2214,"children":2215},{"style":138},[2216],{"type":23,"value":828},{"type":17,"tag":131,"props":2218,"children":2219},{"style":150},[2220],{"type":23,"value":2221}," add(",{"type":17,"tag":131,"props":2223,"children":2224},{"style":243},[2225],{"type":23,"value":838},{"type":17,"tag":131,"props":2227,"children":2228},{"style":150},[2229],{"type":23,"value":843},{"type":17,"tag":131,"props":2231,"children":2232},{"style":243},[2233],{"type":23,"value":848},{"type":17,"tag":131,"props":2235,"children":2236},{"style":150},[2237],{"type":23,"value":2238},")\n",{"type":17,"tag":190,"props":2240,"children":2242},{"id":2241},"assigning-a-function-pointer",[2243],{"type":23,"value":2244},"Assigning a function pointer",{"type":17,"tag":25,"props":2246,"children":2247},{},[2248,2250,2254],{"type":23,"value":2249},"A function pointer can be assigned to a function using the ",{"type":17,"tag":127,"props":2251,"children":2252},{"className":7},[2253],{"type":23,"value":828},{"type":23,"value":2255}," operator with a existing function or lambda expression.",{"type":17,"tag":25,"props":2257,"children":2258},{},[2259,2261,2266,2268,2273],{"type":23,"value":2260},"In the following example, the function pointer ",{"type":17,"tag":127,"props":2262,"children":2263},{"className":7},[2264],{"type":23,"value":2265},"addPointer",{"type":23,"value":2267}," is assigned to the function ",{"type":17,"tag":127,"props":2269,"children":2270},{"className":7},[2271],{"type":23,"value":2272},"add",{"type":23,"value":240},{"type":17,"tag":120,"props":2275,"children":2277},{"className":122,"code":2276,"filename":744,"language":124,"meta":7,"style":7},"func\u003Cint, int, int> addPointer = add\n\nint result = addPointer(1, 2)\n\nint add(int a, int b) {\n    return a + b\n}\n",[2278],{"type":17,"tag":127,"props":2279,"children":2280},{"__ignoreMap":7},[2281,2326,2333,2369,2376,2405,2426],{"type":17,"tag":131,"props":2282,"children":2283},{"class":133,"line":134},[2284,2288,2292,2296,2300,2304,2308,2312,2317,2321],{"type":17,"tag":131,"props":2285,"children":2286},{"style":138},[2287],{"type":23,"value":2007},{"type":17,"tag":131,"props":2289,"children":2290},{"style":150},[2291],{"type":23,"value":2014},{"type":17,"tag":131,"props":2293,"children":2294},{"style":138},[2295],{"type":23,"value":1107},{"type":17,"tag":131,"props":2297,"children":2298},{"style":150},[2299],{"type":23,"value":843},{"type":17,"tag":131,"props":2301,"children":2302},{"style":138},[2303],{"type":23,"value":1107},{"type":17,"tag":131,"props":2305,"children":2306},{"style":150},[2307],{"type":23,"value":843},{"type":17,"tag":131,"props":2309,"children":2310},{"style":138},[2311],{"type":23,"value":1107},{"type":17,"tag":131,"props":2313,"children":2314},{"style":150},[2315],{"type":23,"value":2316},"> addPointer ",{"type":17,"tag":131,"props":2318,"children":2319},{"style":138},[2320],{"type":23,"value":828},{"type":17,"tag":131,"props":2322,"children":2323},{"style":150},[2324],{"type":23,"value":2325}," add\n",{"type":17,"tag":131,"props":2327,"children":2328},{"class":133,"line":35},[2329],{"type":17,"tag":131,"props":2330,"children":2331},{"emptyLinePlaceholder":55},[2332],{"type":23,"value":802},{"type":17,"tag":131,"props":2334,"children":2335},{"class":133,"line":169},[2336,2340,2344,2348,2353,2357,2361,2365],{"type":17,"tag":131,"props":2337,"children":2338},{"style":138},[2339],{"type":23,"value":1107},{"type":17,"tag":131,"props":2341,"children":2342},{"style":150},[2343],{"type":23,"value":1585},{"type":17,"tag":131,"props":2345,"children":2346},{"style":138},[2347],{"type":23,"value":828},{"type":17,"tag":131,"props":2349,"children":2350},{"style":150},[2351],{"type":23,"value":2352}," addPointer(",{"type":17,"tag":131,"props":2354,"children":2355},{"style":243},[2356],{"type":23,"value":838},{"type":17,"tag":131,"props":2358,"children":2359},{"style":150},[2360],{"type":23,"value":843},{"type":17,"tag":131,"props":2362,"children":2363},{"style":243},[2364],{"type":23,"value":848},{"type":17,"tag":131,"props":2366,"children":2367},{"style":150},[2368],{"type":23,"value":2238},{"type":17,"tag":131,"props":2370,"children":2371},{"class":133,"line":182},[2372],{"type":17,"tag":131,"props":2373,"children":2374},{"emptyLinePlaceholder":55},[2375],{"type":23,"value":802},{"type":17,"tag":131,"props":2377,"children":2378},{"class":133,"line":303},[2379,2383,2387,2391,2396,2400],{"type":17,"tag":131,"props":2380,"children":2381},{"style":138},[2382],{"type":23,"value":1107},{"type":17,"tag":131,"props":2384,"children":2385},{"style":150},[2386],{"type":23,"value":2221},{"type":17,"tag":131,"props":2388,"children":2389},{"style":138},[2390],{"type":23,"value":1107},{"type":17,"tag":131,"props":2392,"children":2393},{"style":150},[2394],{"type":23,"value":2395}," a, ",{"type":17,"tag":131,"props":2397,"children":2398},{"style":138},[2399],{"type":23,"value":1107},{"type":17,"tag":131,"props":2401,"children":2402},{"style":150},[2403],{"type":23,"value":2404}," b) {\n",{"type":17,"tag":131,"props":2406,"children":2407},{"class":133,"line":328},[2408,2412,2416,2421],{"type":17,"tag":131,"props":2409,"children":2410},{"style":138},[2411],{"type":23,"value":1703},{"type":17,"tag":131,"props":2413,"children":2414},{"style":150},[2415],{"type":23,"value":401},{"type":17,"tag":131,"props":2417,"children":2418},{"style":138},[2419],{"type":23,"value":2420},"+",{"type":17,"tag":131,"props":2422,"children":2423},{"style":150},[2424],{"type":23,"value":2425}," b\n",{"type":17,"tag":131,"props":2427,"children":2428},{"class":133,"line":746},[2429],{"type":17,"tag":131,"props":2430,"children":2431},{"style":150},[2432],{"type":23,"value":188},{"type":17,"tag":25,"props":2434,"children":2435},{},[2436,2437,2442],{"type":23,"value":2260},{"type":17,"tag":127,"props":2438,"children":2439},{"className":7},[2440],{"type":23,"value":2441},"callbackPointer",{"type":23,"value":2443}," is assigned to a lambda expression:",{"type":17,"tag":120,"props":2445,"children":2447},{"className":122,"code":2446,"filename":744,"language":124,"meta":7,"style":7},"func\u003Cint, int, int> callbackPointer = (a, b) => a + b\n\nint result = callbackPointer(1, 2)\n",[2448],{"type":17,"tag":127,"props":2449,"children":2450},{"__ignoreMap":7},[2451,2513,2520],{"type":17,"tag":131,"props":2452,"children":2453},{"class":133,"line":134},[2454,2458,2462,2466,2470,2474,2478,2482,2487,2491,2496,2500,2505,2509],{"type":17,"tag":131,"props":2455,"children":2456},{"style":138},[2457],{"type":23,"value":2007},{"type":17,"tag":131,"props":2459,"children":2460},{"style":150},[2461],{"type":23,"value":2014},{"type":17,"tag":131,"props":2463,"children":2464},{"style":138},[2465],{"type":23,"value":1107},{"type":17,"tag":131,"props":2467,"children":2468},{"style":150},[2469],{"type":23,"value":843},{"type":17,"tag":131,"props":2471,"children":2472},{"style":138},[2473],{"type":23,"value":1107},{"type":17,"tag":131,"props":2475,"children":2476},{"style":150},[2477],{"type":23,"value":843},{"type":17,"tag":131,"props":2479,"children":2480},{"style":138},[2481],{"type":23,"value":1107},{"type":17,"tag":131,"props":2483,"children":2484},{"style":150},[2485],{"type":23,"value":2486},"> callbackPointer ",{"type":17,"tag":131,"props":2488,"children":2489},{"style":138},[2490],{"type":23,"value":828},{"type":17,"tag":131,"props":2492,"children":2493},{"style":150},[2494],{"type":23,"value":2495}," (a, b) ",{"type":17,"tag":131,"props":2497,"children":2498},{"style":138},[2499],{"type":23,"value":828},{"type":17,"tag":131,"props":2501,"children":2502},{"style":150},[2503],{"type":23,"value":2504},"> a ",{"type":17,"tag":131,"props":2506,"children":2507},{"style":138},[2508],{"type":23,"value":2420},{"type":17,"tag":131,"props":2510,"children":2511},{"style":150},[2512],{"type":23,"value":2425},{"type":17,"tag":131,"props":2514,"children":2515},{"class":133,"line":35},[2516],{"type":17,"tag":131,"props":2517,"children":2518},{"emptyLinePlaceholder":55},[2519],{"type":23,"value":802},{"type":17,"tag":131,"props":2521,"children":2522},{"class":133,"line":169},[2523,2527,2531,2535,2540,2544,2548,2552],{"type":17,"tag":131,"props":2524,"children":2525},{"style":138},[2526],{"type":23,"value":1107},{"type":17,"tag":131,"props":2528,"children":2529},{"style":150},[2530],{"type":23,"value":1585},{"type":17,"tag":131,"props":2532,"children":2533},{"style":138},[2534],{"type":23,"value":828},{"type":17,"tag":131,"props":2536,"children":2537},{"style":150},[2538],{"type":23,"value":2539}," callbackPointer(",{"type":17,"tag":131,"props":2541,"children":2542},{"style":243},[2543],{"type":23,"value":838},{"type":17,"tag":131,"props":2545,"children":2546},{"style":150},[2547],{"type":23,"value":843},{"type":17,"tag":131,"props":2549,"children":2550},{"style":243},[2551],{"type":23,"value":848},{"type":17,"tag":131,"props":2553,"children":2554},{"style":150},[2555],{"type":23,"value":2238},{"type":17,"tag":190,"props":2557,"children":2558},{"id":1610},[2559],{"type":23,"value":1613},{"type":17,"tag":25,"props":2561,"children":2562},{},[2563],{"type":23,"value":2564},"The following example stores function pointers in a array and calls them:",{"type":17,"tag":120,"props":2566,"children":2568},{"className":122,"code":2567,"filename":744,"language":124,"meta":7,"style":7},"var chars = create_pointer(0xD12A, 1)\n\nvar tick_callbacks = stackalloc func\u003Cvoid>[10]\nvar tick_callback_count = 0\n\n// Register a callback\nvoid register_tick_callback(func\u003Cvoid> callback) {\n    tick_callbacks[tick_callback_count++] = callback\n}\n\n// Call all the callbacks\nvoid tick() {\n    for (int i = 0; i \u003C tick_callback_count; i++) {\n        tick_callbacks[i]()\n    }\n}\n\n// Register a callback that clears the screen\nregister_tick_callback(() => {\n    for (int i = 0; i \u003C 17 * 17; i++) {\n        chars[i] = ' '\n    }\n})\n\n// Register a callback that draws a 'x' on the screen\n// and moves it to the right every time it is called\nvar offset = 0\n\nregister_tick_callback(() => {\n    chars[offset++] = 'x'\n})\n\n// Tick 3 times\ntick()\ntick()\ntick()\n\n// The 'x' should be on the 3rd column\n",[2569],{"type":17,"tag":127,"props":2570,"children":2571},{"__ignoreMap":7},[2572,2611,2618,2664,2685,2692,2700,2729,2755,2762,2769,2777,2789,2811,2819,2827,2834,2841,2849,2866,2905,2928,2935,2943,2950,2958,2966,2986,2993,3009,3044,3052,3060,3069,3078,3086,3094,3102],{"type":17,"tag":131,"props":2573,"children":2574},{"class":133,"line":134},[2575,2580,2585,2589,2594,2598,2603,2607],{"type":17,"tag":131,"props":2576,"children":2577},{"style":138},[2578],{"type":23,"value":2579},"var",{"type":17,"tag":131,"props":2581,"children":2582},{"style":150},[2583],{"type":23,"value":2584}," chars ",{"type":17,"tag":131,"props":2586,"children":2587},{"style":138},[2588],{"type":23,"value":828},{"type":17,"tag":131,"props":2590,"children":2591},{"style":150},[2592],{"type":23,"value":2593}," create_pointer(",{"type":17,"tag":131,"props":2595,"children":2596},{"style":243},[2597],{"type":23,"value":1548},{"type":17,"tag":131,"props":2599,"children":2600},{"style":150},[2601],{"type":23,"value":2602},"xD12A, ",{"type":17,"tag":131,"props":2604,"children":2605},{"style":243},[2606],{"type":23,"value":838},{"type":17,"tag":131,"props":2608,"children":2609},{"style":150},[2610],{"type":23,"value":2238},{"type":17,"tag":131,"props":2612,"children":2613},{"class":133,"line":35},[2614],{"type":17,"tag":131,"props":2615,"children":2616},{"emptyLinePlaceholder":55},[2617],{"type":23,"value":802},{"type":17,"tag":131,"props":2619,"children":2620},{"class":133,"line":169},[2621,2625,2630,2634,2638,2643,2647,2651,2656,2660],{"type":17,"tag":131,"props":2622,"children":2623},{"style":138},[2624],{"type":23,"value":2579},{"type":17,"tag":131,"props":2626,"children":2627},{"style":150},[2628],{"type":23,"value":2629}," tick_callbacks ",{"type":17,"tag":131,"props":2631,"children":2632},{"style":138},[2633],{"type":23,"value":828},{"type":17,"tag":131,"props":2635,"children":2636},{"style":138},[2637],{"type":23,"value":1455},{"type":17,"tag":131,"props":2639,"children":2640},{"style":138},[2641],{"type":23,"value":2642}," func",{"type":17,"tag":131,"props":2644,"children":2645},{"style":150},[2646],{"type":23,"value":2014},{"type":17,"tag":131,"props":2648,"children":2649},{"style":138},[2650],{"type":23,"value":1753},{"type":17,"tag":131,"props":2652,"children":2653},{"style":150},[2654],{"type":23,"value":2655},">[",{"type":17,"tag":131,"props":2657,"children":2658},{"style":243},[2659],{"type":23,"value":1470},{"type":17,"tag":131,"props":2661,"children":2662},{"style":150},[2663],{"type":23,"value":1475},{"type":17,"tag":131,"props":2665,"children":2666},{"class":133,"line":182},[2667,2671,2676,2680],{"type":17,"tag":131,"props":2668,"children":2669},{"style":138},[2670],{"type":23,"value":2579},{"type":17,"tag":131,"props":2672,"children":2673},{"style":150},[2674],{"type":23,"value":2675}," tick_callback_count ",{"type":17,"tag":131,"props":2677,"children":2678},{"style":138},[2679],{"type":23,"value":828},{"type":17,"tag":131,"props":2681,"children":2682},{"style":243},[2683],{"type":23,"value":2684}," 0\n",{"type":17,"tag":131,"props":2686,"children":2687},{"class":133,"line":303},[2688],{"type":17,"tag":131,"props":2689,"children":2690},{"emptyLinePlaceholder":55},[2691],{"type":23,"value":802},{"type":17,"tag":131,"props":2693,"children":2694},{"class":133,"line":328},[2695],{"type":17,"tag":131,"props":2696,"children":2697},{"style":413},[2698],{"type":23,"value":2699},"// Register a callback\n",{"type":17,"tag":131,"props":2701,"children":2702},{"class":133,"line":746},[2703,2707,2712,2716,2720,2724],{"type":17,"tag":131,"props":2704,"children":2705},{"style":138},[2706],{"type":23,"value":1753},{"type":17,"tag":131,"props":2708,"children":2709},{"style":150},[2710],{"type":23,"value":2711}," register_tick_callback(",{"type":17,"tag":131,"props":2713,"children":2714},{"style":138},[2715],{"type":23,"value":2007},{"type":17,"tag":131,"props":2717,"children":2718},{"style":150},[2719],{"type":23,"value":2014},{"type":17,"tag":131,"props":2721,"children":2722},{"style":138},[2723],{"type":23,"value":1753},{"type":17,"tag":131,"props":2725,"children":2726},{"style":150},[2727],{"type":23,"value":2728},"> callback) {\n",{"type":17,"tag":131,"props":2730,"children":2731},{"class":133,"line":863},[2732,2737,2742,2746,2750],{"type":17,"tag":131,"props":2733,"children":2734},{"style":150},[2735],{"type":23,"value":2736},"    tick_callbacks[tick_callback_count",{"type":17,"tag":131,"props":2738,"children":2739},{"style":138},[2740],{"type":23,"value":2741},"++",{"type":17,"tag":131,"props":2743,"children":2744},{"style":150},[2745],{"type":23,"value":1553},{"type":17,"tag":131,"props":2747,"children":2748},{"style":138},[2749],{"type":23,"value":828},{"type":17,"tag":131,"props":2751,"children":2752},{"style":150},[2753],{"type":23,"value":2754}," callback\n",{"type":17,"tag":131,"props":2756,"children":2757},{"class":133,"line":994},[2758],{"type":17,"tag":131,"props":2759,"children":2760},{"style":150},[2761],{"type":23,"value":188},{"type":17,"tag":131,"props":2763,"children":2764},{"class":133,"line":1240},[2765],{"type":17,"tag":131,"props":2766,"children":2767},{"emptyLinePlaceholder":55},[2768],{"type":23,"value":802},{"type":17,"tag":131,"props":2770,"children":2771},{"class":133,"line":1248},[2772],{"type":17,"tag":131,"props":2773,"children":2774},{"style":413},[2775],{"type":23,"value":2776},"// Call all the callbacks\n",{"type":17,"tag":131,"props":2778,"children":2779},{"class":133,"line":1270},[2780,2784],{"type":17,"tag":131,"props":2781,"children":2782},{"style":138},[2783],{"type":23,"value":1753},{"type":17,"tag":131,"props":2785,"children":2786},{"style":150},[2787],{"type":23,"value":2788}," tick() {\n",{"type":17,"tag":131,"props":2790,"children":2791},{"class":133,"line":1297},[2792,2797,2802,2806],{"type":17,"tag":131,"props":2793,"children":2794},{"style":138},[2795],{"type":23,"value":2796},"    for",{"type":17,"tag":131,"props":2798,"children":2799},{"style":150},[2800],{"type":23,"value":2801}," (int i = ",{"type":17,"tag":131,"props":2803,"children":2804},{"style":243},[2805],{"type":23,"value":1548},{"type":17,"tag":131,"props":2807,"children":2808},{"style":150},[2809],{"type":23,"value":2810},"; i \u003C tick_callback_count; i++) {\n",{"type":17,"tag":131,"props":2812,"children":2813},{"class":133,"line":1324},[2814],{"type":17,"tag":131,"props":2815,"children":2816},{"style":150},[2817],{"type":23,"value":2818},"        tick_callbacks[i]()\n",{"type":17,"tag":131,"props":2820,"children":2821},{"class":133,"line":1332},[2822],{"type":17,"tag":131,"props":2823,"children":2824},{"style":150},[2825],{"type":23,"value":2826},"    }\n",{"type":17,"tag":131,"props":2828,"children":2829},{"class":133,"line":1340},[2830],{"type":17,"tag":131,"props":2831,"children":2832},{"style":150},[2833],{"type":23,"value":188},{"type":17,"tag":131,"props":2835,"children":2836},{"class":133,"line":1349},[2837],{"type":17,"tag":131,"props":2838,"children":2839},{"emptyLinePlaceholder":55},[2840],{"type":23,"value":802},{"type":17,"tag":131,"props":2842,"children":2843},{"class":133,"line":1800},[2844],{"type":17,"tag":131,"props":2845,"children":2846},{"style":413},[2847],{"type":23,"value":2848},"// Register a callback that clears the screen\n",{"type":17,"tag":131,"props":2850,"children":2851},{"class":133,"line":1836},[2852,2857,2861],{"type":17,"tag":131,"props":2853,"children":2854},{"style":150},[2855],{"type":23,"value":2856},"register_tick_callback(() ",{"type":17,"tag":131,"props":2858,"children":2859},{"style":138},[2860],{"type":23,"value":828},{"type":17,"tag":131,"props":2862,"children":2863},{"style":150},[2864],{"type":23,"value":2865},"> {\n",{"type":17,"tag":131,"props":2867,"children":2868},{"class":133,"line":1844},[2869,2873,2877,2881,2886,2891,2896,2900],{"type":17,"tag":131,"props":2870,"children":2871},{"style":138},[2872],{"type":23,"value":2796},{"type":17,"tag":131,"props":2874,"children":2875},{"style":150},[2876],{"type":23,"value":2801},{"type":17,"tag":131,"props":2878,"children":2879},{"style":243},[2880],{"type":23,"value":1548},{"type":17,"tag":131,"props":2882,"children":2883},{"style":150},[2884],{"type":23,"value":2885},"; i \u003C ",{"type":17,"tag":131,"props":2887,"children":2888},{"style":243},[2889],{"type":23,"value":2890},"17",{"type":17,"tag":131,"props":2892,"children":2893},{"style":150},[2894],{"type":23,"value":2895}," * ",{"type":17,"tag":131,"props":2897,"children":2898},{"style":243},[2899],{"type":23,"value":2890},{"type":17,"tag":131,"props":2901,"children":2902},{"style":150},[2903],{"type":23,"value":2904},"; i++) {\n",{"type":17,"tag":131,"props":2906,"children":2907},{"class":133,"line":1853},[2908,2913,2917,2923],{"type":17,"tag":131,"props":2909,"children":2910},{"style":150},[2911],{"type":23,"value":2912},"        chars[i] ",{"type":17,"tag":131,"props":2914,"children":2915},{"style":138},[2916],{"type":23,"value":828},{"type":17,"tag":131,"props":2918,"children":2920},{"style":2919},"--shiki-default:#032F62;--shiki-dark:#9ECBFF",[2921],{"type":23,"value":2922}," '",{"type":17,"tag":131,"props":2924,"children":2925},{"style":2919},[2926],{"type":23,"value":2927}," '\n",{"type":17,"tag":131,"props":2929,"children":2930},{"class":133,"line":1862},[2931],{"type":17,"tag":131,"props":2932,"children":2933},{"style":150},[2934],{"type":23,"value":2826},{"type":17,"tag":131,"props":2936,"children":2937},{"class":133,"line":1870},[2938],{"type":17,"tag":131,"props":2939,"children":2940},{"style":150},[2941],{"type":23,"value":2942},"})\n",{"type":17,"tag":131,"props":2944,"children":2945},{"class":133,"line":1878},[2946],{"type":17,"tag":131,"props":2947,"children":2948},{"emptyLinePlaceholder":55},[2949],{"type":23,"value":802},{"type":17,"tag":131,"props":2951,"children":2952},{"class":133,"line":1886},[2953],{"type":17,"tag":131,"props":2954,"children":2955},{"style":413},[2956],{"type":23,"value":2957},"// Register a callback that draws a 'x' on the screen\n",{"type":17,"tag":131,"props":2959,"children":2960},{"class":133,"line":1895},[2961],{"type":17,"tag":131,"props":2962,"children":2963},{"style":413},[2964],{"type":23,"value":2965},"// and moves it to the right every time it is called\n",{"type":17,"tag":131,"props":2967,"children":2968},{"class":133,"line":1903},[2969,2973,2978,2982],{"type":17,"tag":131,"props":2970,"children":2971},{"style":138},[2972],{"type":23,"value":2579},{"type":17,"tag":131,"props":2974,"children":2975},{"style":150},[2976],{"type":23,"value":2977}," offset ",{"type":17,"tag":131,"props":2979,"children":2980},{"style":138},[2981],{"type":23,"value":828},{"type":17,"tag":131,"props":2983,"children":2984},{"style":243},[2985],{"type":23,"value":2684},{"type":17,"tag":131,"props":2987,"children":2988},{"class":133,"line":1912},[2989],{"type":17,"tag":131,"props":2990,"children":2991},{"emptyLinePlaceholder":55},[2992],{"type":23,"value":802},{"type":17,"tag":131,"props":2994,"children":2996},{"class":133,"line":2995},29,[2997,3001,3005],{"type":17,"tag":131,"props":2998,"children":2999},{"style":150},[3000],{"type":23,"value":2856},{"type":17,"tag":131,"props":3002,"children":3003},{"style":138},[3004],{"type":23,"value":828},{"type":17,"tag":131,"props":3006,"children":3007},{"style":150},[3008],{"type":23,"value":2865},{"type":17,"tag":131,"props":3010,"children":3012},{"class":133,"line":3011},30,[3013,3018,3022,3026,3030,3034,3039],{"type":17,"tag":131,"props":3014,"children":3015},{"style":150},[3016],{"type":23,"value":3017},"    chars[offset",{"type":17,"tag":131,"props":3019,"children":3020},{"style":138},[3021],{"type":23,"value":2741},{"type":17,"tag":131,"props":3023,"children":3024},{"style":150},[3025],{"type":23,"value":1553},{"type":17,"tag":131,"props":3027,"children":3028},{"style":138},[3029],{"type":23,"value":828},{"type":17,"tag":131,"props":3031,"children":3032},{"style":2919},[3033],{"type":23,"value":2922},{"type":17,"tag":131,"props":3035,"children":3036},{"style":150},[3037],{"type":23,"value":3038},"x",{"type":17,"tag":131,"props":3040,"children":3041},{"style":2919},[3042],{"type":23,"value":3043},"'\n",{"type":17,"tag":131,"props":3045,"children":3047},{"class":133,"line":3046},31,[3048],{"type":17,"tag":131,"props":3049,"children":3050},{"style":150},[3051],{"type":23,"value":2942},{"type":17,"tag":131,"props":3053,"children":3055},{"class":133,"line":3054},32,[3056],{"type":17,"tag":131,"props":3057,"children":3058},{"emptyLinePlaceholder":55},[3059],{"type":23,"value":802},{"type":17,"tag":131,"props":3061,"children":3063},{"class":133,"line":3062},33,[3064],{"type":17,"tag":131,"props":3065,"children":3066},{"style":413},[3067],{"type":23,"value":3068},"// Tick 3 times\n",{"type":17,"tag":131,"props":3070,"children":3072},{"class":133,"line":3071},34,[3073],{"type":17,"tag":131,"props":3074,"children":3075},{"style":150},[3076],{"type":23,"value":3077},"tick()\n",{"type":17,"tag":131,"props":3079,"children":3081},{"class":133,"line":3080},35,[3082],{"type":17,"tag":131,"props":3083,"children":3084},{"style":150},[3085],{"type":23,"value":3077},{"type":17,"tag":131,"props":3087,"children":3089},{"class":133,"line":3088},36,[3090],{"type":17,"tag":131,"props":3091,"children":3092},{"style":150},[3093],{"type":23,"value":3077},{"type":17,"tag":131,"props":3095,"children":3097},{"class":133,"line":3096},37,[3098],{"type":17,"tag":131,"props":3099,"children":3100},{"emptyLinePlaceholder":55},[3101],{"type":23,"value":802},{"type":17,"tag":131,"props":3103,"children":3105},{"class":133,"line":3104},38,[3106],{"type":17,"tag":131,"props":3107,"children":3108},{"style":413},[3109],{"type":23,"value":3110},"// The 'x' should be on the 3rd column\n",{"type":17,"tag":1369,"props":3112,"children":3113},{},[3114],{"type":23,"value":1373},{"title":7,"searchDepth":35,"depth":35,"links":3116},[3117,3118,3119,3120],{"id":1994,"depth":35,"text":1997},{"id":2137,"depth":35,"text":2140},{"id":2241,"depth":35,"text":2244},{"id":1610,"depth":35,"text":1613},"content:docs:3.language-reference:2.function-pointer.md","docs/3.language-reference/2.function-pointer.md",1702090521774]