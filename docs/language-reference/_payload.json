[{"data":1,"prerenderedAt":603},["Reactive",2],{"content-query-EYabfiwUqJ":3,"content-navigation-8C37fagqQL":42,"content-navigation-Lhv2WviZJC":80,"content-query-x47RLZfWto":87},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":37,"_id":38,"_source":39,"_file":40,"_extension":41},"/docs/language-reference","docs",false,"","Language reference","All the details about the language.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":34},"root",[16,24,30],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"language-reference",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This section contains all the details about the Yabal language.",{"type":17,"tag":31,"props":32,"children":33},"related",{":tags":20},[],{"title":7,"searchDepth":35,"depth":35,"links":36},2,[],"markdown","content:docs:3.language-reference:index.md","content","docs/3.language-reference/index.md","md",[43],{"title":44,"_path":45,"children":46,"root":55},"Documentation","/docs",[47,48,63,69],{"title":44,"_path":45},{"title":49,"_path":50,"children":51,"sidebar":6},"Getting started","/docs/get-started",[52,56,59,62],{"title":53,"_path":54,"sidebar":55},"Downloads","/docs/get-started/downloads",true,{"title":57,"_path":58,"sidebar":55},"Emulator","/docs/get-started/emulator",{"title":60,"_path":61,"sidebar":55},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":49,"_path":50,"sidebar":6},{"title":8,"_path":4,"children":64,"sidebar":6},[65,68],{"title":66,"_path":67,"sidebar":55},"Structs","/docs/language-reference/structs",{"title":8,"_path":4,"sidebar":6},{"title":70,"_path":71,"children":72,"sidebar":6},"Advanced topics","/docs/advanced-topics",[73,76,79],{"title":74,"_path":75,"sidebar":55},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":77,"_path":78,"sidebar":55},"Optimizing","/docs/advanced-topics/optimizing",{"title":70,"_path":71,"sidebar":6},[81],{"title":44,"_path":45,"children":82,"root":55},[83],{"title":84,"_path":4,"children":85},"Language Reference",[86],{"title":66,"_path":67,"sidebar":55},{"_path":67,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":66,"description":88,"tags":89,"navigation":90,"body":91,"_type":37,"_id":601,"_source":39,"_file":602,"_extension":41},"Learn more about structs.",[20],{"sidebar":55},{"type":14,"children":92,"toc":596},[93,98,103,173,180,185,318,339,346,351,465,470,590],{"type":17,"tag":18,"props":94,"children":96},{"id":95},"structs",[97],{"type":23,"value":66},{"type":17,"tag":25,"props":99,"children":100},{},[101],{"type":23,"value":102},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":104,"props":105,"children":109},"pre",{"className":106,"code":107,"language":108,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[110],{"type":17,"tag":111,"props":112,"children":113},"code",{"__ignoreMap":7},[114,138,151,164],{"type":17,"tag":115,"props":116,"children":119},"span",{"class":117,"line":118},"line",1,[120,126,132],{"type":17,"tag":115,"props":121,"children":123},{"style":122},"--shiki-default:#D73A49;--shiki-dark:#F97583",[124],{"type":23,"value":125},"struct",{"type":17,"tag":115,"props":127,"children":129},{"style":128},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[130],{"type":23,"value":131}," Point",{"type":17,"tag":115,"props":133,"children":135},{"style":134},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[136],{"type":23,"value":137}," {\n",{"type":17,"tag":115,"props":139,"children":140},{"class":117,"line":35},[141,146],{"type":17,"tag":115,"props":142,"children":143},{"style":122},[144],{"type":23,"value":145},"    int",{"type":17,"tag":115,"props":147,"children":148},{"style":134},[149],{"type":23,"value":150}," x;\n",{"type":17,"tag":115,"props":152,"children":154},{"class":117,"line":153},3,[155,159],{"type":17,"tag":115,"props":156,"children":157},{"style":122},[158],{"type":23,"value":145},{"type":17,"tag":115,"props":160,"children":161},{"style":134},[162],{"type":23,"value":163}," y;\n",{"type":17,"tag":115,"props":165,"children":167},{"class":117,"line":166},4,[168],{"type":17,"tag":115,"props":169,"children":170},{"style":134},[171],{"type":23,"value":172},"}\n",{"type":17,"tag":174,"props":175,"children":177},"h2",{"id":176},"bit-fields",[178],{"type":23,"value":179},"Bit-fields",{"type":17,"tag":25,"props":181,"children":182},{},[183],{"type":23,"value":184},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a hardware device, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":104,"props":186,"children":188},{"className":106,"code":187,"language":108,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[189],{"type":17,"tag":111,"props":190,"children":191},{"__ignoreMap":7},[192,208,236,260,285,310],{"type":17,"tag":115,"props":193,"children":194},{"class":117,"line":118},[195,199,204],{"type":17,"tag":115,"props":196,"children":197},{"style":122},[198],{"type":23,"value":125},{"type":17,"tag":115,"props":200,"children":201},{"style":128},[202],{"type":23,"value":203}," MouseInput",{"type":17,"tag":115,"props":205,"children":206},{"style":134},[207],{"type":23,"value":137},{"type":17,"tag":115,"props":209,"children":210},{"class":117,"line":35},[211,215,220,225,231],{"type":17,"tag":115,"props":212,"children":213},{"style":122},[214],{"type":23,"value":145},{"type":17,"tag":115,"props":216,"children":217},{"style":134},[218],{"type":23,"value":219}," y ",{"type":17,"tag":115,"props":221,"children":222},{"style":122},[223],{"type":23,"value":224},":",{"type":17,"tag":115,"props":226,"children":228},{"style":227},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[229],{"type":23,"value":230}," 7",{"type":17,"tag":115,"props":232,"children":233},{"style":134},[234],{"type":23,"value":235},";\n",{"type":17,"tag":115,"props":237,"children":238},{"class":117,"line":153},[239,243,248,252,256],{"type":17,"tag":115,"props":240,"children":241},{"style":122},[242],{"type":23,"value":145},{"type":17,"tag":115,"props":244,"children":245},{"style":134},[246],{"type":23,"value":247}," x ",{"type":17,"tag":115,"props":249,"children":250},{"style":122},[251],{"type":23,"value":224},{"type":17,"tag":115,"props":253,"children":254},{"style":227},[255],{"type":23,"value":230},{"type":17,"tag":115,"props":257,"children":258},{"style":134},[259],{"type":23,"value":235},{"type":17,"tag":115,"props":261,"children":262},{"class":117,"line":166},[263,267,272,276,281],{"type":17,"tag":115,"props":264,"children":265},{"style":122},[266],{"type":23,"value":145},{"type":17,"tag":115,"props":268,"children":269},{"style":134},[270],{"type":23,"value":271}," left ",{"type":17,"tag":115,"props":273,"children":274},{"style":122},[275],{"type":23,"value":224},{"type":17,"tag":115,"props":277,"children":278},{"style":227},[279],{"type":23,"value":280}," 1",{"type":17,"tag":115,"props":282,"children":283},{"style":134},[284],{"type":23,"value":235},{"type":17,"tag":115,"props":286,"children":288},{"class":117,"line":287},5,[289,293,298,302,306],{"type":17,"tag":115,"props":290,"children":291},{"style":122},[292],{"type":23,"value":145},{"type":17,"tag":115,"props":294,"children":295},{"style":134},[296],{"type":23,"value":297}," right ",{"type":17,"tag":115,"props":299,"children":300},{"style":122},[301],{"type":23,"value":224},{"type":17,"tag":115,"props":303,"children":304},{"style":227},[305],{"type":23,"value":280},{"type":17,"tag":115,"props":307,"children":308},{"style":134},[309],{"type":23,"value":235},{"type":17,"tag":115,"props":311,"children":313},{"class":117,"line":312},6,[314],{"type":17,"tag":115,"props":315,"children":316},{"style":134},[317],{"type":23,"value":172},{"type":17,"tag":319,"props":320,"children":321},"warning",{},[322],{"type":17,"tag":25,"props":323,"children":324},{},[325,331,333,337],{"type":17,"tag":326,"props":327,"children":328},"strong",{},[329],{"type":23,"value":330},"Note:",{"type":23,"value":332}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":334,"props":335,"children":336},"br",{},[],{"type":23,"value":338},"\nIt is not recommended to use bit-fields unless you are reading data from a hardware device.",{"type":17,"tag":340,"props":341,"children":343},"h3",{"id":342},"bit-offsets",[344],{"type":23,"value":345},"Bit offsets",{"type":17,"tag":25,"props":347,"children":348},{},[349],{"type":23,"value":350},"Bit-fields are aligned by 16 bits. It is not possible to start a bit-field outside the 16 bit range. For example:",{"type":17,"tag":104,"props":352,"children":354},{"className":106,"code":353,"language":108,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: 14 + 7 > 16\n}\n",[355],{"type":17,"tag":111,"props":356,"children":357},{"__ignoreMap":7},[358,367,383,408,433,458],{"type":17,"tag":115,"props":359,"children":360},{"class":117,"line":118},[361],{"type":17,"tag":115,"props":362,"children":364},{"style":363},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[365],{"type":23,"value":366},"// Note: the following example will not compile\n",{"type":17,"tag":115,"props":368,"children":369},{"class":117,"line":35},[370,374,379],{"type":17,"tag":115,"props":371,"children":372},{"style":122},[373],{"type":23,"value":125},{"type":17,"tag":115,"props":375,"children":376},{"style":128},[377],{"type":23,"value":378}," InvalidExample",{"type":17,"tag":115,"props":380,"children":381},{"style":134},[382],{"type":23,"value":137},{"type":17,"tag":115,"props":384,"children":385},{"class":117,"line":153},[386,390,395,399,403],{"type":17,"tag":115,"props":387,"children":388},{"style":122},[389],{"type":23,"value":145},{"type":17,"tag":115,"props":391,"children":392},{"style":134},[393],{"type":23,"value":394}," a ",{"type":17,"tag":115,"props":396,"children":397},{"style":122},[398],{"type":23,"value":224},{"type":17,"tag":115,"props":400,"children":401},{"style":227},[402],{"type":23,"value":230},{"type":17,"tag":115,"props":404,"children":405},{"style":363},[406],{"type":23,"value":407}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":115,"props":409,"children":410},{"class":117,"line":166},[411,415,420,424,428],{"type":17,"tag":115,"props":412,"children":413},{"style":122},[414],{"type":23,"value":145},{"type":17,"tag":115,"props":416,"children":417},{"style":134},[418],{"type":23,"value":419}," b ",{"type":17,"tag":115,"props":421,"children":422},{"style":122},[423],{"type":23,"value":224},{"type":17,"tag":115,"props":425,"children":426},{"style":227},[427],{"type":23,"value":230},{"type":17,"tag":115,"props":429,"children":430},{"style":363},[431],{"type":23,"value":432}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":115,"props":434,"children":435},{"class":117,"line":287},[436,440,445,449,453],{"type":17,"tag":115,"props":437,"children":438},{"style":122},[439],{"type":23,"value":145},{"type":17,"tag":115,"props":441,"children":442},{"style":134},[443],{"type":23,"value":444}," c ",{"type":17,"tag":115,"props":446,"children":447},{"style":122},[448],{"type":23,"value":224},{"type":17,"tag":115,"props":450,"children":451},{"style":227},[452],{"type":23,"value":230},{"type":17,"tag":115,"props":454,"children":455},{"style":363},[456],{"type":23,"value":457}," // This is invalid, offset 14 with 7 bits: 14 + 7 > 16\n",{"type":17,"tag":115,"props":459,"children":460},{"class":117,"line":312},[461],{"type":17,"tag":115,"props":462,"children":463},{"style":134},[464],{"type":23,"value":172},{"type":17,"tag":25,"props":466,"children":467},{},[468],{"type":23,"value":469},"When a normal field is introduced, the bit-field offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":104,"props":471,"children":473},{"className":106,"code":472,"language":108,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[474],{"type":17,"tag":111,"props":475,"children":476},{"__ignoreMap":7},[477,493,517,541,558,583],{"type":17,"tag":115,"props":478,"children":479},{"class":117,"line":118},[480,484,489],{"type":17,"tag":115,"props":481,"children":482},{"style":122},[483],{"type":23,"value":125},{"type":17,"tag":115,"props":485,"children":486},{"style":128},[487],{"type":23,"value":488}," Example",{"type":17,"tag":115,"props":490,"children":491},{"style":134},[492],{"type":23,"value":137},{"type":17,"tag":115,"props":494,"children":495},{"class":117,"line":35},[496,500,504,508,512],{"type":17,"tag":115,"props":497,"children":498},{"style":122},[499],{"type":23,"value":145},{"type":17,"tag":115,"props":501,"children":502},{"style":134},[503],{"type":23,"value":394},{"type":17,"tag":115,"props":505,"children":506},{"style":122},[507],{"type":23,"value":224},{"type":17,"tag":115,"props":509,"children":510},{"style":227},[511],{"type":23,"value":230},{"type":17,"tag":115,"props":513,"children":514},{"style":363},[515],{"type":23,"value":516},"   //          Offset 0,    7 bits\n",{"type":17,"tag":115,"props":518,"children":519},{"class":117,"line":153},[520,524,528,532,536],{"type":17,"tag":115,"props":521,"children":522},{"style":122},[523],{"type":23,"value":145},{"type":17,"tag":115,"props":525,"children":526},{"style":134},[527],{"type":23,"value":419},{"type":17,"tag":115,"props":529,"children":530},{"style":122},[531],{"type":23,"value":224},{"type":17,"tag":115,"props":533,"children":534},{"style":227},[535],{"type":23,"value":230},{"type":17,"tag":115,"props":537,"children":538},{"style":363},[539],{"type":23,"value":540},"   //          Offset 7,    7 bits\n",{"type":17,"tag":115,"props":542,"children":543},{"class":117,"line":166},[544,548,553],{"type":17,"tag":115,"props":545,"children":546},{"style":122},[547],{"type":23,"value":145},{"type":17,"tag":115,"props":549,"children":550},{"style":134},[551],{"type":23,"value":552}," c       ",{"type":17,"tag":115,"props":554,"children":555},{"style":363},[556],{"type":23,"value":557},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":115,"props":559,"children":560},{"class":117,"line":287},[561,565,570,574,578],{"type":17,"tag":115,"props":562,"children":563},{"style":122},[564],{"type":23,"value":145},{"type":17,"tag":115,"props":566,"children":567},{"style":134},[568],{"type":23,"value":569}," d ",{"type":17,"tag":115,"props":571,"children":572},{"style":122},[573],{"type":23,"value":224},{"type":17,"tag":115,"props":575,"children":576},{"style":227},[577],{"type":23,"value":230},{"type":17,"tag":115,"props":579,"children":580},{"style":363},[581],{"type":23,"value":582},"   //          Offset 32,   7 bits\n",{"type":17,"tag":115,"props":584,"children":585},{"class":117,"line":312},[586],{"type":17,"tag":115,"props":587,"children":588},{"style":134},[589],{"type":23,"value":172},{"type":17,"tag":591,"props":592,"children":593},"style",{},[594],{"type":23,"value":595},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":35,"depth":35,"links":597},[598],{"id":176,"depth":35,"text":179,"children":599},[600],{"id":342,"depth":153,"text":345},"content:docs:3.language-reference:1.structs.md","docs/3.language-reference/1.structs.md",1698279939285]