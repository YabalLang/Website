[{"data":1,"prerenderedAt":1375},["Reactive",2],{"content-query-EYabfiwUqJ":3,"content-navigation-8C37fagqQL":42,"content-navigation-Lhv2WviZJC":80,"content-query-x47RLZfWto":87},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"navigation":12,"body":13,"_type":37,"_id":38,"_source":39,"_file":40,"_extension":41},"/docs/language-reference","docs",false,"","Language reference","All the details about the language.",[11],"index",{"sidebar":6},{"type":14,"children":15,"toc":34},"root",[16,24,30],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"language-reference",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"This section contains all the details about the Yabal language.",{"type":17,"tag":31,"props":32,"children":33},"related",{":tags":20},[],{"title":7,"searchDepth":35,"depth":35,"links":36},2,[],"markdown","content:docs:3.language-reference:index.md","content","docs/3.language-reference/index.md","md",[43],{"title":44,"_path":45,"children":46,"root":55},"Documentation","/docs",[47,48,63,69],{"title":44,"_path":45},{"title":49,"_path":50,"children":51,"sidebar":6},"Getting started","/docs/get-started",[52,56,59,62],{"title":53,"_path":54,"sidebar":55},"Downloads","/docs/get-started/downloads",true,{"title":57,"_path":58,"sidebar":55},"Emulator","/docs/get-started/emulator",{"title":60,"_path":61,"sidebar":55},"Basics of Yabal","/docs/get-started/basics-of-yabal",{"title":49,"_path":50,"sidebar":6},{"title":8,"_path":4,"children":64,"sidebar":6},[65,68],{"title":66,"_path":67,"sidebar":55},"Structs","/docs/language-reference/structs",{"title":8,"_path":4,"sidebar":6},{"title":70,"_path":71,"children":72,"sidebar":6},"Advanced topics","/docs/advanced-topics",[73,76,79],{"title":74,"_path":75,"sidebar":55},"Assembly mode","/docs/advanced-topics/assembly-mode",{"title":77,"_path":78,"sidebar":55},"Optimizing","/docs/advanced-topics/optimizing",{"title":70,"_path":71,"sidebar":6},[81],{"title":44,"_path":45,"children":82,"root":55},[83],{"title":84,"_path":4,"children":85},"Language Reference",[86],{"title":66,"_path":67,"sidebar":55},{"_path":67,"_dir":20,"_draft":6,"_partial":6,"_locale":7,"title":66,"description":88,"tags":89,"navigation":90,"body":91,"_type":37,"_id":1373,"_source":39,"_file":1374,"_extension":41},"Learn more about structs.",[20],{"sidebar":55},{"type":14,"children":92,"toc":1365},[93,98,103,173,180,185,318,339,346,351,466,471,582,587,707,713,732,845,850,963,969,981,1112,1118,1123,1359],{"type":17,"tag":18,"props":94,"children":96},{"id":95},"structs",[97],{"type":23,"value":66},{"type":17,"tag":25,"props":99,"children":100},{},[101],{"type":23,"value":102},"A struct is a data structure that can contain multiple fields. A struct can be used to group related data together. For example, the following struct can be used to represent a 2D point:",{"type":17,"tag":104,"props":105,"children":109},"pre",{"className":106,"code":107,"language":108,"meta":7,"style":7},"language-yabal shiki shiki-themes github-light github-dark","struct Point {\n    int x;\n    int y;\n}\n","yabal",[110],{"type":17,"tag":111,"props":112,"children":113},"code",{"__ignoreMap":7},[114,138,151,164],{"type":17,"tag":115,"props":116,"children":119},"span",{"class":117,"line":118},"line",1,[120,126,132],{"type":17,"tag":115,"props":121,"children":123},{"style":122},"--shiki-default:#D73A49;--shiki-dark:#F97583",[124],{"type":23,"value":125},"struct",{"type":17,"tag":115,"props":127,"children":129},{"style":128},"--shiki-default:#6F42C1;--shiki-dark:#B392F0",[130],{"type":23,"value":131}," Point",{"type":17,"tag":115,"props":133,"children":135},{"style":134},"--shiki-default:#24292E;--shiki-dark:#E1E4E8",[136],{"type":23,"value":137}," {\n",{"type":17,"tag":115,"props":139,"children":140},{"class":117,"line":35},[141,146],{"type":17,"tag":115,"props":142,"children":143},{"style":122},[144],{"type":23,"value":145},"    int",{"type":17,"tag":115,"props":147,"children":148},{"style":134},[149],{"type":23,"value":150}," x;\n",{"type":17,"tag":115,"props":152,"children":154},{"class":117,"line":153},3,[155,159],{"type":17,"tag":115,"props":156,"children":157},{"style":122},[158],{"type":23,"value":145},{"type":17,"tag":115,"props":160,"children":161},{"style":134},[162],{"type":23,"value":163}," y;\n",{"type":17,"tag":115,"props":165,"children":167},{"class":117,"line":166},4,[168],{"type":17,"tag":115,"props":169,"children":170},{"style":134},[171],{"type":23,"value":172},"}\n",{"type":17,"tag":174,"props":175,"children":177},"h2",{"id":176},"bit-fields",[178],{"type":23,"value":179},"Bit-fields",{"type":17,"tag":25,"props":181,"children":182},{},[183],{"type":23,"value":184},"It is also possible to declare a field with a bit-width. This is useful if you want to read data from a peripheral, such as a mouse. For example, the following struct can be used to read the position of a mouse, and the state of its left and right buttons:",{"type":17,"tag":104,"props":186,"children":188},{"className":106,"code":187,"language":108,"meta":7,"style":7},"struct MouseInput {\n    int y : 7;\n    int x : 7;\n    int left : 1;\n    int right : 1;\n}\n",[189],{"type":17,"tag":111,"props":190,"children":191},{"__ignoreMap":7},[192,208,236,260,285,310],{"type":17,"tag":115,"props":193,"children":194},{"class":117,"line":118},[195,199,204],{"type":17,"tag":115,"props":196,"children":197},{"style":122},[198],{"type":23,"value":125},{"type":17,"tag":115,"props":200,"children":201},{"style":128},[202],{"type":23,"value":203}," MouseInput",{"type":17,"tag":115,"props":205,"children":206},{"style":134},[207],{"type":23,"value":137},{"type":17,"tag":115,"props":209,"children":210},{"class":117,"line":35},[211,215,220,225,231],{"type":17,"tag":115,"props":212,"children":213},{"style":122},[214],{"type":23,"value":145},{"type":17,"tag":115,"props":216,"children":217},{"style":134},[218],{"type":23,"value":219}," y ",{"type":17,"tag":115,"props":221,"children":222},{"style":122},[223],{"type":23,"value":224},":",{"type":17,"tag":115,"props":226,"children":228},{"style":227},"--shiki-default:#005CC5;--shiki-dark:#79B8FF",[229],{"type":23,"value":230}," 7",{"type":17,"tag":115,"props":232,"children":233},{"style":134},[234],{"type":23,"value":235},";\n",{"type":17,"tag":115,"props":237,"children":238},{"class":117,"line":153},[239,243,248,252,256],{"type":17,"tag":115,"props":240,"children":241},{"style":122},[242],{"type":23,"value":145},{"type":17,"tag":115,"props":244,"children":245},{"style":134},[246],{"type":23,"value":247}," x ",{"type":17,"tag":115,"props":249,"children":250},{"style":122},[251],{"type":23,"value":224},{"type":17,"tag":115,"props":253,"children":254},{"style":227},[255],{"type":23,"value":230},{"type":17,"tag":115,"props":257,"children":258},{"style":134},[259],{"type":23,"value":235},{"type":17,"tag":115,"props":261,"children":262},{"class":117,"line":166},[263,267,272,276,281],{"type":17,"tag":115,"props":264,"children":265},{"style":122},[266],{"type":23,"value":145},{"type":17,"tag":115,"props":268,"children":269},{"style":134},[270],{"type":23,"value":271}," left ",{"type":17,"tag":115,"props":273,"children":274},{"style":122},[275],{"type":23,"value":224},{"type":17,"tag":115,"props":277,"children":278},{"style":227},[279],{"type":23,"value":280}," 1",{"type":17,"tag":115,"props":282,"children":283},{"style":134},[284],{"type":23,"value":235},{"type":17,"tag":115,"props":286,"children":288},{"class":117,"line":287},5,[289,293,298,302,306],{"type":17,"tag":115,"props":290,"children":291},{"style":122},[292],{"type":23,"value":145},{"type":17,"tag":115,"props":294,"children":295},{"style":134},[296],{"type":23,"value":297}," right ",{"type":17,"tag":115,"props":299,"children":300},{"style":122},[301],{"type":23,"value":224},{"type":17,"tag":115,"props":303,"children":304},{"style":227},[305],{"type":23,"value":280},{"type":17,"tag":115,"props":307,"children":308},{"style":134},[309],{"type":23,"value":235},{"type":17,"tag":115,"props":311,"children":313},{"class":117,"line":312},6,[314],{"type":17,"tag":115,"props":315,"children":316},{"style":134},[317],{"type":23,"value":172},{"type":17,"tag":319,"props":320,"children":321},"warning",{},[322],{"type":17,"tag":25,"props":323,"children":324},{},[325,331,333,337],{"type":17,"tag":326,"props":327,"children":328},"strong",{},[329],{"type":23,"value":330},"Note:",{"type":23,"value":332}," When declaring a field with a bit-width, the compiler will automatically add bit-wise operations to get and set the value of the field. This means that the field will be slower to access than a normal field.",{"type":17,"tag":334,"props":335,"children":336},"br",{},[],{"type":23,"value":338},"\nIt is not recommended to use bit-fields unless you are reading data from a peripheral.",{"type":17,"tag":340,"props":341,"children":343},"h3",{"id":342},"bit-offsets",[344],{"type":23,"value":345},"Bit offsets",{"type":17,"tag":25,"props":347,"children":348},{},[349],{"type":23,"value":350},"Bit-fields are aligned by 16 bits. When declaring a bit-field, the compiler will automatically calculate the offset of the field. For example:",{"type":17,"tag":104,"props":352,"children":354},{"className":106,"code":353,"language":108,"meta":7,"style":7},"// Note: the following example will not compile\nstruct Example {\n    int a : 8 // Offset 0 with 8 bits\n    int b : 8 // Offset 8 with 8 bits\n    int c : 8 // Offset 16 with 8 bits\n}\n",[355],{"type":17,"tag":111,"props":356,"children":357},{"__ignoreMap":7},[358,367,383,409,434,459],{"type":17,"tag":115,"props":359,"children":360},{"class":117,"line":118},[361],{"type":17,"tag":115,"props":362,"children":364},{"style":363},"--shiki-default:#6A737D;--shiki-dark:#6A737D",[365],{"type":23,"value":366},"// Note: the following example will not compile\n",{"type":17,"tag":115,"props":368,"children":369},{"class":117,"line":35},[370,374,379],{"type":17,"tag":115,"props":371,"children":372},{"style":122},[373],{"type":23,"value":125},{"type":17,"tag":115,"props":375,"children":376},{"style":128},[377],{"type":23,"value":378}," Example",{"type":17,"tag":115,"props":380,"children":381},{"style":134},[382],{"type":23,"value":137},{"type":17,"tag":115,"props":384,"children":385},{"class":117,"line":153},[386,390,395,399,404],{"type":17,"tag":115,"props":387,"children":388},{"style":122},[389],{"type":23,"value":145},{"type":17,"tag":115,"props":391,"children":392},{"style":134},[393],{"type":23,"value":394}," a ",{"type":17,"tag":115,"props":396,"children":397},{"style":122},[398],{"type":23,"value":224},{"type":17,"tag":115,"props":400,"children":401},{"style":227},[402],{"type":23,"value":403}," 8",{"type":17,"tag":115,"props":405,"children":406},{"style":363},[407],{"type":23,"value":408}," // Offset 0 with 8 bits\n",{"type":17,"tag":115,"props":410,"children":411},{"class":117,"line":166},[412,416,421,425,429],{"type":17,"tag":115,"props":413,"children":414},{"style":122},[415],{"type":23,"value":145},{"type":17,"tag":115,"props":417,"children":418},{"style":134},[419],{"type":23,"value":420}," b ",{"type":17,"tag":115,"props":422,"children":423},{"style":122},[424],{"type":23,"value":224},{"type":17,"tag":115,"props":426,"children":427},{"style":227},[428],{"type":23,"value":403},{"type":17,"tag":115,"props":430,"children":431},{"style":363},[432],{"type":23,"value":433}," // Offset 8 with 8 bits\n",{"type":17,"tag":115,"props":435,"children":436},{"class":117,"line":287},[437,441,446,450,454],{"type":17,"tag":115,"props":438,"children":439},{"style":122},[440],{"type":23,"value":145},{"type":17,"tag":115,"props":442,"children":443},{"style":134},[444],{"type":23,"value":445}," c ",{"type":17,"tag":115,"props":447,"children":448},{"style":122},[449],{"type":23,"value":224},{"type":17,"tag":115,"props":451,"children":452},{"style":227},[453],{"type":23,"value":403},{"type":17,"tag":115,"props":455,"children":456},{"style":363},[457],{"type":23,"value":458}," // Offset 16 with 8 bits\n",{"type":17,"tag":115,"props":460,"children":461},{"class":117,"line":312},[462],{"type":17,"tag":115,"props":463,"children":464},{"style":134},[465],{"type":23,"value":172},{"type":17,"tag":25,"props":467,"children":468},{},[469],{"type":23,"value":470},"The bit-fields must be aligned by 16 bits. For example, the following struct is invalid because the last field is over the 16 bit boundary:",{"type":17,"tag":104,"props":472,"children":475},{"className":106,"code":473,"highlights":474,"language":108,"meta":7,"style":7},"// Note: the following example will not compile\nstruct InvalidExample {\n    int a : 7 // This is valid, offset 0 with 7 bits\n    int b : 7 // This is valid, offset 7 with 7 bits\n    int c : 7 // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n}\n",[287],[476],{"type":17,"tag":111,"props":477,"children":478},{"__ignoreMap":7},[479,486,502,526,550,575],{"type":17,"tag":115,"props":480,"children":481},{"class":117,"line":118},[482],{"type":17,"tag":115,"props":483,"children":484},{"style":363},[485],{"type":23,"value":366},{"type":17,"tag":115,"props":487,"children":488},{"class":117,"line":35},[489,493,498],{"type":17,"tag":115,"props":490,"children":491},{"style":122},[492],{"type":23,"value":125},{"type":17,"tag":115,"props":494,"children":495},{"style":128},[496],{"type":23,"value":497}," InvalidExample",{"type":17,"tag":115,"props":499,"children":500},{"style":134},[501],{"type":23,"value":137},{"type":17,"tag":115,"props":503,"children":504},{"class":117,"line":153},[505,509,513,517,521],{"type":17,"tag":115,"props":506,"children":507},{"style":122},[508],{"type":23,"value":145},{"type":17,"tag":115,"props":510,"children":511},{"style":134},[512],{"type":23,"value":394},{"type":17,"tag":115,"props":514,"children":515},{"style":122},[516],{"type":23,"value":224},{"type":17,"tag":115,"props":518,"children":519},{"style":227},[520],{"type":23,"value":230},{"type":17,"tag":115,"props":522,"children":523},{"style":363},[524],{"type":23,"value":525}," // This is valid, offset 0 with 7 bits\n",{"type":17,"tag":115,"props":527,"children":528},{"class":117,"line":166},[529,533,537,541,545],{"type":17,"tag":115,"props":530,"children":531},{"style":122},[532],{"type":23,"value":145},{"type":17,"tag":115,"props":534,"children":535},{"style":134},[536],{"type":23,"value":420},{"type":17,"tag":115,"props":538,"children":539},{"style":122},[540],{"type":23,"value":224},{"type":17,"tag":115,"props":542,"children":543},{"style":227},[544],{"type":23,"value":230},{"type":17,"tag":115,"props":546,"children":547},{"style":363},[548],{"type":23,"value":549}," // This is valid, offset 7 with 7 bits\n",{"type":17,"tag":115,"props":551,"children":553},{"class":552,"line":287},"line highlight",[554,558,562,566,570],{"type":17,"tag":115,"props":555,"children":556},{"style":122},[557],{"type":23,"value":145},{"type":17,"tag":115,"props":559,"children":560},{"style":134},[561],{"type":23,"value":445},{"type":17,"tag":115,"props":563,"children":564},{"style":122},[565],{"type":23,"value":224},{"type":17,"tag":115,"props":567,"children":568},{"style":227},[569],{"type":23,"value":230},{"type":17,"tag":115,"props":571,"children":572},{"style":363},[573],{"type":23,"value":574}," // This is invalid, offset 14 with 7 bits: [14 + 7 =] 21 > 16\n",{"type":17,"tag":115,"props":576,"children":577},{"class":117,"line":312},[578],{"type":17,"tag":115,"props":579,"children":580},{"style":134},[581],{"type":23,"value":172},{"type":17,"tag":25,"props":583,"children":584},{},[585],{"type":23,"value":586},"When a normal field is introduced, offset is reset to the 16 bit boundary. For example:",{"type":17,"tag":104,"props":588,"children":591},{"className":106,"code":589,"highlights":590,"language":108,"meta":7,"style":7},"struct Example {\n    int a : 7   //          Offset 0,    7 bits\n    int b : 7   //          Offset 7,    7 bits\n    int c       // Reset,   Offset 16,   16 bits\n    int d : 7   //          Offset 32,   7 bits\n}\n",[166],[592],{"type":17,"tag":111,"props":593,"children":594},{"__ignoreMap":7},[595,610,634,658,675,700],{"type":17,"tag":115,"props":596,"children":597},{"class":117,"line":118},[598,602,606],{"type":17,"tag":115,"props":599,"children":600},{"style":122},[601],{"type":23,"value":125},{"type":17,"tag":115,"props":603,"children":604},{"style":128},[605],{"type":23,"value":378},{"type":17,"tag":115,"props":607,"children":608},{"style":134},[609],{"type":23,"value":137},{"type":17,"tag":115,"props":611,"children":612},{"class":117,"line":35},[613,617,621,625,629],{"type":17,"tag":115,"props":614,"children":615},{"style":122},[616],{"type":23,"value":145},{"type":17,"tag":115,"props":618,"children":619},{"style":134},[620],{"type":23,"value":394},{"type":17,"tag":115,"props":622,"children":623},{"style":122},[624],{"type":23,"value":224},{"type":17,"tag":115,"props":626,"children":627},{"style":227},[628],{"type":23,"value":230},{"type":17,"tag":115,"props":630,"children":631},{"style":363},[632],{"type":23,"value":633},"   //          Offset 0,    7 bits\n",{"type":17,"tag":115,"props":635,"children":636},{"class":117,"line":153},[637,641,645,649,653],{"type":17,"tag":115,"props":638,"children":639},{"style":122},[640],{"type":23,"value":145},{"type":17,"tag":115,"props":642,"children":643},{"style":134},[644],{"type":23,"value":420},{"type":17,"tag":115,"props":646,"children":647},{"style":122},[648],{"type":23,"value":224},{"type":17,"tag":115,"props":650,"children":651},{"style":227},[652],{"type":23,"value":230},{"type":17,"tag":115,"props":654,"children":655},{"style":363},[656],{"type":23,"value":657},"   //          Offset 7,    7 bits\n",{"type":17,"tag":115,"props":659,"children":660},{"class":552,"line":166},[661,665,670],{"type":17,"tag":115,"props":662,"children":663},{"style":122},[664],{"type":23,"value":145},{"type":17,"tag":115,"props":666,"children":667},{"style":134},[668],{"type":23,"value":669}," c       ",{"type":17,"tag":115,"props":671,"children":672},{"style":363},[673],{"type":23,"value":674},"// Reset,   Offset 16,   16 bits\n",{"type":17,"tag":115,"props":676,"children":677},{"class":117,"line":287},[678,682,687,691,695],{"type":17,"tag":115,"props":679,"children":680},{"style":122},[681],{"type":23,"value":145},{"type":17,"tag":115,"props":683,"children":684},{"style":134},[685],{"type":23,"value":686}," d ",{"type":17,"tag":115,"props":688,"children":689},{"style":122},[690],{"type":23,"value":224},{"type":17,"tag":115,"props":692,"children":693},{"style":227},[694],{"type":23,"value":230},{"type":17,"tag":115,"props":696,"children":697},{"style":363},[698],{"type":23,"value":699},"   //          Offset 32,   7 bits\n",{"type":17,"tag":115,"props":701,"children":702},{"class":117,"line":312},[703],{"type":17,"tag":115,"props":704,"children":705},{"style":134},[706],{"type":23,"value":172},{"type":17,"tag":174,"props":708,"children":710},{"id":709},"initializing-structs",[711],{"type":23,"value":712},"Initializing structs",{"type":17,"tag":25,"props":714,"children":715},{},[716,718,723,725,730],{"type":23,"value":717},"Structs can be initialized by using curly braces (",{"type":17,"tag":111,"props":719,"children":720},{"className":7},[721],{"type":23,"value":722},"{",{"type":23,"value":724}," and ",{"type":17,"tag":111,"props":726,"children":727},{"className":7},[728],{"type":23,"value":729},"}",{"type":23,"value":731},") to specify the values of the fields. For example:",{"type":17,"tag":104,"props":733,"children":738},{"className":106,"code":734,"filename":735,"highlights":736,"language":108,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the x value 1 and the y value 2\nPoint point = { 1, 2 }\n","run",[737],7,[739],{"type":17,"tag":111,"props":740,"children":741},{"__ignoreMap":7},[742,757,768,779,786,794,802],{"type":17,"tag":115,"props":743,"children":744},{"class":117,"line":118},[745,749,753],{"type":17,"tag":115,"props":746,"children":747},{"style":122},[748],{"type":23,"value":125},{"type":17,"tag":115,"props":750,"children":751},{"style":128},[752],{"type":23,"value":131},{"type":17,"tag":115,"props":754,"children":755},{"style":134},[756],{"type":23,"value":137},{"type":17,"tag":115,"props":758,"children":759},{"class":117,"line":35},[760,764],{"type":17,"tag":115,"props":761,"children":762},{"style":122},[763],{"type":23,"value":145},{"type":17,"tag":115,"props":765,"children":766},{"style":134},[767],{"type":23,"value":150},{"type":17,"tag":115,"props":769,"children":770},{"class":117,"line":153},[771,775],{"type":17,"tag":115,"props":772,"children":773},{"style":122},[774],{"type":23,"value":145},{"type":17,"tag":115,"props":776,"children":777},{"style":134},[778],{"type":23,"value":163},{"type":17,"tag":115,"props":780,"children":781},{"class":117,"line":166},[782],{"type":17,"tag":115,"props":783,"children":784},{"style":134},[785],{"type":23,"value":172},{"type":17,"tag":115,"props":787,"children":788},{"class":117,"line":287},[789],{"type":17,"tag":115,"props":790,"children":791},{"emptyLinePlaceholder":55},[792],{"type":23,"value":793},"\n",{"type":17,"tag":115,"props":795,"children":796},{"class":117,"line":312},[797],{"type":17,"tag":115,"props":798,"children":799},{"style":363},[800],{"type":23,"value":801},"// Create a point with the x value 1 and the y value 2\n",{"type":17,"tag":115,"props":803,"children":804},{"class":552,"line":737},[805,810,815,820,825,830,835,840],{"type":17,"tag":115,"props":806,"children":807},{"style":128},[808],{"type":23,"value":809},"Point",{"type":17,"tag":115,"props":811,"children":812},{"style":134},[813],{"type":23,"value":814}," point ",{"type":17,"tag":115,"props":816,"children":817},{"style":122},[818],{"type":23,"value":819},"=",{"type":17,"tag":115,"props":821,"children":822},{"style":134},[823],{"type":23,"value":824}," { ",{"type":17,"tag":115,"props":826,"children":827},{"style":227},[828],{"type":23,"value":829},"1",{"type":17,"tag":115,"props":831,"children":832},{"style":134},[833],{"type":23,"value":834},", ",{"type":17,"tag":115,"props":836,"children":837},{"style":227},[838],{"type":23,"value":839},"2",{"type":17,"tag":115,"props":841,"children":842},{"style":134},[843],{"type":23,"value":844}," }\n",{"type":17,"tag":25,"props":846,"children":847},{},[848],{"type":23,"value":849},"It is also possible to initialize structs by specifying the name of the fields. For example:",{"type":17,"tag":104,"props":851,"children":855},{"className":106,"code":852,"filename":735,"highlights":853,"language":108,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\n// Create a point with the y value 2 and the x value 1\n// Note: the order of the fields does not matter when initializing a struct\nPoint point = { y: 2, x: 1 }\n",[854],8,[856],{"type":17,"tag":111,"props":857,"children":858},{"__ignoreMap":7},[859,874,885,896,903,910,918,926],{"type":17,"tag":115,"props":860,"children":861},{"class":117,"line":118},[862,866,870],{"type":17,"tag":115,"props":863,"children":864},{"style":122},[865],{"type":23,"value":125},{"type":17,"tag":115,"props":867,"children":868},{"style":128},[869],{"type":23,"value":131},{"type":17,"tag":115,"props":871,"children":872},{"style":134},[873],{"type":23,"value":137},{"type":17,"tag":115,"props":875,"children":876},{"class":117,"line":35},[877,881],{"type":17,"tag":115,"props":878,"children":879},{"style":122},[880],{"type":23,"value":145},{"type":17,"tag":115,"props":882,"children":883},{"style":134},[884],{"type":23,"value":150},{"type":17,"tag":115,"props":886,"children":887},{"class":117,"line":153},[888,892],{"type":17,"tag":115,"props":889,"children":890},{"style":122},[891],{"type":23,"value":145},{"type":17,"tag":115,"props":893,"children":894},{"style":134},[895],{"type":23,"value":163},{"type":17,"tag":115,"props":897,"children":898},{"class":117,"line":166},[899],{"type":17,"tag":115,"props":900,"children":901},{"style":134},[902],{"type":23,"value":172},{"type":17,"tag":115,"props":904,"children":905},{"class":117,"line":287},[906],{"type":17,"tag":115,"props":907,"children":908},{"emptyLinePlaceholder":55},[909],{"type":23,"value":793},{"type":17,"tag":115,"props":911,"children":912},{"class":117,"line":312},[913],{"type":17,"tag":115,"props":914,"children":915},{"style":363},[916],{"type":23,"value":917},"// Create a point with the y value 2 and the x value 1\n",{"type":17,"tag":115,"props":919,"children":920},{"class":117,"line":737},[921],{"type":17,"tag":115,"props":922,"children":923},{"style":363},[924],{"type":23,"value":925},"// Note: the order of the fields does not matter when initializing a struct\n",{"type":17,"tag":115,"props":927,"children":928},{"class":552,"line":854},[929,933,937,941,946,950,955,959],{"type":17,"tag":115,"props":930,"children":931},{"style":128},[932],{"type":23,"value":809},{"type":17,"tag":115,"props":934,"children":935},{"style":134},[936],{"type":23,"value":814},{"type":17,"tag":115,"props":938,"children":939},{"style":122},[940],{"type":23,"value":819},{"type":17,"tag":115,"props":942,"children":943},{"style":134},[944],{"type":23,"value":945}," { y: ",{"type":17,"tag":115,"props":947,"children":948},{"style":227},[949],{"type":23,"value":839},{"type":17,"tag":115,"props":951,"children":952},{"style":134},[953],{"type":23,"value":954},", x: ",{"type":17,"tag":115,"props":956,"children":957},{"style":227},[958],{"type":23,"value":829},{"type":17,"tag":115,"props":960,"children":961},{"style":134},[962],{"type":23,"value":844},{"type":17,"tag":174,"props":964,"children":966},{"id":965},"accessing-fields",[967],{"type":23,"value":968},"Accessing fields",{"type":17,"tag":25,"props":970,"children":971},{},[972,974,979],{"type":23,"value":973},"The fields of a struct can be accessed by using the dot (",{"type":17,"tag":111,"props":975,"children":976},{"className":7},[977],{"type":23,"value":978},".",{"type":23,"value":980},") operator. For example:",{"type":17,"tag":104,"props":982,"children":986},{"className":106,"code":983,"filename":735,"highlights":984,"language":108,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nPoint point = { 1, 2 }\n\n// Access the x field of the point\nint x = point.x\n",[985],9,[987],{"type":17,"tag":111,"props":988,"children":989},{"__ignoreMap":7},[990,1005,1016,1027,1034,1041,1076,1083,1091],{"type":17,"tag":115,"props":991,"children":992},{"class":117,"line":118},[993,997,1001],{"type":17,"tag":115,"props":994,"children":995},{"style":122},[996],{"type":23,"value":125},{"type":17,"tag":115,"props":998,"children":999},{"style":128},[1000],{"type":23,"value":131},{"type":17,"tag":115,"props":1002,"children":1003},{"style":134},[1004],{"type":23,"value":137},{"type":17,"tag":115,"props":1006,"children":1007},{"class":117,"line":35},[1008,1012],{"type":17,"tag":115,"props":1009,"children":1010},{"style":122},[1011],{"type":23,"value":145},{"type":17,"tag":115,"props":1013,"children":1014},{"style":134},[1015],{"type":23,"value":150},{"type":17,"tag":115,"props":1017,"children":1018},{"class":117,"line":153},[1019,1023],{"type":17,"tag":115,"props":1020,"children":1021},{"style":122},[1022],{"type":23,"value":145},{"type":17,"tag":115,"props":1024,"children":1025},{"style":134},[1026],{"type":23,"value":163},{"type":17,"tag":115,"props":1028,"children":1029},{"class":117,"line":166},[1030],{"type":17,"tag":115,"props":1031,"children":1032},{"style":134},[1033],{"type":23,"value":172},{"type":17,"tag":115,"props":1035,"children":1036},{"class":117,"line":287},[1037],{"type":17,"tag":115,"props":1038,"children":1039},{"emptyLinePlaceholder":55},[1040],{"type":23,"value":793},{"type":17,"tag":115,"props":1042,"children":1043},{"class":117,"line":312},[1044,1048,1052,1056,1060,1064,1068,1072],{"type":17,"tag":115,"props":1045,"children":1046},{"style":128},[1047],{"type":23,"value":809},{"type":17,"tag":115,"props":1049,"children":1050},{"style":134},[1051],{"type":23,"value":814},{"type":17,"tag":115,"props":1053,"children":1054},{"style":122},[1055],{"type":23,"value":819},{"type":17,"tag":115,"props":1057,"children":1058},{"style":134},[1059],{"type":23,"value":824},{"type":17,"tag":115,"props":1061,"children":1062},{"style":227},[1063],{"type":23,"value":829},{"type":17,"tag":115,"props":1065,"children":1066},{"style":134},[1067],{"type":23,"value":834},{"type":17,"tag":115,"props":1069,"children":1070},{"style":227},[1071],{"type":23,"value":839},{"type":17,"tag":115,"props":1073,"children":1074},{"style":134},[1075],{"type":23,"value":844},{"type":17,"tag":115,"props":1077,"children":1078},{"class":117,"line":737},[1079],{"type":17,"tag":115,"props":1080,"children":1081},{"emptyLinePlaceholder":55},[1082],{"type":23,"value":793},{"type":17,"tag":115,"props":1084,"children":1085},{"class":117,"line":854},[1086],{"type":17,"tag":115,"props":1087,"children":1088},{"style":363},[1089],{"type":23,"value":1090},"// Access the x field of the point\n",{"type":17,"tag":115,"props":1092,"children":1093},{"class":552,"line":985},[1094,1099,1103,1107],{"type":17,"tag":115,"props":1095,"children":1096},{"style":122},[1097],{"type":23,"value":1098},"int",{"type":17,"tag":115,"props":1100,"children":1101},{"style":134},[1102],{"type":23,"value":247},{"type":17,"tag":115,"props":1104,"children":1105},{"style":122},[1106],{"type":23,"value":819},{"type":17,"tag":115,"props":1108,"children":1109},{"style":134},[1110],{"type":23,"value":1111}," point.x\n",{"type":17,"tag":174,"props":1113,"children":1115},{"id":1114},"nested-structs",[1116],{"type":23,"value":1117},"Nested structs",{"type":17,"tag":25,"props":1119,"children":1120},{},[1121],{"type":23,"value":1122},"Structs can be nested inside other structs. For example:",{"type":17,"tag":104,"props":1124,"children":1126},{"className":106,"code":1125,"filename":735,"language":108,"meta":7,"style":7},"struct Point {\n    int x;\n    int y;\n}\n\nstruct Rectangle {\n    Point topLeft;\n    Point bottomRight;\n}\n\nRectangle rectangle = {\n    topLeft: { x: 1, y: 2 },\n    bottomRight: { x: 3, y: 4 }\n}\n\n// Access the x field of the top left point of the rectangle\nint x = rectangle.topLeft.x\n",[1127],{"type":17,"tag":111,"props":1128,"children":1129},{"__ignoreMap":7},[1130,1145,1156,1167,1174,1181,1197,1210,1222,1229,1237,1259,1286,1313,1321,1329,1338],{"type":17,"tag":115,"props":1131,"children":1132},{"class":117,"line":118},[1133,1137,1141],{"type":17,"tag":115,"props":1134,"children":1135},{"style":122},[1136],{"type":23,"value":125},{"type":17,"tag":115,"props":1138,"children":1139},{"style":128},[1140],{"type":23,"value":131},{"type":17,"tag":115,"props":1142,"children":1143},{"style":134},[1144],{"type":23,"value":137},{"type":17,"tag":115,"props":1146,"children":1147},{"class":117,"line":35},[1148,1152],{"type":17,"tag":115,"props":1149,"children":1150},{"style":122},[1151],{"type":23,"value":145},{"type":17,"tag":115,"props":1153,"children":1154},{"style":134},[1155],{"type":23,"value":150},{"type":17,"tag":115,"props":1157,"children":1158},{"class":117,"line":153},[1159,1163],{"type":17,"tag":115,"props":1160,"children":1161},{"style":122},[1162],{"type":23,"value":145},{"type":17,"tag":115,"props":1164,"children":1165},{"style":134},[1166],{"type":23,"value":163},{"type":17,"tag":115,"props":1168,"children":1169},{"class":117,"line":166},[1170],{"type":17,"tag":115,"props":1171,"children":1172},{"style":134},[1173],{"type":23,"value":172},{"type":17,"tag":115,"props":1175,"children":1176},{"class":117,"line":287},[1177],{"type":17,"tag":115,"props":1178,"children":1179},{"emptyLinePlaceholder":55},[1180],{"type":23,"value":793},{"type":17,"tag":115,"props":1182,"children":1183},{"class":117,"line":312},[1184,1188,1193],{"type":17,"tag":115,"props":1185,"children":1186},{"style":122},[1187],{"type":23,"value":125},{"type":17,"tag":115,"props":1189,"children":1190},{"style":128},[1191],{"type":23,"value":1192}," Rectangle",{"type":17,"tag":115,"props":1194,"children":1195},{"style":134},[1196],{"type":23,"value":137},{"type":17,"tag":115,"props":1198,"children":1199},{"class":117,"line":737},[1200,1205],{"type":17,"tag":115,"props":1201,"children":1202},{"style":128},[1203],{"type":23,"value":1204},"    Point",{"type":17,"tag":115,"props":1206,"children":1207},{"style":134},[1208],{"type":23,"value":1209}," topLeft;\n",{"type":17,"tag":115,"props":1211,"children":1212},{"class":117,"line":854},[1213,1217],{"type":17,"tag":115,"props":1214,"children":1215},{"style":128},[1216],{"type":23,"value":1204},{"type":17,"tag":115,"props":1218,"children":1219},{"style":134},[1220],{"type":23,"value":1221}," bottomRight;\n",{"type":17,"tag":115,"props":1223,"children":1224},{"class":117,"line":985},[1225],{"type":17,"tag":115,"props":1226,"children":1227},{"style":134},[1228],{"type":23,"value":172},{"type":17,"tag":115,"props":1230,"children":1232},{"class":117,"line":1231},10,[1233],{"type":17,"tag":115,"props":1234,"children":1235},{"emptyLinePlaceholder":55},[1236],{"type":23,"value":793},{"type":17,"tag":115,"props":1238,"children":1240},{"class":117,"line":1239},11,[1241,1246,1251,1255],{"type":17,"tag":115,"props":1242,"children":1243},{"style":128},[1244],{"type":23,"value":1245},"Rectangle",{"type":17,"tag":115,"props":1247,"children":1248},{"style":134},[1249],{"type":23,"value":1250}," rectangle ",{"type":17,"tag":115,"props":1252,"children":1253},{"style":122},[1254],{"type":23,"value":819},{"type":17,"tag":115,"props":1256,"children":1257},{"style":134},[1258],{"type":23,"value":137},{"type":17,"tag":115,"props":1260,"children":1262},{"class":117,"line":1261},12,[1263,1268,1272,1277,1281],{"type":17,"tag":115,"props":1264,"children":1265},{"style":134},[1266],{"type":23,"value":1267},"    topLeft: { x: ",{"type":17,"tag":115,"props":1269,"children":1270},{"style":227},[1271],{"type":23,"value":829},{"type":17,"tag":115,"props":1273,"children":1274},{"style":134},[1275],{"type":23,"value":1276},", y: ",{"type":17,"tag":115,"props":1278,"children":1279},{"style":227},[1280],{"type":23,"value":839},{"type":17,"tag":115,"props":1282,"children":1283},{"style":134},[1284],{"type":23,"value":1285}," },\n",{"type":17,"tag":115,"props":1287,"children":1289},{"class":117,"line":1288},13,[1290,1295,1300,1304,1309],{"type":17,"tag":115,"props":1291,"children":1292},{"style":134},[1293],{"type":23,"value":1294},"    bottomRight: { x: ",{"type":17,"tag":115,"props":1296,"children":1297},{"style":227},[1298],{"type":23,"value":1299},"3",{"type":17,"tag":115,"props":1301,"children":1302},{"style":134},[1303],{"type":23,"value":1276},{"type":17,"tag":115,"props":1305,"children":1306},{"style":227},[1307],{"type":23,"value":1308},"4",{"type":17,"tag":115,"props":1310,"children":1311},{"style":134},[1312],{"type":23,"value":844},{"type":17,"tag":115,"props":1314,"children":1316},{"class":117,"line":1315},14,[1317],{"type":17,"tag":115,"props":1318,"children":1319},{"style":134},[1320],{"type":23,"value":172},{"type":17,"tag":115,"props":1322,"children":1324},{"class":117,"line":1323},15,[1325],{"type":17,"tag":115,"props":1326,"children":1327},{"emptyLinePlaceholder":55},[1328],{"type":23,"value":793},{"type":17,"tag":115,"props":1330,"children":1332},{"class":117,"line":1331},16,[1333],{"type":17,"tag":115,"props":1334,"children":1335},{"style":363},[1336],{"type":23,"value":1337},"// Access the x field of the top left point of the rectangle\n",{"type":17,"tag":115,"props":1339,"children":1341},{"class":117,"line":1340},17,[1342,1346,1350,1354],{"type":17,"tag":115,"props":1343,"children":1344},{"style":122},[1345],{"type":23,"value":1098},{"type":17,"tag":115,"props":1347,"children":1348},{"style":134},[1349],{"type":23,"value":247},{"type":17,"tag":115,"props":1351,"children":1352},{"style":122},[1353],{"type":23,"value":819},{"type":17,"tag":115,"props":1355,"children":1356},{"style":134},[1357],{"type":23,"value":1358}," rectangle.topLeft.x\n",{"type":17,"tag":1360,"props":1361,"children":1362},"style",{},[1363],{"type":23,"value":1364},"html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":7,"searchDepth":35,"depth":35,"links":1366},[1367,1370,1371,1372],{"id":176,"depth":35,"text":179,"children":1368},[1369],{"id":342,"depth":153,"text":345},{"id":709,"depth":35,"text":712},{"id":965,"depth":35,"text":968},{"id":1114,"depth":35,"text":1117},"content:docs:3.language-reference:1.structs.md","docs/3.language-reference/1.structs.md",1698330391302]